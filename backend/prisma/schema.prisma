// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "./dbml"
  outputName = "schema.dbml"
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  firstName     String?
  lastName      String?
  password      String?
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  emailVerified Boolean  @default(false)
  image         String?
  Exam          Exam[]
}

model Exam {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  trueFalse      TrueFalse[]
  multipleChoices MultipleChoice[]
  shortAnswers    ShortAnswer[]
  multipleSelects MultipleSelect[]
  user           User             @relation(fields: [userId], references: [id])
  deletedAt      DateTime?
  isDeleted      Boolean          @default(false)
  userId         Int
}

model MultipleSelect {
  id        Int       @id @default(autoincrement())
  question  String
  options   String[]
  answer    Int[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  exam      Exam      @relation(fields: [examId], references: [id])
  examId    Int
  deletedAt DateTime?
  isDeleted Boolean   @default(false)
}

model TrueFalse {
  id        Int       @id @default(autoincrement())
  question  String
  answer    Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  exam      Exam      @relation(fields: [examId], references: [id])
  examId    Int
  deletedAt DateTime?
  isDeleted Boolean   @default(false)
}

model MultipleChoice {
  id        Int       @id @default(autoincrement())
  question  String
  options   String[]
  answer    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  exam      Exam      @relation(fields: [examId], references: [id])
  examId    Int
  deletedAt DateTime?
  isDeleted Boolean   @default(false)
}


model ShortAnswer {
  id        Int       @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  exam      Exam      @relation(fields: [examId], references: [id])
  examId    Int
  deletedAt DateTime?
  isDeleted Boolean   @default(false)
}



enum Role {
  ADMIN
  USER
}
