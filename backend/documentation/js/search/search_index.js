var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.738,1,2.445]],["body/injectables/AccessTokenGuard.html",[0,1.286,1,4.259,2,2.074,3,0.157,4,0.138,5,0.138,6,3.552,7,2.924,8,4.673,9,0.26,10,0.012,11,1.109,12,4.673,13,3.368,14,0.157,15,0.355,16,2.147,17,5.168,18,0.011,19,0.011]],["title/modules/AccessTokenModule.html",[20,1.333,21,2.759]],["body/modules/AccessTokenModule.html",[3,0.117,4,0.103,5,0.103,6,2.651,7,2.182,9,0.27,10,0.013,11,0.828,14,0.117,15,0.265,18,0.009,19,0.009,20,1.929,21,5.395,22,1.928,23,2.572,24,3.857,25,3.857,26,3.857,27,4.904,28,5.137,29,2.79,30,2.09,31,2.09,32,3.857,33,2.912,34,3.354,35,3.427,36,2.862,37,1.445,38,5.146,39,2.808,40,3.992,41,3.212,42,3.857,43,3.045,44,3.857,45,2.808,46,2.991,47,3.857,48,3.857,49,3.857,50,3.857,51,3.857]],["title/injectables/AccessTokenService.html",[0,0.738,27,2.445]],["body/injectables/AccessTokenService.html",[0,0.903,2,1.214,3,0.092,4,0.08,5,0.08,6,4.22,7,3.474,9,0.257,10,0.013,11,0.649,14,0.092,15,0.208,18,0.007,19,0.007,27,2.989,36,2.929,37,1.134,39,2.202,51,3.024,52,2.735,53,0.372,54,1.137,55,4.239,56,6.139,57,1.213,58,4.348,59,4.348,60,1.686,61,3.024,62,5.552,63,0.789,64,4.348,65,1.467,66,1.375,67,0.757,68,1.057,69,4.348,70,4.606,71,3.024,72,3.373,73,1.213,74,3.621,75,4.348,76,1.711,77,3.826,78,3.024,79,0.965,80,3.024,81,1.876,82,2.735,83,2.834,84,2.519,85,1.512,86,5.091,87,3.024,88,2.45,89,4.348,90,3.024,91,4.348,92,3.024,93,4.348,94,5.566,95,3.024,96,4.98,97,2.091,98,0.993,99,3.621,100,2.573,101,1.789,102,3.621,103,3.024,104,3.024,105,3.024]],["title/injectables/AccessTokenStrategy.html",[0,0.738,28,2.759]],["body/injectables/AccessTokenStrategy.html",[0,1.051,2,1.511,3,0.114,4,0.1,5,0.1,6,3.933,7,3.237,9,0.276,10,0.013,11,0.808,13,2.454,14,0.114,15,0.258,16,1.564,18,0.009,19,0.009,28,3.928,36,2.957,37,1.411,48,3.764,53,0.463,55,3.135,57,1.413,60,1.46,63,0.677,65,1.46,66,1.368,67,0.65,68,1.051,73,1.051,81,2.335,83,4.38,84,3.135,87,3.764,88,2.378,106,3.404,107,3.3,108,3.928,109,3.764,110,5.064,111,4.312,112,3.404,113,3.764,114,3.404,115,3.135,116,4.217,117,3.933,118,3.404,119,5.064,120,5.064,121,3.764,122,3.764,123,2.227,124,3.404,125,1.236]],["title/modules/AppModule.html",[20,1.333,126,2.962]],["body/modules/AppModule.html",[3,0.067,4,0.059,5,0.059,9,0.272,10,0.013,11,0.476,14,0.067,15,0.152,18,0.006,19,0.006,20,1.291,22,1.108,23,1.722,29,1.868,30,1.202,31,1.202,33,1.254,35,2.039,36,1.957,37,0.831,43,2.501,45,1.614,46,1.719,57,0.619,63,0.296,65,0.639,66,0.599,67,0.285,68,0.46,73,0.619,74,1.846,97,1.066,126,5.467,127,2.217,128,2.217,129,4.239,130,4.239,131,4.239,132,3.98,133,3.98,134,2.539,135,2.539,136,3.946,137,5.46,138,2.539,139,2.539,140,3.946,141,3.946,142,3.946,143,2.217,144,2.539,145,3.445,146,3.946,147,3.445,148,3.445,149,3.946,150,1.719,151,2.869,152,2.539,153,3.946,154,2.539,155,2.217,156,2.539,157,2.539,158,2.539,159,1.846,160,2.004,161,1.614,162,2.217,163,1.846,164,2.539,165,2.539,166,2.539,167,2.539,168,2.539,169,2.539,170,2.539,171,2.217,172,2.217,173,2.539,174,2.539,175,2.004,176,2.539,177,2.539,178,6.755,179,2.539,180,3.946,181,2.539,182,2.539,183,2.539,184,2.539,185,2.539,186,2.539,187,2.539,188,2.539,189,2.539,190,2.539,191,2.539,192,7.222,193,4.841,194,2.539,195,2.539,196,2.539,197,2.539,198,3.946,199,3.946,200,2.539,201,2.539,202,2.539,203,2.539,204,2.539,205,2.539,206,2.539,207,2.539,208,2.539,209,2.539,210,2.539,211,2.539,212,2.539,213,2.539,214,2.539,215,2.539,216,2.539,217,4.841,218,4.841,219,2.539,220,2.539,221,1.614,222,2.539,223,2.539,224,2.539,225,2.539,226,2.539,227,2.539,228,2.539,229,2.539,230,2.539,231,2.539,232,2.539,233,2.539,234,2.539,235,2.539,236,2.539,237,2.539,238,2.539,239,2.193,240,2.539,241,2.539,242,2.004,243,2.004,244,2.539,245,1.614,246,2.539,247,2.539,248,1.202,249,4.31,250,3.822,251,2.539,252,1.375,253,1.846,254,2.539,255,2.539,256,2.539,257,2.539,258,1.311,259,2.539]],["title/controllers/AuthController.html",[260,1.85,261,2.962]],["body/controllers/AuthController.html",[1,1.462,3,0.065,4,0.057,5,0.057,7,1.888,9,0.269,10,0.013,11,0.457,14,0.065,15,0.146,18,0.006,19,0.006,27,2.829,39,1.549,40,2.588,41,2.778,53,0.262,57,0.931,60,0.825,62,3.722,63,0.677,65,1.46,66,1.368,67,0.69,68,1.051,70,4.874,72,3.193,73,1.413,76,1.203,81,1.319,85,2.33,88,1.937,97,2.241,98,1.764,99,1.771,100,1.258,101,1.258,102,1.771,117,1.462,125,1.662,239,1.652,248,1.153,252,1.319,260,1.106,261,2.778,262,2.127,263,1.549,264,1.923,265,3.048,266,4.714,267,3.821,268,4.714,269,3.394,270,2.436,271,3.615,272,1.609,273,2.436,274,2.436,275,2.33,276,2.436,277,3.882,278,2.436,279,3.821,280,1.604,281,3.621,282,2.436,283,3.615,284,2.436,285,2.436,286,2.436,287,2.436,288,1.274,289,3.821,290,2.436,291,2.436,292,2.436,293,2.436,294,2.436,295,1.65,296,1.65,297,1.771,298,1.65,299,3.821,300,3.821,301,2.778,302,1.549,303,0.594,304,2.778,305,1.923,306,2.436,307,1.974,308,1.923,309,3.821,310,2.127,311,2.829,312,2.174,313,1.65,314,2.127,315,1.771,316,2.778,317,2.436,318,2.436,319,2.436,320,1.209,321,2.436,322,2.758,323,1.771,324,2.436,325,4.116,326,1.462,327,2.637,328,3.722,329,2.436,330,2.436,331,2.436,332,3.821,333,1.65,334,2.127,335,2.436,336,1.923,337,2.436,338,2.436,339,2.436,340,2.436,341,2.436,342,2.436,343,2.127,344,2.429,345,2.436,346,3.336,347,2.436,348,2.436,349,2.436,350,2.436,351,2.436,352,2.436,353,2.436,354,2.436,355,1.771,356,2.436]],["title/modules/AuthModule.html",[20,1.333,129,2.759]],["body/modules/AuthModule.html",[3,0.096,4,0.084,5,0.084,7,1.793,9,0.292,10,0.013,11,0.68,13,2.065,14,0.096,15,0.217,18,0.008,19,0.008,20,1.685,21,4.837,22,1.584,23,2.247,29,2.437,30,1.718,31,1.718,33,2.543,34,2.065,35,2.66,37,1.188,40,2.458,43,2.66,116,2.639,129,5.553,133,4.54,143,3.169,239,1.272,248,2.437,261,4.35,269,2.307,281,1.875,312,2.065,357,3.169,358,3.169,359,3.169,360,4.837,361,4.837,362,4.837,363,4.54,364,4.837,365,3.629,366,4.35,367,4.35,368,3.629,369,5.149,370,3.629,371,5.149,372,3.629,373,3.629,374,3.629,375,3.629,376,3.629,377,3.629,378,3.629,379,3.629,380,3.629]],["title/classes/CreateExamDto.html",[15,0.244,381,2.59]],["body/classes/CreateExamDto.html",[3,0.135,4,0.118,5,0.118,9,0.236,10,0.013,14,0.135,15,0.425,18,0.01,19,0.01,53,0.547,54,1.475,63,0.754,66,1.675,67,0.724,68,1.171,79,1.448,253,4.698,272,1.792,320,2.247,381,4.107,382,0.953,383,6.2,384,3.698,385,5.086,386,5.086,387,5.086,388,5.086,389,2.219,390,3.338,391,3.361,392,1.912,393,1.506,394,5.086]],["title/classes/CreateMultipleChoiceDto.html",[15,0.244,395,2.759]],["body/classes/CreateMultipleChoiceDto.html",[3,0.086,4,0.076,5,0.076,9,0.252,10,0.013,14,0.086,15,0.337,18,0.007,19,0.007,53,0.35,54,1.087,57,1.159,63,0.83,67,0.858,68,0.862,73,0.793,79,1.528,107,1.851,125,0.932,239,1.667,272,1.909,288,1.282,303,0.793,320,1.959,382,0.61,389,1.42,390,2.906,391,2.93,392,1.223,393,0.964,395,3.223,396,3.946,397,5.753,398,4.374,399,2.569,400,3.202,401,3.523,402,3.916,403,2.412,404,2.93,405,4.091,406,4.501,407,3.253,408,3.253,409,2.365,410,3.253,411,3.523,412,3.253,413,3.46,414,4.813,415,3.223,416,3.253,417,3.253,418,1.065,419,2.365,420,3.253,421,3.253,422,2.906,423,2.708,424,2.458,425,1.607,426,0.996,427,2.068,428,1.953,429,2.365,430,2.365,431,2.569,432,3.253,433,3.253,434,2.203,435,2.203,436,2.569,437,2.203,438,2.365,439,1.953,440,2.569,441,2.365]],["title/classes/CreateMultipleSelectDto.html",[15,0.244,442,2.962]],["body/classes/CreateMultipleSelectDto.html",[3,0.086,4,0.076,5,0.076,9,0.241,10,0.013,14,0.086,15,0.337,18,0.007,19,0.007,53,0.35,54,1.087,57,1.159,63,0.83,67,0.876,68,0.862,73,0.793,79,1.528,125,0.932,239,1.971,272,1.909,288,1.472,303,0.793,320,1.959,382,0.61,389,1.42,390,2.906,391,2.93,392,1.223,393,0.964,396,3.946,398,4.374,401,3.523,402,3.523,403,2.412,404,2.93,405,4.091,406,4.501,409,2.365,411,3.202,413,4.091,414,5.116,415,3.81,418,1.065,419,2.365,422,2.906,423,3.202,424,2.458,425,1.607,426,0.996,427,2.068,428,1.953,434,2.203,435,2.203,436,2.569,437,2.203,438,2.365,439,3.715,441,2.365,442,3.46,443,6.362,444,2.569,445,3.253,446,3.253,447,3.253,448,3.253,449,3.253,450,3.253,451,3.253,452,2.203,453,2.841]],["title/classes/CreateQuestionDto.html",[15,0.244,422,2.105]],["body/classes/CreateQuestionDto.html",[3,0.095,4,0.084,5,0.084,9,0.237,10,0.013,14,0.095,15,0.357,18,0.008,19,0.008,53,0.387,54,1.17,63,0.856,67,0.91,68,0.928,79,1.554,239,2.088,272,2.033,288,1.518,303,0.878,320,1.886,382,0.675,389,1.572,390,3.078,391,3.071,392,1.354,393,1.067,401,3.391,402,3.391,403,2.322,404,2.82,409,2.619,411,3.391,413,4.333,414,5.234,415,4.035,418,1.179,419,2.619,422,2.646,423,3.391,424,2.646,425,2.944,426,1.103,427,4.762,439,3.576,452,2.439,454,2.619,455,3.602,456,3.602,457,3.602,458,3.602,459,3.602,460,3.602,461,5.121,462,3.602]],["title/classes/CreateShortAnswerDto.html",[15,0.244,463,2.759]],["body/classes/CreateShortAnswerDto.html",[3,0.094,4,0.082,5,0.082,9,0.249,10,0.013,14,0.094,15,0.354,18,0.008,19,0.008,53,0.381,54,1.157,57,1.235,63,0.828,67,0.851,68,0.918,73,0.865,79,1.511,125,1.017,239,1.244,272,1.891,288,1.049,303,0.865,320,2.04,382,0.665,389,1.549,390,3.053,391,3.355,392,1.334,393,1.051,400,3.363,401,3.668,402,2.02,403,2.512,404,3.051,405,4.297,406,4.687,409,2.58,411,3.363,414,4.365,415,2.404,418,1.161,419,2.58,422,3.053,423,2.884,424,2.618,425,1.753,426,1.086,427,2.256,428,2.13,434,2.404,435,2.404,437,2.404,439,2.13,440,2.802,441,2.58,463,3.432,464,4.639,465,5.761,466,4.942,467,2.802,468,3.549,469,3.549,470,3.549,471,3.549,472,3.549,473,3.549,474,2.802,475,2.02]],["title/classes/CreateTagDto.html",[15,0.244,476,2.962]],["body/classes/CreateTagDto.html",[3,0.167,4,0.147,5,0.147,10,0.012,14,0.167,15,0.378,18,0.011,19,0.011,382,1.182,476,5.356,477,5.506,478,4.979]],["title/classes/CreateTrueFalseDto.html",[15,0.244,479,2.759]],["body/classes/CreateTrueFalseDto.html",[3,0.094,4,0.082,5,0.082,9,0.249,10,0.013,14,0.094,15,0.353,18,0.007,19,0.007,53,0.38,54,1.153,57,1.23,63,0.826,67,0.835,68,0.915,73,0.861,79,1.47,125,1.012,239,2.658,272,1.888,288,1.046,303,0.861,320,2.035,382,0.662,389,1.541,390,1.824,391,3.044,392,1.327,393,1.046,400,3.354,401,3.66,402,2.01,403,2.506,404,3.044,405,4.285,406,4.676,411,3.354,413,3.671,414,4.356,415,2.392,418,1.156,422,3.045,423,2.01,424,2.609,425,1.745,426,1.081,427,2.245,428,2.12,434,2.392,435,2.392,437,2.392,439,2.12,440,2.788,441,2.568,475,2.01,479,3.42,480,4.632,481,5.753,482,2.788,483,2.293,484,5.146,485,3.532,486,3.084,487,3.532,488,3.532,489,3.532,490,3.532,491,3.532,492,2.788,493,1.824,494,2.392]],["title/classes/CreateUserDto.html",[15,0.244,495,2.445]],["body/classes/CreateUserDto.html",[3,0.118,4,0.104,5,0.104,9,0.163,10,0.012,14,0.118,15,0.267,18,0.009,19,0.009,53,0.479,54,1.354,63,0.906,67,0.87,68,1.483,79,1.562,97,2.798,100,3.929,258,3.064,326,4,382,0.836,426,1.365,483,2.693,495,3.559,496,5.732,497,3.52,498,5.262,499,4.845,500,5.262,501,4.845,502,4.458,503,4.458,504,4.458,505,4.458,506,4.458,507,4.458,508,4.458,509,2.676,510,4.458]],["title/classes/CredentailRegister.html",[15,0.244,277,2.962]],["body/classes/CredentailRegister.html",[3,0.111,4,0.097,5,0.097,9,0.236,10,0.012,14,0.111,15,0.341,16,2.063,18,0.008,19,0.008,53,0.45,54,1.298,63,0.754,67,0.724,79,1.102,97,2.387,100,3.858,271,4.904,272,1.791,277,4.134,288,0.867,310,3.655,320,1.325,326,4.585,344,4.402,382,0.785,392,1.574,393,1.24,418,1.37,426,1.282,452,2.835,494,5.173,511,4.489,512,3.655,513,4.964,514,5.685,515,4.187,516,3.655,517,4.134,518,4.187,519,3.655,520,3.655,521,3.655,522,3.655,523,6.322,524,6.322,525,4.964,526,3.655,527,4.964,528,3.305,529,3.655,530,3.655,531,4.964,532,3.655,533,3.655,534,3.655,535,3.655,536,4.187,537,4.187]],["title/classes/CredentialLogin.html",[15,0.244,271,2.759]],["body/classes/CredentialLogin.html",[3,0.097,4,0.085,5,0.085,9,0.22,10,0.012,14,0.097,15,0.361,18,0.008,19,0.008,53,0.395,54,1.186,63,0.607,67,0.582,79,1.269,97,2.53,253,3.777,271,3.518,272,1.441,288,1.248,303,0.896,320,1.644,326,4.795,344,4.787,382,0.689,389,1.604,391,2.459,392,1.382,393,1.089,423,2.956,494,5.449,511,4.757,516,3.209,519,3.209,520,4.536,521,4.536,522,4.536,523,6.777,524,6.777,525,5.717,526,5.261,527,5.717,528,5.17,529,3.209,530,3.209,531,5.717,532,3.209,533,4.536,534,3.209,535,4.536,538,2.902,539,3.675,540,3.675,541,4.536,542,5.195,543,5.195,544,3.675,545,3.675,546,5.195,547,3.675]],["title/classes/EntityWithQuestions.html",[15,0.244,548,2.759]],["body/classes/EntityWithQuestions.html",[3,0.083,4,0.072,5,0.072,9,0.248,10,0.013,14,0.122,15,0.329,18,0.007,19,0.007,53,0.335,54,1.054,60,1.056,63,0.906,65,0.785,66,1.527,67,0.87,68,0.995,79,1.314,98,1.739,123,3.502,272,1.523,288,1.404,303,0.76,320,1.92,382,0.585,389,1.362,393,0.924,396,1.689,403,1.216,418,1.021,426,0.955,464,1.983,480,1.983,483,2.494,548,3.125,549,2.463,550,2.871,551,4.109,552,3.857,553,4.794,554,4.794,555,4.794,556,4.794,557,3.134,558,4.411,559,3.719,560,4.75,561,4.614,562,3.34,563,3.12,564,3.643,565,3.12,566,3.12,567,3.12,568,3.12,569,4.116,570,3.12,571,3.12,572,3.491,573,3.12,574,3.491,575,3.12,576,3.12,577,3.12,578,3.12,579,5.236,580,1.612,581,2.113,582,4.877,583,2.113,584,2.463,585,2.113,586,2.463,587,2.113,588,2.463,589,2.113,590,3.125]],["title/classes/ExamEntity.html",[15,0.244,589,2.759]],["body/classes/ExamEntity.html",[3,0.088,4,0.077,5,0.077,9,0.253,10,0.013,14,0.128,15,0.341,18,0.007,19,0.007,53,0.357,54,1.103,60,1.124,63,0.872,65,0.836,66,1.567,67,0.837,68,1.032,79,1.343,98,1.792,123,3.58,272,1.579,288,1.435,303,0.809,320,1.978,382,0.622,389,1.449,393,0.983,396,1.798,403,1.294,418,1.087,426,1.016,464,2.111,480,2.111,483,2.585,548,2.249,549,2.622,550,2.958,551,4.233,552,3.974,553,2.899,554,2.899,555,2.899,556,2.899,557,3.229,558,4.545,559,3.855,560,4.844,562,3.393,564,4.494,569,3.619,572,3.071,574,3.071,579,5.329,580,1.715,581,2.249,582,4.963,583,2.249,584,2.622,585,2.249,586,2.622,587,2.249,588,2.622,589,3.271,590,3.271,591,4.83,592,3.321,593,3.321,594,3.321,595,3.321,596,3.321,597,3.321,598,3.321]],["title/controllers/ExamsController.html",[260,1.85,599,2.962]],["body/controllers/ExamsController.html",[1,1.799,3,0.079,4,0.07,5,0.07,6,1.799,7,1.48,9,0.271,10,0.013,11,0.562,14,0.079,15,0.18,18,0.007,19,0.007,53,0.322,57,1.091,63,0.743,65,1.602,66,1.502,67,0.714,68,1.154,73,1.551,76,2.649,98,1.825,125,1.825,248,1.418,260,1.361,263,1.905,272,1.766,280,1.88,283,3.631,288,1.506,295,3.033,296,2.03,301,4.325,302,1.905,303,0.73,313,2.03,316,2.179,322,1.548,355,3.898,381,4.524,558,4.856,599,3.256,600,2.617,601,2.617,602,3.256,603,2.847,604,2.847,605,3.033,606,2.617,607,2.997,608,2.997,609,2.617,610,4.028,611,2.997,612,4.696,613,2.617,614,5.017,615,3.536,616,2.997,617,2.617,618,3.782,619,2.997,620,2.997,621,2.617,622,4.82,623,2.997,624,2.997,625,2.366,626,4.233,627,2.179,628,3.409,629,2.617,630,2.179,631,4.233,632,2.03,633,2.997,634,2.617,635,1.905,636,2.617,637,2.997,638,2.997,639,2.179,640,2.997,641,2.997,642,2.617,643,2.997,644,2.617,645,2.997,646,2.617,647,2.997,648,2.997,649,2.366,650,2.997,651,2.847,652,2.997]],["title/modules/ExamsModule.html",[20,1.333,130,2.759]],["body/modules/ExamsModule.html",[3,0.13,4,0.114,5,0.114,9,0.279,10,0.013,11,0.921,14,0.13,15,0.294,18,0.009,19,0.009,20,2.068,22,2.144,23,2.758,29,2.991,30,2.325,31,2.325,33,3.122,35,3.265,37,1.608,43,3.265,130,5.451,248,2.991,599,5.08,628,4.966,629,4.289,653,4.289,654,4.289,655,4.289,656,4.688,657,4.913,658,4.913,659,3.879]],["title/injectables/ExamsService.html",[0,0.738,628,2.59]],["body/injectables/ExamsService.html",[0,0.583,2,0.689,3,0.052,4,0.046,5,0.046,9,0.246,10,0.013,11,0.368,14,0.052,15,0.118,18,0.005,19,0.005,36,1.908,37,0.643,53,0.211,57,0.784,60,1.089,63,0.689,65,1.407,66,1.319,67,0.626,68,1.013,73,1.362,85,1.404,88,2.569,98,2.03,101,2.11,125,1.602,159,1.429,239,1.654,252,3.55,265,3.112,272,0.545,275,2.272,280,1.351,281,1.015,288,1.535,322,1.015,327,3.148,333,2.179,381,3.914,404,0.93,425,0.971,426,0.602,483,1.855,493,1.662,509,1.931,548,1.331,550,0.93,551,2.179,552,3.554,558,4.064,562,0.893,589,2.766,601,3.565,602,2.969,603,2.045,604,2.045,605,2.179,606,2.809,610,3.196,617,2.809,621,2.809,622,4.17,627,2.339,628,2.045,630,1.429,631,3.224,632,1.331,634,1.716,635,1.249,651,3,660,1.716,661,4.121,662,1.552,663,2.686,664,4.084,665,1.965,666,1.965,667,1.716,668,1.965,669,2.54,670,1.965,671,3.217,672,1.965,673,1.965,674,1.965,675,1.429,676,1.716,677,1.716,678,1.429,679,1.965,680,1.064,681,1.716,682,1.965,683,4.88,684,1.965,685,1.716,686,3.217,687,1.931,688,1.931,689,2.809,690,3.726,691,1.931,692,2.179,693,1.931,694,1.931,695,2.809,696,1.965,697,1.965,698,2.54,699,1.965,700,3.217,701,1.965,702,1.965,703,1.965,704,1.965,705,1.965,706,4.719,707,4.719,708,1.965,709,1.965,710,1.965,711,1.965,712,3.217,713,1.965,714,1.965,715,1.965,716,1.965,717,1.965,718,3.217,719,3.217,720,3.217,721,3.217,722,4.084,723,3.217,724,4.084,725,1.965,726,1.965,727,1.965,728,1.965,729,1.965]],["title/controllers/GoogleController.html",[260,1.85,366,2.962]],["body/controllers/GoogleController.html",[3,0.084,4,0.074,5,0.074,7,1.572,9,0.265,10,0.013,11,0.596,14,0.084,15,0.191,18,0.007,19,0.007,27,3.333,40,2.155,41,3.404,53,0.342,57,1.141,60,1.077,63,0.649,65,1.398,66,1.31,67,0.622,68,1.007,70,4.487,72,5.006,73,1.353,79,1.076,81,1.723,85,2.673,88,1.698,97,1.965,117,1.91,125,1.342,239,1.64,248,1.506,260,1.445,263,2.023,265,3.103,269,2.023,272,1.541,275,2.043,281,3.983,296,2.155,302,2.023,303,0.775,307,2.418,308,2.512,311,3.333,312,1.811,322,3.164,323,2.313,325,4.087,327,3.372,328,3.696,363,2.976,366,3.404,730,2.778,731,3.182,732,4.681,733,5.554,734,5.554,735,3.182,736,3.182,737,3.182,738,3.182,739,5.96,740,3.182,741,3.182,742,3.182,743,4.087,744,3.182,745,3.182,746,3.182,747,2.512,748,2.313,749,3.182,750,3.182,751,3.182,752,3.182,753,3.182,754,3.182,755,3.182,756,4.681,757,3.182,758,3.182,759,4.681,760,3.182,761,4.681,762,4.681,763,4.681,764,4.681,765,3.182,766,3.182,767,3.182]],["title/injectables/GoogleGaurd.html",[0,0.738,748,2.962]],["body/injectables/GoogleGaurd.html",[0,1.295,2,2.1,3,0.159,4,0.139,5,0.139,9,0.261,10,0.012,11,1.123,12,4.731,13,3.41,14,0.159,15,0.359,16,2.174,18,0.011,19,0.011,748,5.197,768,5.232,769,5.993]],["title/injectables/GoogleService.html",[0,0.738,363,2.59]],["body/injectables/GoogleService.html",[0,0.861,2,1.137,3,0.086,4,0.075,5,0.075,9,0.251,10,0.013,11,0.608,14,0.086,15,0.194,18,0.007,19,0.007,36,2.78,37,1.062,53,0.349,54,1.085,57,1.158,60,1.608,63,0.722,65,1.414,66,1.326,67,0.693,68,1.018,73,1.158,77,1.948,79,1.333,82,2.563,83,3.198,85,1.417,88,2.642,97,2.596,101,2.454,102,2.36,108,2.198,125,1.362,239,1.665,252,2.572,264,3.751,265,2.887,275,2.073,281,3.195,297,2.36,298,2.198,327,2.347,333,2.198,336,2.563,363,3.02,495,3.372,496,2.36,498,3.751,499,4.496,500,4.882,501,4.496,675,2.36,743,4.148,770,2.834,771,4.906,772,4.751,773,4.751,774,4.751,775,4.751,776,3.246,777,4.148,778,4.751,779,3.246,780,5.619,781,3.751,782,3.246,783,2.834,784,2.36,785,4.751,786,3.246,787,3.246,788,3.246,789,3.246,790,3.246,791,3.246,792,3.246,793,2.834,794,3.246,795,3.246,796,4.751,797,4.751,798,4.751,799,3.246,800,3.246,801,3.246,802,3.246,803,3.246,804,3.246]],["title/injectables/GoogleStrategy.html",[0,0.738,364,2.759]],["body/injectables/GoogleStrategy.html",[0,1.06,2,1.529,3,0.116,4,0.101,5,0.101,9,0.269,10,0.013,11,0.818,13,2.483,14,0.116,15,0.261,16,1.583,18,0.009,19,0.009,36,3.056,37,1.428,53,0.469,57,1.425,60,1.477,63,0.683,65,1.471,66,1.379,67,0.655,68,1.06,73,1.063,79,1.465,97,1.832,107,3.327,108,2.955,112,3.445,114,3.445,115,3.173,118,3.445,124,3.445,265,2.768,322,2.254,364,3.959,495,2.619,496,3.173,639,3.173,777,5.105,781,4.616,784,3.173,805,3.81,806,4.364,807,5.847,808,6.593,809,7.043,810,6.593,811,4.364,812,3.81,813,4.364,814,4.364,815,4.364,816,4.364,817,4.364,818,4.364,819,4.364,820,4.364]],["title/injectables/IsGte.html",[0,0.738,821,2.759]],["body/injectables/IsGte.html",[0,0.903,2,1.214,3,0.092,4,0.08,5,0.08,9,0.182,10,0.013,11,0.649,14,0.092,15,0.298,18,0.007,19,0.007,53,0.372,57,1.213,63,0.744,65,1.604,66,1.593,67,0.714,68,1.155,73,1.553,79,0.671,85,3.069,88,2.115,107,2.834,125,2.015,239,1.214,258,1.789,265,2.676,275,1.512,288,1.535,392,1.302,393,2.146,430,4.91,483,2.262,493,1.789,562,3.367,821,3.373,822,3.024,823,4.98,824,4.98,825,4.348,826,4.98,827,6.905,828,3.464,829,4.98,830,3.464,831,4.348,832,6.325,833,3.464,834,5.566,835,4.348,836,3.464,837,4.348,838,4.348,839,3.024,840,5.091,841,4.348,842,3.024,843,3.024,844,4.98,845,3.464,846,4.98,847,3.464,848,3.464,849,3.024]],["title/injectables/IsValidPos.html",[0,0.738,429,2.962]],["body/injectables/IsValidPos.html",[0,1.049,2,1.506,3,0.114,4,0.1,5,0.1,9,0.212,10,0.013,11,0.806,14,0.114,15,0.347,18,0.009,19,0.009,53,0.462,57,1.41,63,0.676,65,1.457,66,1.544,67,0.649,68,1.049,73,1.41,79,0.833,88,2.374,107,3.294,125,1.875,239,1.506,258,2.221,265,2.939,275,1.876,288,1.355,392,1.616,393,1.714,429,4.208,430,4.758,431,5.166,493,2.99,825,5.053,827,3.753,831,5.053,832,6.715,834,6.112,835,5.053,837,5.053,838,5.053,839,3.753,840,5.713,841,5.053,842,3.753,843,3.753,849,3.753,850,3.753,851,4.299,852,4.299,853,4.299,854,4.299,855,4.299,856,4.299]],["title/injectables/LogMiddleware.html",[0,0.738,163,2.962]],["body/injectables/LogMiddleware.html",[0,1.121,2,1.665,3,0.126,4,0.11,5,0.11,9,0.226,10,0.012,11,0.891,14,0.126,15,0.285,18,0.009,19,0.009,53,0.511,57,1.507,63,0.555,65,1.196,66,1.121,67,0.532,68,0.861,70,4.63,72,4.656,73,1.158,74,4.497,81,2.573,117,4.371,163,4.497,283,3.218,675,3.454,739,4.148,747,3.751,857,4.148,858,6.184,859,6.184,860,7.283,861,7.283,862,4.751,863,6.876,864,4.751,865,4.751,866,4.751,867,6.184,868,4.751,869,4.751,870,4.751,871,4.751,872,4.751,873,6.184,874,4.751,875,4.751,876,4.751]],["title/modules/MailModule.html",[20,1.333,360,2.759]],["body/modules/MailModule.html",[3,0.12,4,0.105,5,0.105,9,0.261,10,0.013,11,0.846,14,0.12,15,0.27,18,0.009,19,0.009,20,1.957,22,1.97,23,2.61,29,2.83,30,2.136,31,2.136,33,2.954,34,3.403,35,3.464,36,2.711,37,1.477,43,3.089,45,2.869,46,3.057,175,3.564,239,1.581,242,3.564,264,3.564,281,2.332,360,5.273,877,3.941,878,3.941,879,3.941,880,5.212,881,4.514,882,4.514,883,3.564,884,3.564,885,4.514,886,4.514,887,4.514,888,3.564,889,4.514,890,4.514,891,4.514,892,4.514,893,4.514,894,4.514,895,4.514,896,4.514,897,4.514]],["title/injectables/MailService.html",[0,0.738,880,2.59]],["body/injectables/MailService.html",[0,0.999,2,1.402,3,0.106,4,0.093,5,0.093,9,0.231,10,0.013,11,0.75,14,0.106,15,0.24,18,0.008,19,0.008,36,3.051,37,1.309,53,0.43,54,1.259,57,1.343,60,1.866,63,0.736,65,1.387,66,1.3,67,0.707,68,0.999,73,0.975,79,1.428,85,2.405,88,1.452,97,2.853,125,1.147,252,2.984,280,1.68,288,1.141,297,2.909,298,2.71,333,2.71,880,4.32,883,3.159,884,3.159,898,3.493,899,6.306,900,5.512,901,4.001,902,6.795,903,5.512,904,5.512,905,5.181,906,4.001,907,4.001,908,4.001,909,3.493,910,4.001,911,4.001,912,4.001,913,4.812,914,4.001,915,4.001,916,5.512,917,4.352,918,4.001,919,4.001,920,4.001,921,4.001,922,4.001,923,4.001,924,4.001,925,4.001,926,4.001,927,4.001,928,3.493,929,3.493,930,4.001,931,4.001,932,3.493]],["title/classes/MultipleChoiceEntity.html",[15,0.244,569,2.59]],["body/classes/MultipleChoiceEntity.html",[3,0.116,4,0.101,5,0.101,9,0.214,10,0.012,14,0.116,15,0.261,18,0.009,19,0.009,53,0.469,54,1.335,63,0.901,67,0.9,79,1.465,98,1.89,123,3.02,288,1.458,320,2.086,382,0.818,393,1.292,396,4.248,400,3.752,402,3.752,403,2.569,404,3.12,418,1.428,425,3.257,426,1.336,569,3.717,583,5.314,933,3.81,934,4.364,935,4.364,936,4.364,937,4.364,938,4.364,939,3.752,940,4.364,941,5.105,942,4.364,943,3.173]],["title/classes/MultipleSelectEntity.html",[15,0.244,944,2.962]],["body/classes/MultipleSelectEntity.html",[3,0.116,4,0.101,5,0.101,9,0.214,10,0.012,14,0.116,15,0.261,18,0.009,19,0.009,53,0.469,54,1.335,63,0.901,67,0.9,79,1.465,98,1.89,123,3.02,288,1.458,320,2.086,382,0.818,393,1.292,396,4.248,402,3.752,403,2.569,404,3.12,418,1.428,425,3.257,426,1.336,438,4.251,439,3.957,939,3.752,943,3.173,944,4.251,945,6.195,946,3.81,947,4.364,948,4.364,949,4.364,950,4.364,951,4.364,952,4.364,953,4.364]],["title/controllers/OtpController.html",[260,1.85,367,2.962]],["body/controllers/OtpController.html",[1,2.146,3,0.095,4,0.083,5,0.083,7,1.766,9,0.267,10,0.013,11,0.67,14,0.095,15,0.214,18,0.008,19,0.008,40,2.421,53,0.384,57,1.241,60,1.21,63,0.595,65,1.282,66,1.202,67,0.571,68,0.923,73,1.241,79,1.15,85,2.59,88,1.848,98,1.959,125,1.46,248,1.692,252,1.936,260,1.624,263,2.273,265,2.984,272,1.413,275,2.223,281,1.847,288,1.472,295,2.421,296,2.421,297,2.6,298,2.421,301,4.315,302,2.273,303,0.871,307,2.632,308,2.823,313,2.421,314,3.122,316,2.6,322,3.066,323,2.6,327,3.195,328,2.823,333,2.421,334,3.122,336,2.823,344,3.238,346,4.448,355,3.704,367,3.704,747,2.823,880,3.773,905,5.733,954,3.122,955,3.575,956,4.448,957,4.448,958,3.122,959,3.575,960,3.575,961,3.122,962,3.575,963,3.575,964,3.575,965,3.575,966,3.773,967,3.122,968,3.575,969,3.575,970,3.575,971,3.575,972,3.575,973,3.575,974,3.575,975,3.575,976,3.575,977,3.575,978,3.575,979,3.575]],["title/modules/OtpModule.html",[20,1.333,361,2.759]],["body/modules/OtpModule.html",[3,0.128,4,0.113,5,0.113,9,0.268,10,0.013,11,0.908,14,0.128,15,0.29,18,0.009,19,0.009,20,2.05,22,2.115,23,2.734,29,2.965,30,2.294,31,2.294,33,3.095,34,3.565,35,3.236,37,1.586,43,3.236,132,4.948,160,3.827,161,3.081,162,4.232,361,5.493,966,5.267,967,4.232,980,4.232,981,4.232,982,4.232,983,4.847,984,4.847]],["title/injectables/OtpService.html",[0,0.738,966,2.59]],["body/injectables/OtpService.html",[0,0.948,2,1.301,3,0.098,4,0.086,5,0.086,9,0.241,10,0.013,11,0.696,14,0.098,15,0.222,18,0.008,19,0.008,36,2.909,37,1.215,53,0.399,57,1.275,60,1.771,63,0.768,65,1.656,66,1.552,67,0.737,68,1.192,73,1.476,79,1.394,85,3.026,88,2.198,98,1.5,108,2.515,125,1.885,160,2.932,161,2.361,265,3.021,275,2.283,288,1.49,327,2.993,493,1.918,905,5.231,909,3.242,956,4.568,957,4.568,958,4.568,961,4.568,966,3.326,985,3.242,986,5.232,987,6.059,988,4.182,989,3.713,990,3.713,991,5.232,992,3.713,993,3.713,994,3.804,995,3.242,996,3.713,997,3.713,998,3.713,999,3.713,1000,3.713,1001,6.935,1002,3.713,1003,3.713,1004,3.713,1005,3.713,1006,3.713]],["title/classes/ParamDto.html",[15,0.244,614,2.759]],["body/classes/ParamDto.html",[3,0.148,4,0.13,5,0.13,9,0.25,10,0.012,14,0.148,15,0.41,18,0.01,19,0.01,53,0.599,54,1.563,63,0.651,67,0.625,98,2.122,272,1.547,288,1.417,303,1.359,382,1.045,392,2.096,411,3.895,423,3.895,614,4.635,1007,4.869,1008,5.576,1009,5.576,1010,4.403,1011,4.403]],["title/classes/Payload.html",[15,0.244,83,2.318]],["body/classes/Payload.html",[3,0.145,4,0.127,5,0.127,9,0.2,10,0.012,14,0.145,15,0.328,18,0.01,19,0.01,53,0.588,54,1.545,63,0.857,67,0.823,79,1.311,83,3.849,97,3.082,99,5.338,100,4.147,288,1.4,382,1.025,426,1.675,1012,4.777,1013,5.471,1014,5.471,1015,5.471]],["title/classes/PrismaExceptionFilter.html",[15,0.244,151,2.962]],["body/classes/PrismaExceptionFilter.html",[3,0.114,4,0.1,5,0.1,9,0.239,10,0.013,11,0.803,14,0.114,15,0.257,18,0.009,19,0.009,53,0.461,57,1.407,63,0.5,65,1.079,66,1.011,67,0.48,68,0.777,70,3.672,73,1.044,81,2.321,88,2.37,101,2.984,117,3.467,125,1.873,151,4.751,258,2.984,280,1.799,298,2.903,344,4.154,382,0.803,418,1.403,528,4.561,675,3.116,888,5.158,928,5.705,932,3.742,1016,3.742,1017,6.534,1018,5.776,1019,6.992,1020,6.992,1021,4.286,1022,4.286,1023,4.286,1024,4.286,1025,3.742,1026,4.286,1027,4.286,1028,4.286,1029,4.286,1030,4.286,1031,4.286,1032,4.286,1033,5.705,1034,4.286,1035,5.776,1036,4.286,1037,4.286,1038,4.286,1039,4.286,1040,4.286,1041,4.286,1042,4.286,1043,4.286,1044,4.286,1045,4.286,1046,4.286,1047,4.286,1048,4.286,1049,4.286]],["title/modules/PrismaModule.html",[20,1.333,656,2.445]],["body/modules/PrismaModule.html",[3,0.141,4,0.124,5,0.124,9,0.243,10,0.012,11,0.999,14,0.141,15,0.319,18,0.01,19,0.01,20,2.178,22,2.326,23,2.904,29,3.149,30,2.522,31,2.522,33,3.287,34,3.787,656,4.856,663,4.776,1050,4.653,1051,4.653,1052,4.653,1053,5.33,1054,5.33]],["title/injectables/PrismaService.html",[0,0.738,663,2.318]],["body/injectables/PrismaService.html",[0,1.14,2,1.71,3,0.129,4,0.113,5,0.113,9,0.23,10,0.013,11,0.915,14,0.129,15,0.292,16,2.283,18,0.009,19,0.009,53,0.524,57,1.533,63,0.735,65,1.228,66,1.151,67,0.547,68,0.884,73,1.533,258,2.521,265,3.33,327,3.108,426,1.494,663,3.581,917,3.852,1055,4.26,1056,6.964,1057,6.292,1058,7.797,1059,6.292,1060,7.357,1061,4.88,1062,4.88,1063,4.88,1064,4.88,1065,4.88]],["title/classes/QueryDeleteDto.html",[15,0.244,618,2.59]],["body/classes/QueryDeleteDto.html",[3,0.103,4,0.091,5,0.091,9,0.246,10,0.013,14,0.144,15,0.373,18,0.01,19,0.008,53,0.42,54,1.238,63,0.456,67,0.438,79,0.757,98,1.553,107,2.222,221,3.445,245,2.482,272,1.083,288,1.289,303,0.951,320,2.313,382,0.732,390,3.873,391,2.565,392,1.467,393,1.156,403,1.521,418,2.312,424,3.873,426,1.195,452,2.644,475,3.084,483,2.461,493,3.473,509,2.343,550,1.848,557,2.017,562,3.054,618,3.445,651,3.957,680,2.114,687,3.252,688,2.343,691,2.343,693,3.736,694,2.343,821,2.644,1010,3.082,1011,3.082,1066,3.082,1067,3.67,1068,3.904,1069,3.408,1070,5.434,1071,3.408,1072,3.408,1073,2.644,1074,2.644,1075,3.408,1076,3.408,1077,3.67,1078,3.408,1079,3.408,1080,2.644,1081,4.731,1082,3.67,1083,3.67,1084,3.67,1085,3.67,1086,3.408]],["title/classes/QueryDto.html",[15,0.244,680,2.206]],["body/classes/QueryDto.html",[3,0.083,4,0.073,5,0.073,9,0.222,10,0.013,14,0.123,15,0.33,18,0.009,19,0.007,53,0.337,54,1.057,63,0.793,67,0.761,76,1.548,79,0.897,98,1.743,107,1.783,221,3.865,245,2.943,272,1.883,288,1.406,303,0.763,320,2.432,382,0.587,390,3.628,391,2.191,392,1.178,393,1.801,403,1.804,418,2.359,424,3.628,426,0.959,452,2.122,475,3.46,483,1.423,493,2.391,509,1.881,550,2.191,557,2.391,562,3.083,618,1.992,651,1.992,680,2.506,687,3.893,688,3.304,691,1.881,693,4.215,694,3.304,821,2.122,1010,2.474,1011,2.474,1066,2.474,1067,4.393,1069,2.736,1070,4.806,1071,2.736,1072,2.736,1073,3.135,1074,3.135,1075,2.736,1076,2.736,1077,3.728,1078,2.736,1079,2.736,1080,3.135,1081,4.042,1082,4.117,1083,4.117,1084,4.117,1085,4.117,1086,2.736,1087,3.366,1088,2.278,1089,3.133,1090,2.278,1091,3.133,1092,2.278,1093,3.133,1094,2.278,1095,3.133,1096,2.278,1097,3.133,1098,2.278,1099,3.133]],["title/classes/QueryExamDto.html",[15,0.244,610,2.759]],["body/classes/QueryExamDto.html",[3,0.088,4,0.077,5,0.077,9,0.208,10,0.013,14,0.088,15,0.29,16,1.755,18,0.007,19,0.007,53,0.358,54,1.105,63,0.873,66,1.476,67,0.838,68,1.257,76,1.644,79,1.105,98,1.387,221,3.076,245,2.116,272,2.074,288,1.18,303,0.811,320,2.321,382,0.624,384,2.42,390,3.233,392,1.251,393,1.969,403,1.297,418,2.175,424,3.233,475,2.753,483,2.197,484,4.224,517,5.043,550,1.575,552,3.624,557,1.719,562,2.197,610,3.277,680,4.048,687,3.421,688,2.904,691,3.421,692,3.86,693,3.756,694,2.904,1067,4.238,1073,2.254,1074,2.254,1077,2.254,1080,2.254,1082,3.277,1083,3.277,1084,3.277,1085,3.277,1087,3.518,1088,2.42,1090,2.42,1092,2.42,1094,2.42,1096,2.42,1098,2.42,1100,5.464,1101,4.838,1102,3.328,1103,3.328,1104,3.328,1105,3.328,1106,2.628,1107,2.628,1108,2.628,1109,2.628,1110,2.628,1111,2.628,1112,3.328]],["title/classes/QueryQuestionDto.html",[15,0.244,1113,3.217]],["body/classes/QueryQuestionDto.html",[3,0.088,4,0.078,5,0.078,9,0.209,10,0.013,14,0.088,15,0.29,16,1.758,18,0.007,19,0.007,53,0.359,54,1.107,63,0.873,67,0.838,68,1.135,76,1.648,79,1.106,98,1.389,221,3.081,245,2.121,272,2.075,288,1.378,303,0.813,320,2.322,382,0.625,391,2.701,392,1.254,393,1.971,401,3.248,403,2.593,411,3.248,418,2.177,424,2.949,454,2.426,475,2.758,486,4.231,517,5.047,550,1.579,557,1.723,562,2.201,581,3.282,635,2.121,680,4.05,687,3.426,688,2.909,691,3.426,692,3.865,693,3.76,694,2.909,1067,4.242,1073,2.259,1074,2.259,1077,2.259,1080,2.259,1082,3.282,1083,3.282,1084,3.282,1085,3.282,1087,3.524,1088,2.426,1090,2.426,1092,2.426,1094,2.426,1096,2.426,1098,2.426,1106,2.634,1107,2.634,1108,2.634,1109,2.634,1110,2.634,1111,2.634,1113,3.826,1114,5.469,1115,3.336,1116,3.336,1117,3.336]],["title/classes/QueryUserDto.html",[15,0.244,1118,2.962]],["body/classes/QueryUserDto.html",[3,0.088,4,0.078,5,0.078,9,0.209,10,0.013,14,0.088,15,0.29,16,1.758,18,0.007,19,0.007,53,0.359,54,1.107,63,0.857,67,0.822,68,1.135,76,1.648,79,1.106,97,2.035,98,1.795,221,3.081,245,2.121,272,2.036,288,1.182,303,0.813,320,2.367,382,0.625,390,2.949,391,2.701,392,1.254,393,2.056,403,1.3,418,2.272,424,2.949,475,2.758,499,4.555,501,3.524,517,5.047,550,1.579,557,1.723,562,2.201,635,2.121,680,4.05,687,3.426,688,2.909,691,3.76,692,3.865,693,3.76,694,2.909,1067,4.506,1073,2.259,1074,2.259,1077,2.259,1080,2.259,1082,3.282,1083,3.282,1084,3.282,1085,4.701,1087,3.524,1088,2.426,1090,2.426,1092,2.426,1094,2.426,1096,2.426,1098,2.426,1106,2.634,1107,2.634,1108,2.634,1109,2.634,1110,2.634,1111,2.634,1118,3.524,1119,2.913,1120,3.336,1121,3.336,1122,3.336,1123,3.336,1124,3.336]],["title/classes/QuestionEntity.html",[15,0.244,678,2.962]],["body/classes/QuestionEntity.html",[3,0.067,4,0.059,5,0.059,9,0.247,10,0.013,14,0.067,15,0.237,18,0.006,19,0.006,53,0.273,54,0.902,57,0.963,60,0.861,63,0.902,65,0.64,66,0.6,67,0.892,68,0.461,73,1.332,79,1.214,98,1.874,123,3.236,125,1.566,239,0.891,258,2.041,272,1.642,288,1.297,303,0.62,320,2.069,382,0.477,389,1.11,393,0.753,398,2.372,400,2.758,401,2.758,402,3.368,403,2.765,404,3.094,418,0.832,425,2.394,426,0.778,434,3.701,435,3.701,436,3.12,437,3.701,438,1.849,439,3.28,453,2.22,466,1.722,474,2.008,483,1.795,492,2.008,494,1.722,550,2.294,551,3.282,552,3.081,557,2.503,559,2.676,560,4.008,562,2.845,564,3.826,569,3.081,572,3.081,574,3.081,579,3.973,582,4.242,583,1.722,584,2.008,585,1.722,586,2.008,587,1.722,588,2.008,590,1.722,678,2.873,939,3.11,941,2.22,944,3.524,945,2.008,1125,2.22,1126,5.465,1127,5.465,1128,5.465,1129,5.465,1130,3.952,1131,2.543,1132,2.543,1133,2.543,1134,2.543,1135,2.543,1136,2.543,1137,2.543,1138,2.543,1139,2.543,1140,2.543,1141,2.543,1142,2.543,1143,2.543,1144,2.543,1145,2.543,1146,2.543,1147,2.543,1148,2.543,1149,5.465,1150,2.543,1151,3.952]],["title/controllers/QuestionsController.html",[260,1.85,1152,2.962]],["body/controllers/QuestionsController.html",[3,0.075,4,0.065,5,0.065,9,0.262,10,0.013,11,0.528,14,0.075,15,0.169,18,0.006,19,0.006,53,0.303,57,1.041,63,0.791,65,1.706,66,1.599,67,0.76,68,1.228,73,1.652,76,1.391,98,1.48,125,1.943,239,1.497,248,1.333,260,1.279,263,1.79,272,1.88,283,2.894,295,1.907,302,1.79,303,0.686,322,1.455,395,4.591,397,2.223,398,2.565,400,2.432,422,3.608,428,1.69,463,3.904,465,2.223,466,2.894,479,3.904,481,2.223,493,2.207,603,2.716,604,2.716,605,2.894,612,3.374,613,2.459,614,4.938,615,3.374,618,3.665,625,2.223,626,2.223,627,2.047,632,1.907,635,1.79,636,2.459,639,2.047,644,2.459,646,3.731,649,3.374,651,2.716,698,2.223,1152,3.107,1153,2.459,1154,4.273,1155,4.273,1156,4.273,1157,4.273,1158,2.816,1159,4.273,1160,4.273,1161,2.816,1162,2.816,1163,4.273,1164,2.816,1165,2.816,1166,2.816,1167,2.816,1168,2.816,1169,2.816,1170,2.816,1171,2.816,1172,2.816,1173,2.816,1174,2.816,1175,4.729,1176,2.816,1177,3.283,1178,2.459,1179,2.459,1180,2.459,1181,2.459,1182,2.816,1183,2.816,1184,4.273,1185,2.816,1186,5.765,1187,2.816,1188,2.816,1189,2.816,1190,2.816,1191,2.816,1192,2.816,1193,2.816,1194,2.816,1195,2.816,1196,2.816]],["title/modules/QuestionsModule.html",[20,1.333,131,2.759]],["body/modules/QuestionsModule.html",[3,0.132,4,0.115,5,0.115,9,0.28,10,0.013,11,0.93,14,0.132,15,0.297,18,0.009,19,0.009,20,2.082,22,2.166,23,2.776,29,3.011,30,2.349,31,2.349,33,3.142,35,3.286,37,1.624,43,3.286,131,5.462,248,3.011,656,4.701,659,3.919,1152,5.104,1177,4.979,1178,4.334,1197,4.334,1198,4.963,1199,4.334,1200,4.963,1201,4.963]],["title/injectables/QuestionsService.html",[0,0.738,1177,2.59]],["body/injectables/QuestionsService.html",[0,0.762,2,0.966,3,0.073,4,0.064,5,0.064,9,0.237,10,0.013,11,0.517,14,0.073,15,0.165,18,0.006,19,0.006,36,2.721,37,0.902,53,0.296,57,1.025,60,1.423,63,0.755,65,1.545,66,1.677,67,0.688,68,1.113,73,1.496,76,1.362,85,1.835,88,1.525,98,1.988,101,2.633,125,1.76,159,2.004,239,0.966,252,2.277,265,2.716,272,0.765,275,1.203,280,2.577,288,1.472,322,1.424,327,1.362,393,0.816,401,2.393,404,2.699,418,0.902,422,3.342,428,2.524,483,2.315,493,2.172,509,2.524,551,2.847,552,1.753,562,1.252,581,3.862,603,2.673,604,2.673,605,2.847,630,2.004,632,1.867,651,3.625,661,4.978,662,2.176,663,3.245,669,3.32,676,2.407,677,2.407,681,2.407,683,2.407,685,2.407,690,3.32,698,2.176,1175,4.382,1177,2.673,1202,2.407,1203,2.757,1204,2.757,1205,2.757,1206,2.757,1207,4.205,1208,2.757,1209,3.32,1210,2.757,1211,3.671,1212,2.757,1213,2.757,1214,4.205,1215,4.205,1216,2.757,1217,4.205,1218,2.757,1219,2.757,1220,2.757,1221,2.757,1222,2.757,1223,2.757,1224,2.757,1225,2.757]],["title/modules/RedisCacheModule.html",[20,1.333,132,2.59]],["body/modules/RedisCacheModule.html",[3,0.12,4,0.106,5,0.106,9,0.262,10,0.013,11,0.851,14,0.12,15,0.272,18,0.009,19,0.009,20,1.965,22,1.982,23,2.62,29,2.842,30,2.15,31,2.15,33,2.966,34,3.417,35,3.102,36,2.893,37,1.486,43,3.102,45,2.888,46,3.076,132,4.957,148,5.242,150,3.076,161,2.888,175,3.586,243,3.586,249,3.586,250,3.586,326,2.726,888,3.586,988,5.217,995,3.966,1226,3.966,1227,3.966,1228,3.966,1229,3.586,1230,4.542,1231,6.004,1232,4.542,1233,4.542,1234,4.542,1235,4.542,1236,4.542,1237,4.542,1238,4.542]],["title/injectables/RedisCacheService.html",[0,0.738,988,2.59]],["body/injectables/RedisCacheService.html",[0,1.041,2,1.488,3,0.113,4,0.099,5,0.099,9,0.21,10,0.012,11,0.796,14,0.113,15,0.255,18,0.009,19,0.009,45,2.701,53,0.457,57,1.399,60,1.944,63,0.759,65,1.637,66,1.534,67,0.729,68,1.179,73,1.399,79,1.486,85,1.854,88,1.541,101,2.966,125,1.646,161,4.429,243,5.5,265,3.149,275,2.506,288,1.347,327,2.836,393,2.063,988,3.65,1229,5.5,1239,3.709,1240,5.742,1241,4.248,1242,6.695,1243,4.248,1244,5.742,1245,4.248,1246,5.742,1247,5.742,1248,4.248,1249,4.248,1250,4.248,1251,3.709,1252,4.248,1253,4.248,1254,4.248]],["title/injectables/RefreshTokenGuard.html",[0,0.738,315,2.962]],["body/injectables/RefreshTokenGuard.html",[0,1.283,2,2.065,3,0.156,4,0.137,5,0.137,8,4.654,9,0.259,10,0.012,11,1.105,12,4.654,13,3.355,14,0.156,15,0.353,16,2.139,17,5.147,18,0.01,19,0.01,269,3.748,312,3.355,315,5.146,1255,3.992]],["title/modules/RefreshTokenModule.html",[20,1.333,362,2.759]],["body/modules/RefreshTokenModule.html",[3,0.117,4,0.103,5,0.103,9,0.27,10,0.013,11,0.83,14,0.117,15,0.265,18,0.009,19,0.009,20,1.933,22,1.934,23,2.578,29,2.795,30,2.097,31,2.097,32,3.868,33,2.918,34,3.361,35,3.432,36,2.865,37,1.45,38,3.868,39,2.817,41,3.221,42,3.868,43,3.051,44,3.868,45,2.817,46,3.001,47,3.868,49,3.868,50,3.868,269,3.755,311,4.907,312,2.521,362,5.398,1255,3.001,1256,3.868,1257,3.868,1258,3.868,1259,5.141,1260,3.868,1261,3.868]],["title/injectables/RefreshTokenService.html",[0,0.738,311,2.445]],["body/injectables/RefreshTokenService.html",[0,0.909,2,1.225,3,0.093,4,0.081,5,0.081,9,0.258,10,0.013,11,0.656,14,0.093,15,0.21,18,0.007,19,0.007,36,2.938,37,1.145,39,2.223,52,2.761,53,0.376,54,1.145,55,4.262,56,6.159,57,1.222,58,4.378,59,4.378,60,1.698,61,3.054,62,5.57,63,0.791,64,4.378,65,1.475,66,1.383,67,0.76,68,1.062,69,4.378,70,4.619,71,3.054,72,3.396,73,1.222,74,3.646,75,4.378,76,1.728,77,3.843,78,3.054,79,0.972,80,3.054,81,1.894,82,2.761,83,2.854,84,2.543,85,1.526,86,4.378,88,2.459,89,4.378,90,3.054,91,4.378,92,3.054,93,4.378,94,5.118,95,3.054,97,2.105,98,1.002,99,3.646,100,2.59,101,1.807,102,3.646,103,3.054,104,3.054,105,3.054,311,3.01,312,4.015,1255,4.777,1261,3.054,1262,3.054,1263,3.498]],["title/injectables/RefreshTokenStrategy.html",[0,0.738,1259,2.759]],["body/injectables/RefreshTokenStrategy.html",[0,1.049,2,1.506,3,0.114,4,0.1,5,0.1,9,0.275,10,0.013,11,0.806,13,2.446,14,0.114,15,0.258,16,1.56,18,0.009,19,0.009,36,2.954,37,1.407,53,0.462,55,3.126,57,1.41,60,1.455,63,0.676,65,1.457,66,1.365,67,0.649,68,1.049,73,1.047,81,2.328,83,4.377,84,3.126,88,2.374,106,3.394,107,3.294,108,3.92,109,3.753,110,5.053,112,3.394,113,3.753,114,3.394,115,3.126,116,4.208,117,3.927,118,3.394,119,5.053,120,5.053,121,3.753,122,3.753,123,2.221,124,3.394,125,1.232,269,2.733,312,3.724,1255,4.431,1259,3.92,1260,3.753,1262,3.753,1264,4.299]],["title/guards/RoleGaurd.html",[1265,3.217,1266,2.962]],["body/guards/RoleGaurd.html",[0,1.043,3,0.113,4,0.099,5,0.099,9,0.255,10,0.013,11,0.799,14,0.113,15,0.255,18,0.009,19,0.009,53,0.458,57,1.402,60,1.948,63,0.672,65,1.448,66,1.357,67,0.645,68,1.043,73,1.038,85,2.511,88,2.363,100,2.201,101,2.201,125,1.867,150,2.886,239,1.493,258,2.201,265,2.735,275,1.859,281,2.972,307,3.603,323,4.736,327,2.105,343,3.72,426,1.304,493,2.201,1266,4.183,1267,4.261,1268,3.72,1269,6.975,1270,4.261,1271,7.507,1272,4.261,1273,5.753,1274,6.09,1275,4.261,1276,4.261,1277,4.261,1278,6.975,1279,4.261,1280,4.261,1281,4.261,1282,4.261,1283,4.261,1284,4.261]],["title/classes/ShortAnswerEntity.html",[15,0.244,572,2.59]],["body/classes/ShortAnswerEntity.html",[3,0.12,4,0.105,5,0.105,9,0.219,10,0.012,14,0.12,15,0.271,18,0.009,19,0.009,53,0.487,54,1.368,63,0.892,67,0.897,79,1.48,98,1.925,123,3.095,288,1.241,320,2.125,382,0.849,393,1.341,400,3.822,403,2.617,404,3.178,418,1.482,425,3.318,426,1.386,464,4.953,474,4.731,572,3.809,585,5.277,939,3.822,943,3.292,1285,3.953,1286,4.528,1287,4.528,1288,4.528,1289,4.528,1290,4.528,1291,4.528]],["title/classes/TagEntity.html",[15,0.244,939,2.318]],["body/classes/TagEntity.html",[3,0.127,4,0.111,5,0.111,9,0.228,10,0.012,14,0.127,15,0.373,18,0.009,19,0.009,53,0.516,54,1.421,60,1.625,63,0.884,65,1.208,66,1.725,67,0.849,68,0.87,79,1.206,98,1.98,258,3.215,288,1.289,382,0.899,389,2.094,426,1.469,550,3.27,557,3.569,559,4.215,560,5.13,562,3.32,581,4.679,582,3.25,590,3.25,939,3.542,1292,4.19,1293,6.224,1294,4.799,1295,4.799,1296,4.799]],["title/classes/TrueFalseEntity.html",[15,0.244,574,2.59]],["body/classes/TrueFalseEntity.html",[3,0.12,4,0.105,5,0.105,9,0.219,10,0.012,14,0.12,15,0.27,18,0.009,19,0.009,53,0.485,54,1.366,63,0.891,67,0.897,79,1.384,98,1.922,123,3.089,288,1.238,320,2.122,382,0.846,393,1.337,400,3.816,403,2.613,404,3.174,418,1.477,425,3.312,426,1.382,480,4.95,483,2.716,492,4.721,574,3.801,587,5.273,939,3.816,943,3.282,1297,3.941,1298,4.514,1299,4.514,1300,4.514,1301,4.514,1302,4.514,1303,4.514]],["title/classes/UpdateAuthDto.html",[15,0.244,1304,3.217]],["body/classes/UpdateAuthDto.html",[3,0.167,4,0.147,5,0.147,10,0.012,14,0.167,15,0.378,18,0.011,19,0.011,382,1.182,538,4.979,1304,5.816,1305,5.506]],["title/classes/UpdateExamDto.html",[15,0.244,622,2.759]],["body/classes/UpdateExamDto.html",[3,0.158,4,0.139,5,0.139,9,0.261,10,0.012,14,0.158,15,0.358,16,2.165,18,0.011,19,0.011,280,2.506,303,1.454,381,3.794,382,1.119,384,4.339,580,3.083,622,4.829,631,4.712,1306,5.211,1307,5.968]],["title/classes/UpdateMultipleChoiceDto.html",[15,0.244,1308,3.217]],["body/classes/UpdateMultipleChoiceDto.html",[3,0.156,4,0.137,5,0.137,9,0.259,10,0.012,14,0.156,15,0.353,16,2.139,18,0.01,19,0.01,280,2.475,303,1.436,382,1.105,395,3.992,396,3.192,398,4.248,399,4.654,580,3.045,1179,5.147,1308,5.588,1309,5.147,1310,5.895]],["title/classes/UpdateMultipleSelectDto.html",[15,0.244,1311,3.217]],["body/classes/UpdateMultipleSelectDto.html",[3,0.156,4,0.137,5,0.137,9,0.259,10,0.012,14,0.156,15,0.353,16,2.139,18,0.01,19,0.01,280,2.475,303,1.436,382,1.105,396,3.192,398,4.248,442,4.286,444,4.654,580,3.045,1311,5.588,1312,5.147,1313,5.895,1314,5.895]],["title/classes/UpdateQuestionDto.html",[15,0.244,1175,2.759]],["body/classes/UpdateQuestionDto.html",[3,0.158,4,0.139,5,0.139,9,0.261,10,0.012,14,0.158,15,0.358,16,2.165,18,0.011,19,0.011,280,2.506,303,1.454,382,1.119,422,3.083,428,3.582,454,4.339,580,3.083,1175,4.829,1315,5.211,1316,5.968]],["title/classes/UpdateShortAnswerDto.html",[15,0.244,1317,3.217]],["body/classes/UpdateShortAnswerDto.html",[3,0.156,4,0.137,5,0.137,9,0.259,10,0.012,14,0.156,15,0.353,16,2.139,18,0.01,19,0.01,280,2.475,303,1.436,382,1.105,463,3.992,464,3.748,466,4.794,467,4.654,580,3.045,1181,5.147,1317,5.588,1318,5.147,1319,5.895]],["title/classes/UpdateTagDto.html",[15,0.244,1320,3.217]],["body/classes/UpdateTagDto.html",[3,0.158,4,0.139,5,0.139,9,0.261,10,0.012,14,0.158,15,0.358,16,2.165,18,0.011,19,0.011,280,2.506,303,1.454,382,1.119,476,4.339,478,4.712,580,3.083,1320,5.63,1321,5.211,1322,5.968,1323,5.968]],["title/classes/UpdateTrueFalseDto.html",[15,0.244,1324,3.217]],["body/classes/UpdateTrueFalseDto.html",[3,0.156,4,0.137,5,0.137,9,0.259,10,0.012,14,0.156,15,0.353,16,2.139,18,0.01,19,0.01,239,2.48,280,2.475,303,1.436,382,1.105,479,3.992,480,3.748,482,4.654,580,3.045,1180,5.147,1324,5.588,1325,5.147,1326,5.895]],["title/classes/UpdateUserDto.html",[15,0.244,1327,2.962]],["body/classes/UpdateUserDto.html",[3,0.158,4,0.139,5,0.139,9,0.261,10,0.012,14,0.158,15,0.358,16,2.165,18,0.011,19,0.011,280,2.506,303,1.454,382,1.119,495,3.582,497,4.712,580,3.083,784,4.339,1327,5.184,1328,5.211,1329,5.968]],["title/classes/UserEntity.html",[15,0.244,77,2.445]],["body/classes/UserEntity.html",[3,0.088,4,0.077,5,0.077,9,0.228,10,0.013,14,0.088,15,0.288,18,0.007,19,0.007,53,0.355,54,1.099,57,1.173,60,1.119,63,0.907,65,1.212,66,1.136,67,0.871,68,0.872,73,0.805,76,1.633,77,2.889,79,1.52,97,2.384,98,1.627,100,3.781,123,3.781,125,0.947,258,2.487,265,2.384,272,1.73,275,1.443,281,2.933,288,0.997,303,0.805,326,3.744,382,0.62,389,1.443,418,1.575,423,2.74,426,1.012,483,2.186,498,4.483,499,4.128,500,4.483,501,4.128,513,2.886,550,2.687,557,2.933,559,3.26,560,4.49,562,2.833,579,4.535,582,4.224,590,2.239,994,2.403,1330,2.886,1331,4.814,1332,4.814,1333,5.678,1334,3.305,1335,3.305,1336,3.305,1337,3.305,1338,3.305,1339,3.305,1340,3.305,1341,3.305,1342,3.305,1343,3.305,1344,4.814,1345,3.305,1346,3.305,1347,3.305,1348,3.305,1349,3.305]],["title/controllers/UsersController.html",[260,1.85,1350,2.962]],["body/controllers/UsersController.html",[1,2.362,3,0.104,4,0.091,5,0.091,6,2.362,7,1.944,9,0.275,10,0.013,11,0.738,14,0.104,15,0.236,18,0.008,19,0.008,53,0.423,57,1.328,63,0.73,65,1.573,66,1.475,67,0.701,68,1.133,73,1.523,98,2.03,100,2.033,125,1.792,248,1.863,260,1.787,263,2.502,272,1.734,283,2.665,288,1.518,295,2.665,296,2.665,301,3.962,302,2.502,303,0.959,307,3.229,316,2.862,322,2.033,355,2.862,426,1.205,602,3.962,603,3.464,604,3.464,609,3.436,612,4.935,615,4.303,625,3.107,626,3.107,627,2.862,635,2.502,639,2.862,642,3.436,649,4.303,669,3.107,680,3.653,1209,3.107,1350,3.962,1351,3.436,1352,3.436,1353,3.936,1354,3.936,1355,3.936,1356,3.436,1357,3.107,1358,3.936,1359,3.936,1360,3.936,1361,3.936,1362,3.936,1363,3.936,1364,3.936,1365,3.936,1366,3.936]],["title/modules/UsersModule.html",[20,1.333,133,2.59]],["body/modules/UsersModule.html",[3,0.12,4,0.105,5,0.105,9,0.285,10,0.013,11,0.849,14,0.12,15,0.271,18,0.009,19,0.009,20,1.961,22,1.976,23,2.615,29,2.836,30,2.143,31,2.143,33,2.96,34,3.41,35,3.095,37,1.482,43,3.095,133,5.089,147,5.232,150,3.066,248,2.836,249,3.575,250,3.575,307,4.237,656,4.585,659,3.575,1266,4.357,1350,4.883,1356,3.953,1367,3.953,1368,4.528,1369,3.953,1370,3.953,1371,4.528,1372,4.528,1373,4.528]],["title/injectables/UsersService.html",[0,0.738,307,2.105]],["body/injectables/UsersService.html",[0,0.746,2,0.939,3,0.071,4,0.062,5,0.062,9,0.251,10,0.013,11,0.502,14,0.071,15,0.161,18,0.006,19,0.006,36,2.272,37,0.877,53,0.288,57,1.003,60,1.393,63,0.778,65,1.677,66,1.572,67,0.79,68,1.207,73,1.559,77,1.608,79,1.089,85,2.645,88,2.417,97,1.125,98,1.737,101,3.305,125,1.737,242,3.954,252,3.042,265,3.223,275,2.452,280,1.728,281,2.903,288,1.38,307,2.126,322,2.126,326,1.608,327,3.161,495,3.372,509,2.47,550,1.268,602,3.642,603,2.616,604,2.616,605,2.787,630,1.949,632,1.815,662,2.116,663,3.198,667,2.34,687,2.47,688,2.47,689,3.593,690,3.249,691,2.47,692,2.787,693,2.47,694,2.47,695,3.593,784,2.992,994,2.992,1118,4.085,1209,3.249,1211,3.593,1327,4.085,1352,2.34,1374,2.34,1375,4.115,1376,2.68,1377,4.115,1378,2.68,1379,2.68,1380,4.115,1381,4.115,1382,2.68,1383,4.115,1384,2.68,1385,2.68,1386,2.68,1387,2.68,1388,2.68,1389,2.68,1390,2.68,1391,2.68,1392,2.68,1393,2.68,1394,2.68,1395,5.619,1396,2.68,1397,2.68,1398,2.68,1399,2.68,1400,2.68]],["title/classes/ValidationErrorDto.html",[15,0.244,304,2.962]],["body/classes/ValidationErrorDto.html",[3,0.146,4,0.128,5,0.128,10,0.012,14,0.146,15,0.329,18,0.01,19,0.01,53,0.59,54,1.548,63,0.859,67,0.824,79,1.488,288,1.404,304,4.929,305,6.063,344,4.675,382,1.029,929,6.421,1033,6.421,1401,4.795,1402,5.492,1403,5.492,1404,5.492]],["title/classes/VerifyEmailDto.html",[15,0.244,1405,3.217]],["body/classes/VerifyEmailDto.html",[3,0.147,4,0.129,5,0.129,9,0.249,10,0.012,14,0.147,15,0.442,18,0.01,19,0.01,53,0.595,54,1.555,63,0.646,67,0.62,79,1.32,253,4.023,272,1.535,382,1.037,389,2.415,391,3.492,392,2.08,411,3.149,541,4.831,905,5.365,1405,5.378,1406,5.947,1407,4.831,1408,5.534]],["title/coverage.html",[1409,4.406]],["body/coverage.html",[0,1.371,1,1.251,5,0.048,6,2.552,7,2.1,8,2.664,10,0.013,15,0.489,18,0.005,19,0.005,27,1.251,28,1.412,52,2.664,67,0.234,77,1.251,83,1.186,106,2.664,151,1.516,161,1.325,163,1.516,239,1.182,252,1.129,260,2.609,261,1.516,262,1.82,271,1.412,277,1.516,304,1.516,305,1.646,307,1.077,311,1.251,312,2.42,313,1.412,315,1.516,363,1.325,364,1.412,366,1.516,367,1.516,381,1.325,383,1.82,384,3.091,395,1.412,396,3.111,397,1.646,398,2.933,399,2.664,422,1.077,427,1.325,429,1.516,430,2.454,431,1.646,442,1.516,443,1.82,444,2.664,454,3.091,463,1.412,464,2.703,465,1.646,466,2.285,467,2.664,475,4.807,476,1.516,477,1.82,478,2.664,479,1.412,480,2.703,481,1.646,482,2.664,495,1.251,496,1.516,497,2.664,511,2.664,512,1.82,538,2.664,548,1.412,549,2.664,569,1.325,572,1.325,574,1.325,583,1.412,585,1.412,587,1.412,589,1.412,599,1.516,600,1.82,610,1.412,614,1.412,618,1.325,622,1.412,628,1.325,660,1.82,663,1.186,678,1.516,680,1.129,730,1.82,748,1.516,768,1.82,770,1.82,805,1.82,821,1.412,822,1.82,850,1.82,857,1.82,880,1.325,898,1.82,933,1.82,939,1.186,944,1.516,945,1.646,946,1.82,954,1.82,966,1.325,985,1.82,988,1.325,1007,1.82,1012,1.82,1016,1.82,1055,1.82,1066,2.664,1100,1.82,1113,1.646,1114,1.82,1118,1.516,1119,1.82,1125,1.82,1152,1.516,1153,1.82,1175,1.412,1177,1.325,1202,1.82,1229,1.646,1239,1.82,1255,2.88,1259,1.412,1265,1.646,1266,1.516,1268,1.82,1285,1.82,1292,1.82,1297,1.82,1304,1.646,1305,1.82,1306,1.82,1308,1.646,1309,1.82,1311,1.646,1312,1.82,1315,1.82,1317,1.646,1318,1.82,1320,1.646,1321,1.82,1324,1.646,1325,1.82,1327,1.516,1328,1.82,1330,1.82,1350,1.516,1351,1.82,1357,1.646,1374,1.82,1401,1.82,1405,1.646,1406,1.82,1407,1.82,1409,1.646,1410,2.085,1411,2.085,1412,2.085,1413,7.361,1414,5.368,1415,6.507,1416,1.82,1417,3.375,1418,6.049,1419,5.368,1420,4.252,1421,4.252,1422,2.085,1423,6.507,1424,1.82,1425,2.085,1426,1.82,1427,2.085,1428,5.745,1429,1.82,1430,2.085,1431,2.085,1432,2.085,1433,2.085]],["title/dependencies.html",[23,2.141,1434,2.962]],["body/dependencies.html",[10,0.013,11,0.836,13,2.537,15,0.355,18,0.009,19,0.009,23,1.945,37,1.459,39,2.834,81,2.414,115,5.165,116,3.241,145,3.892,150,3.019,155,3.892,159,3.241,303,1.086,389,1.945,392,1.676,426,1.365,509,2.676,771,3.892,781,3.52,783,3.892,812,3.892,883,3.52,884,3.52,994,3.241,1242,3.892,1251,3.892,1435,4.458,1436,7.104,1437,4.458,1438,4.458,1439,4.458,1440,4.458,1441,4.458,1442,4.458,1443,4.458,1444,4.458,1445,4.458,1446,4.458,1447,4.458,1448,4.458,1449,4.458,1450,4.458,1451,4.458,1452,4.458,1453,4.458,1454,4.458,1455,4.458,1456,4.458,1457,4.458,1458,4.458,1459,4.458,1460,4.458,1461,4.458,1462,4.458,1463,4.458,1464,4.458,1465,4.458,1466,4.458,1467,4.458,1468,4.458,1469,4.458,1470,4.458,1471,4.458,1472,4.458,1473,4.458,1474,4.458,1475,4.458,1476,4.458]],["title/miscellaneous/functions.html",[1477,2.466,1478,4.283]],["body/miscellaneous/functions.html",[10,0.011,18,0.011,19,0.011,53,0.687,1424,5.579,1426,6.851,1477,4.646,1478,5.579,1479,6.39]],["title/index.html",[53,0.365,1480,3.392,1481,3.392]],["body/index.html",[4,0.108,10,0.012,18,0.009,19,0.009,171,4.068,172,5.331,320,1.474,913,4.068,917,3.679,1409,3.679,1482,4.659,1483,4.659,1484,6.106,1485,4.659,1486,4.659,1487,4.659,1488,4.659,1489,4.659,1490,4.659,1491,6.811,1492,4.659,1493,4.659,1494,4.659,1495,4.659,1496,7.846,1497,4.659,1498,4.659,1499,7.7,1500,4.659,1501,4.659,1502,6.106,1503,4.659,1504,4.659,1505,4.659,1506,6.106,1507,4.659,1508,4.659,1509,4.659,1510,6.106,1511,6.106,1512,4.659,1513,4.659,1514,4.659,1515,4.659,1516,4.659,1517,4.068,1518,4.659,1519,4.659,1520,4.659,1521,4.659,1522,4.659,1523,4.659,1524,4.659,1525,4.659,1526,4.659,1527,4.068,1528,4.659,1529,4.659,1530,4.659,1531,4.659,1532,4.659,1533,4.659,1534,4.068]],["title/modules.html",[22,2.435]],["body/modules.html",[10,0.01,18,0.01,19,0.01,21,3.57,22,2.3,126,3.833,129,3.57,130,3.57,131,3.57,132,3.351,133,3.351,360,3.57,361,3.57,362,3.57,656,3.164,1517,7.282,1535,8.34,1536,8.34,1537,8.34]],["title/overview.html",[1538,4.873]],["body/overview.html",[2,1.091,10,0.012,18,0.007,19,0.007,21,4.874,22,1.359,23,2.01,24,2.718,25,2.718,26,2.718,27,4.207,28,3.714,29,2.18,30,1.473,31,1.473,126,5.581,127,2.718,128,2.718,129,5.41,130,4.747,131,4.747,132,4.456,133,4.672,248,1.473,307,3.621,311,4.207,357,2.718,358,2.718,359,2.718,360,4.587,361,4.874,362,4.874,363,3.486,364,3.714,382,0.584,494,2.108,628,3.486,653,2.718,654,2.718,655,2.718,656,4.319,663,3.989,877,2.718,878,2.718,879,2.718,880,4.456,966,4.456,980,2.718,981,2.718,982,2.718,988,4.456,1050,2.718,1051,2.718,1052,2.718,1177,3.486,1197,2.718,1199,2.718,1226,2.718,1227,2.718,1228,2.718,1256,2.718,1257,2.718,1258,2.718,1259,3.714,1265,2.458,1367,2.718,1369,2.718,1370,2.718,1538,2.718,1539,3.113,1540,3.113,1541,3.113,1542,3.113]],["title/properties.html",[54,1.12,1434,2.962]],["body/properties.html",[10,0.012,18,0.011,19,0.011,54,1.44,320,1.996,793,5.506,1527,5.506,1534,5.506,1543,6.307,1544,6.307]],["title/miscellaneous/variables.html",[1477,2.466,1545,4.283]],["body/miscellaneous/variables.html",[10,0.012,18,0.01,19,0.01,53,0.609,88,2.055,100,3.851,117,3.399,125,1.623,275,2.472,313,4.679,393,2.046,418,2.261,1025,4.945,1274,4.945,1357,5.455,1416,4.945,1429,4.945,1477,4.118,1545,4.945,1546,5.664,1547,5.664,1548,5.664,1549,5.664,1550,5.664,1551,5.664,1552,5.664]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"injectables/QuestionsService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":475,"title":{},"body":{"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1543,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1472,"title":{},"body":{"dependencies.html":{}}}],["0.10.0",{"_index":1469,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1450,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1449,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1462,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1413,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1421,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1431,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1422,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1427,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1419,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1415,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1418,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1420,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1414,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1428,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1423,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1430,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1083,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["01t11:59:59.999z",{"_index":1084,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["1",{"_index":494,"title":{},"body":{"classes/CreateTrueFalseDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/QuestionEntity.html":{},"overview.html":{}}}],["1.0.0",{"_index":1466,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1453,"title":{},"body":{"dependencies.html":{}}}],["1.8.1",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["11",{"_index":1539,"title":{},"body":{"overview.html":{}}}],["110.0.0",{"_index":1454,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["17.7.0",{"_index":1457,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":1541,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":1463,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1440,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["2021",{"_index":1082,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["24",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["3.0.0",{"_index":1443,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1474,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":1445,"title":{},"body":{"dependencies.html":{}}}],["38",{"_index":1542,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":1464,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":1456,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1446,"title":{},"body":{"dependencies.html":{}}}],["465",{"_index":890,"title":{},"body":{"modules/MailModule.html":{}}}],["5.1.0",{"_index":1447,"title":{},"body":{"dependencies.html":{}}}],["5.1.4",{"_index":1448,"title":{},"body":{"dependencies.html":{}}}],["5.3.1",{"_index":1461,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1540,"title":{},"body":{"overview.html":{}}}],["6.1.4",{"_index":1444,"title":{},"body":{"dependencies.html":{}}}],["6.9.0",{"_index":1459,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["7",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["7.2.0",{"_index":1476,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":520,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["9",{"_index":535,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["9.0.0",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["900000).tostring",{"_index":1000,"title":{},"body":{"injectables/OtpService.html":{}}}],["_",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_date",{"_index":823,"title":{},"body":{"injectables/IsGte.html":{}}}],["_date(value",{"_index":826,"title":{},"body":{"injectables/IsGte.html":{}}}],["_number",{"_index":824,"title":{},"body":{"injectables/IsGte.html":{}}}],["_number(value",{"_index":829,"title":{},"body":{"injectables/IsGte.html":{}}}],["abortearly",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["access",{"_index":40,"title":{},"body":{"modules/AccessTokenModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{}}}],["access_token",{"_index":790,"title":{},"body":{"injectables/GoogleService.html":{}}}],["access_token_cookie_name",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["access_token_expiration_time",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["access_token_secret",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["accesstoken",{"_index":777,"title":{},"body":{"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"controllers/OtpController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["accesstokenmodule",{"_index":21,"title":{"modules/AccessTokenModule.html":{}},"body":{"modules/AccessTokenModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["accesstokenservice",{"_index":27,"title":{"injectables/AccessTokenService.html":{}},"body":{"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"controllers/AuthController.html":{},"controllers/GoogleController.html":{},"coverage.html":{},"overview.html":{}}}],["accesstokenstrategy",{"_index":28,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"modules/AccessTokenModule.html":{},"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["account",{"_index":926,"title":{},"body":{"injectables/MailService.html":{}}}],["allowunknown",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["already",{"_index":1036,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["amazing",{"_index":1518,"title":{},"body":{"index.html":{}}}],["answer",{"_index":400,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/MultipleChoiceEntity.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"classes/ShortAnswerEntity.html":{},"classes/TrueFalseEntity.html":{}}}],["answer.dto",{"_index":1181,"title":{},"body":{"controllers/QuestionsController.html":{},"classes/UpdateShortAnswerDto.html":{}}}],["answer.dto.ts",{"_index":467,"title":{},"body":{"classes/CreateShortAnswerDto.html":{},"classes/UpdateShortAnswerDto.html":{},"coverage.html":{}}}],["answer.dto.ts:14",{"_index":469,"title":{},"body":{"classes/CreateShortAnswerDto.html":{}}}],["answer.dto.ts:17",{"_index":468,"title":{},"body":{"classes/CreateShortAnswerDto.html":{}}}],["answer.dto.ts:20",{"_index":470,"title":{},"body":{"classes/CreateShortAnswerDto.html":{}}}],["answer.dto.ts:26",{"_index":472,"title":{},"body":{"classes/CreateShortAnswerDto.html":{}}}],["answer.dto.ts:28",{"_index":473,"title":{},"body":{"classes/CreateShortAnswerDto.html":{}}}],["answer.dto.ts:9",{"_index":471,"title":{},"body":{"classes/CreateShortAnswerDto.html":{}}}],["answer.entity",{"_index":586,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{}}}],["answer.entity.ts",{"_index":1285,"title":{},"body":{"classes/ShortAnswerEntity.html":{},"coverage.html":{}}}],["answer.entity.ts:10",{"_index":1290,"title":{},"body":{"classes/ShortAnswerEntity.html":{}}}],["answer.entity.ts:5",{"_index":1288,"title":{},"body":{"classes/ShortAnswerEntity.html":{}}}],["answer.entity.ts:6",{"_index":1289,"title":{},"body":{"classes/ShortAnswerEntity.html":{}}}],["answer.entity.ts:7",{"_index":1291,"title":{},"body":{"classes/ShortAnswerEntity.html":{}}}],["answer.entity.ts:8",{"_index":1287,"title":{},"body":{"classes/ShortAnswerEntity.html":{}}}],["answer.entity.ts:9",{"_index":1286,"title":{},"body":{"classes/ShortAnswerEntity.html":{}}}],["answer/dto/create",{"_index":465,"title":{},"body":{"classes/CreateShortAnswerDto.html":{},"controllers/QuestionsController.html":{},"coverage.html":{}}}],["answer/dto/update",{"_index":1318,"title":{},"body":{"classes/UpdateShortAnswerDto.html":{},"coverage.html":{}}}],["answer/entities/short",{"_index":585,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{},"classes/ShortAnswerEntity.html":{},"coverage.html":{}}}],["answers",{"_index":439,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/MultipleSelectEntity.html":{},"classes/QuestionEntity.html":{}}}],["any)[relatedpropertyname",{"_index":843,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["apibadrequestresponse",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiconflictresponse",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["apicookieauth",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"controllers/OtpController.html":{},"controllers/UsersController.html":{}}}],["apihideproperty",{"_index":579,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{},"classes/UserEntity.html":{}}}],["apihideproperty()@exclude",{"_index":1333,"title":{},"body":{"classes/UserEntity.html":{}}}],["apiproperty",{"_index":423,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CredentialLogin.html":{},"classes/ParamDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty()@isnumber()@min(1",{"_index":1008,"title":{},"body":{"classes/ParamDto.html":{}}}],["apiproperty({enum",{"_index":1342,"title":{},"body":{"classes/UserEntity.html":{}}}],["apiproperty({minlength",{"_index":519,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["apiproperty({type",{"_index":413,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateTrueFalseDto.html":{}}}],["apipropertyoptional",{"_index":424,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["apipropertyoptional()@isoptional",{"_index":1101,"title":{},"body":{"classes/QueryExamDto.html":{}}}],["apipropertyoptional()@isoptional()@isboolean",{"_index":1104,"title":{},"body":{"classes/QueryExamDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":409,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{}}}],["apipropertyoptional()@isstring",{"_index":486,"title":{},"body":{"classes/CreateTrueFalseDto.html":{},"classes/QueryQuestionDto.html":{}}}],["apipropertyoptional({default",{"_index":1067,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["apipropertyoptional({description",{"_index":1120,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["apipropertyoptional({format",{"_index":1087,"title":{},"body":{"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["apitags",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('exams",{"_index":638,"title":{},"body":{"controllers/ExamsController.html":{}}}],["apitags('google",{"_index":752,"title":{},"body":{"controllers/GoogleController.html":{}}}],["apitags('otp",{"_index":969,"title":{},"body":{"controllers/OtpController.html":{}}}],["apitags('questions",{"_index":1183,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["apitags('users",{"_index":1360,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":917,"title":{},"body":{"injectables/MailService.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":1065,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app_filter",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["app_interceptor",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCacheModule.html":{}}}],["app_pipe",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":1490,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":126,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":834,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["args.constraints",{"_index":841,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["args.object",{"_index":842,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["args.property",{"_index":849,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["argumentshost",{"_index":1020,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["async",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"guards/RoleGaurd.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["atleast",{"_index":524,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["audience",{"_index":801,"title":{},"body":{"injectables/GoogleService.html":{}}}],["auth",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleService.html":{},"modules/MailModule.html":{}}}],["auth.controller",{"_index":368,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/google",{"_index":731,"title":{},"body":{"controllers/GoogleController.html":{}}}],["auth/otp",{"_index":955,"title":{},"body":{"controllers/OtpController.html":{}}}],["auth/refresh",{"_index":1263,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["authcontroller",{"_index":261,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/GoogleGaurd.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard(\"google",{"_index":769,"title":{},"body":{"injectables/GoogleGaurd.html":{}}}],["authguard('jwt",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authmodule",{"_index":129,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1527,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorized",{"_index":721,"title":{},"body":{"injectables/ExamsService.html":{}}}],["authuser",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"controllers/OtpController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"guards/RoleGaurd.html":{},"injectables/UsersService.html":{}}}],["backend_url",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["backers",{"_index":1519,"title":{},"body":{"index.html":{}}}],["bad",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["bcript",{"_index":1346,"title":{},"body":{"classes/UserEntity.html":{}}}],["bcript.compare(password",{"_index":1348,"title":{},"body":{"classes/UserEntity.html":{}}}],["bcrypt",{"_index":994,"title":{},"body":{"injectables/OtpService.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(otp",{"_index":1006,"title":{},"body":{"injectables/OtpService.html":{}}}],["bcrypt.hash(otp",{"_index":996,"title":{},"body":{"injectables/OtpService.html":{}}}],["bcrypt.hash(password",{"_index":1390,"title":{},"body":{"injectables/UsersService.html":{}}}],["below",{"_index":922,"title":{},"body":{"injectables/MailService.html":{}}}],["body",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"injectables/LogMiddleware.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":483,"title":{},"body":{"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"injectables/ExamsService.html":{},"injectables/IsGte.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionsService.html":{},"classes/TrueFalseEntity.html":{},"classes/UserEntity.html":{}}}],["bootstrap",{"_index":1426,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1537,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1535,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1485,"title":{},"body":{"index.html":{}}}],["cache",{"_index":1242,"title":{},"body":{"injectables/RedisCacheService.html":{},"dependencies.html":{}}}],["cache.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/OtpModule.html":{}}}],["cache.module.ts",{"_index":1230,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["cache.service",{"_index":995,"title":{},"body":{"injectables/OtpService.html":{},"modules/RedisCacheModule.html":{}}}],["cache.service.ts",{"_index":1239,"title":{},"body":{"injectables/RedisCacheService.html":{},"coverage.html":{}}}],["cache.service.ts:14",{"_index":1248,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["cache.service.ts:5",{"_index":1243,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["cache.service.ts:9",{"_index":1245,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["cache/redis",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"coverage.html":{}}}],["cache_manager",{"_index":1250,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["cacheinterceptor",{"_index":1231,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["cachemodule",{"_index":1232,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["cachemodule.registerasync",{"_index":1234,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["callbackurl",{"_index":817,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["canactivate",{"_index":1269,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["canactivate(context",{"_index":1273,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["case",{"_index":528,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/PrismaExceptionFilter.html":{}}}],["case'})@matches(/[0",{"_index":534,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["case'})@matches(/[a",{"_index":532,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["catch",{"_index":928,"title":{},"body":{"injectables/MailService.html":{},"classes/PrismaExceptionFilter.html":{}}}],["catch(exception",{"_index":1018,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["catch(prismaclientknownrequesterror",{"_index":1024,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["character",{"_index":526,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["character'})@matches(/[a",{"_index":530,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["choice",{"_index":1160,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["choice.dto",{"_index":1179,"title":{},"body":{"controllers/QuestionsController.html":{},"classes/UpdateMultipleChoiceDto.html":{}}}],["choice.dto.ts",{"_index":399,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"coverage.html":{}}}],["choice.dto.ts:10",{"_index":417,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{}}}],["choice.dto.ts:15",{"_index":410,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{}}}],["choice.dto.ts:19",{"_index":408,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{}}}],["choice.dto.ts:24",{"_index":416,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{}}}],["choice.dto.ts:30",{"_index":420,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{}}}],["choice.dto.ts:33",{"_index":412,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{}}}],["choice.dto.ts:35",{"_index":421,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{}}}],["choice.entity",{"_index":584,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{}}}],["choice.entity.ts",{"_index":933,"title":{},"body":{"classes/MultipleChoiceEntity.html":{},"coverage.html":{}}}],["choice.entity.ts:10",{"_index":934,"title":{},"body":{"classes/MultipleChoiceEntity.html":{}}}],["choice.entity.ts:12",{"_index":940,"title":{},"body":{"classes/MultipleChoiceEntity.html":{}}}],["choice.entity.ts:5",{"_index":936,"title":{},"body":{"classes/MultipleChoiceEntity.html":{}}}],["choice.entity.ts:6",{"_index":938,"title":{},"body":{"classes/MultipleChoiceEntity.html":{}}}],["choice.entity.ts:7",{"_index":942,"title":{},"body":{"classes/MultipleChoiceEntity.html":{}}}],["choice.entity.ts:8",{"_index":935,"title":{},"body":{"classes/MultipleChoiceEntity.html":{}}}],["choice.entity.ts:9",{"_index":937,"title":{},"body":{"classes/MultipleChoiceEntity.html":{}}}],["choice/dto/create",{"_index":397,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"controllers/QuestionsController.html":{},"coverage.html":{}}}],["choice/dto/update",{"_index":1309,"title":{},"body":{"classes/UpdateMultipleChoiceDto.html":{},"coverage.html":{}}}],["choice/entities/multiple",{"_index":583,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/MultipleChoiceEntity.html":{},"classes/QuestionEntity.html":{},"coverage.html":{}}}],["class",{"_index":15,"title":{"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"injectables/QuestionsService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":382,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["clearcookie",{"_index":58,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["clearcookie(res",{"_index":69,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["client",{"_index":771,"title":{},"body":{"injectables/GoogleService.html":{},"dependencies.html":{}}}],["clientid",{"_index":813,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":815,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["cluster_accesstokenmodule",{"_index":24,"title":{},"body":{"modules/AccessTokenModule.html":{},"overview.html":{}}}],["cluster_accesstokenmodule_exports",{"_index":25,"title":{},"body":{"modules/AccessTokenModule.html":{},"overview.html":{}}}],["cluster_accesstokenmodule_providers",{"_index":26,"title":{},"body":{"modules/AccessTokenModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":357,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":359,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_examsmodule",{"_index":653,"title":{},"body":{"modules/ExamsModule.html":{},"overview.html":{}}}],["cluster_examsmodule_imports",{"_index":655,"title":{},"body":{"modules/ExamsModule.html":{},"overview.html":{}}}],["cluster_examsmodule_providers",{"_index":654,"title":{},"body":{"modules/ExamsModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":877,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":878,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":879,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_otpmodule",{"_index":980,"title":{},"body":{"modules/OtpModule.html":{},"overview.html":{}}}],["cluster_otpmodule_exports",{"_index":981,"title":{},"body":{"modules/OtpModule.html":{},"overview.html":{}}}],["cluster_otpmodule_imports",{"_index":983,"title":{},"body":{"modules/OtpModule.html":{}}}],["cluster_otpmodule_providers",{"_index":982,"title":{},"body":{"modules/OtpModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1050,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1052,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1051,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_questionsmodule",{"_index":1197,"title":{},"body":{"modules/QuestionsModule.html":{},"overview.html":{}}}],["cluster_questionsmodule_imports",{"_index":1198,"title":{},"body":{"modules/QuestionsModule.html":{}}}],["cluster_questionsmodule_providers",{"_index":1199,"title":{},"body":{"modules/QuestionsModule.html":{},"overview.html":{}}}],["cluster_rediscachemodule",{"_index":1226,"title":{},"body":{"modules/RedisCacheModule.html":{},"overview.html":{}}}],["cluster_rediscachemodule_exports",{"_index":1227,"title":{},"body":{"modules/RedisCacheModule.html":{},"overview.html":{}}}],["cluster_rediscachemodule_providers",{"_index":1228,"title":{},"body":{"modules/RedisCacheModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule",{"_index":1256,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule_exports",{"_index":1257,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule_providers",{"_index":1258,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1367,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1369,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1368,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1370,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":921,"title":{},"body":{"injectables/MailService.html":{}}}],["comparepassword",{"_index":1331,"title":{},"body":{"classes/UserEntity.html":{}}}],["comparepassword(password",{"_index":1344,"title":{},"body":{"classes/UserEntity.html":{}}}],["config",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/UsersService.html":{}}}],["config.getorthrow('smtp_api_host",{"_index":889,"title":{},"body":{"modules/MailModule.html":{}}}],["config.getorthrow('smtp_api_key",{"_index":894,"title":{},"body":{"modules/MailModule.html":{}}}],["config.getorthrow('smtp_api_user",{"_index":892,"title":{},"body":{"modules/MailModule.html":{}}}],["config.getorthrow('smtp_mail_from",{"_index":897,"title":{},"body":{"modules/MailModule.html":{}}}],["config.getorthrow('throttle_limit",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["config.getorthrow('throttle_ttl",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":35,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExamsModule.html":{},"modules/MailModule.html":{},"modules/OtpModule.html":{},"modules/QuestionsModule.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["configserivce",{"_index":664,"title":{},"body":{"injectables/ExamsService.html":{}}}],["configservice",{"_index":36,"title":{},"body":{"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/ExamsService.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/OtpService.html":{},"injectables/QuestionsService.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["configservice.getorthrow('access_token_cookie_name",{"_index":87,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{}}}],["configservice.getorthrow('access_token_expiration_time",{"_index":51,"title":{},"body":{"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{}}}],["configservice.getorthrow('access_token_secret",{"_index":48,"title":{},"body":{"modules/AccessTokenModule.html":{},"injectables/AccessTokenStrategy.html":{}}}],["configservice.getorthrow('cookie_domain",{"_index":92,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["configservice.getorthrow('cookie_http_only",{"_index":90,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["configservice.getorthrow('google_provider_callback_url",{"_index":818,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.getorthrow('google_provider_client_id",{"_index":814,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.getorthrow('google_provider_client_secret",{"_index":816,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.getorthrow('redis_host",{"_index":1235,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["configservice.getorthrow('redis_password",{"_index":1237,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["configservice.getorthrow('redis_port",{"_index":1236,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["configservice.getorthrow('redis_ttl",{"_index":1238,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["configservice.getorthrow('refresh_token_cookie_name",{"_index":1262,"title":{},"body":{"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["configservice.getorthrow('refresh_token_expiration_time",{"_index":1261,"title":{},"body":{"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{}}}],["configservice.getorthrow('refresh_token_secret",{"_index":1260,"title":{},"body":{"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["configure",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":914,"title":{},"body":{"injectables/MailService.html":{}}}],["connect",{"_index":685,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/QuestionsService.html":{}}}],["connectorcreate",{"_index":1214,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["console.log",{"_index":96,"title":{},"body":{"injectables/AccessTokenService.html":{}}}],["console.log(`deleted",{"_index":1224,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["console.log(hash",{"_index":1005,"title":{},"body":{"injectables/OtpService.html":{}}}],["const",{"_index":88,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":60,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["constructor(cache",{"_index":1241,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["constructor(configservice",{"_index":108,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/OtpService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(jwtservice",{"_index":61,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["constructor(mailservice",{"_index":901,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(partial",{"_index":559,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{}}}],["constructor(prisma",{"_index":662,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/QuestionsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":639,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/GoogleStrategy.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":1270,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["consumer",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(logmiddleware).forroutes",{"_index":259,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":523,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["contains",{"_index":692,"title":{},"body":{"injectables/ExamsService.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"injectables/UsersService.html":{}}}],["context",{"_index":1276,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["context.getclass",{"_index":1281,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["context.gethandler",{"_index":1280,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["context.switchtohttp().getrequest",{"_index":1282,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["controller",{"_index":260,"title":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/google",{"_index":751,"title":{},"body":{"controllers/GoogleController.html":{}}}],["controller('auth/otp",{"_index":968,"title":{},"body":{"controllers/OtpController.html":{}}}],["controller('exams",{"_index":637,"title":{},"body":{"controllers/ExamsController.html":{}}}],["controller('questions",{"_index":1182,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["controller('users",{"_index":1359,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{},"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":1451,"title":{},"body":{"dependencies.html":{}}}],["cookie_domain",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["cookie_http_only",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["cookiename",{"_index":55,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["cookieoptions",{"_index":56,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["cookies",{"_index":867,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["copy",{"_index":919,"title":{},"body":{"injectables/MailService.html":{}}}],["coverage",{"_index":1409,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"injectables/MailService.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/QuestionsService.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["create(@authuser",{"_index":640,"title":{},"body":{"controllers/ExamsController.html":{}}}],["create(data",{"_index":1377,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(undefined",{"_index":1204,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["create(userid",{"_index":606,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{}}}],["created",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["createdat",{"_index":550,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"injectables/ExamsService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["createexamdto",{"_index":381,"title":{"classes/CreateExamDto.html":{}},"body":{"classes/CreateExamDto.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["createmultiplechoice",{"_index":1154,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["createmultiplechoice(@body",{"_index":1185,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["createmultiplechoice(createquestiondto",{"_index":1158,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["createmultiplechoicedto",{"_index":395,"title":{"classes/CreateMultipleChoiceDto.html":{}},"body":{"classes/CreateMultipleChoiceDto.html":{},"controllers/QuestionsController.html":{},"classes/UpdateMultipleChoiceDto.html":{},"coverage.html":{}}}],["createmultipleselect",{"_index":1155,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["createmultipleselect(@body",{"_index":1191,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["createmultipleselect(createquestiondto",{"_index":1162,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["createmultipleselectdto",{"_index":442,"title":{"classes/CreateMultipleSelectDto.html":{}},"body":{"classes/CreateMultipleSelectDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquestiondto",{"_index":422,"title":{"classes/CreateQuestionDto.html":{}},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["createshortanswer",{"_index":1156,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["createshortanswer(@body",{"_index":1190,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["createshortanswer(createquestiondto",{"_index":1165,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["createshortanswerdto",{"_index":463,"title":{"classes/CreateShortAnswerDto.html":{}},"body":{"classes/CreateShortAnswerDto.html":{},"controllers/QuestionsController.html":{},"classes/UpdateShortAnswerDto.html":{},"coverage.html":{}}}],["createtagdto",{"_index":476,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"classes/UpdateTagDto.html":{},"coverage.html":{}}}],["createtruefalse",{"_index":1157,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["createtruefalse(@body",{"_index":1188,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["createtruefalse(createquestiondto",{"_index":1168,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["createtruefalsedto",{"_index":479,"title":{"classes/CreateTrueFalseDto.html":{}},"body":{"classes/CreateTrueFalseDto.html":{},"controllers/QuestionsController.html":{},"classes/UpdateTrueFalseDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":495,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentaillogin",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentaillogin(response",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentailregister",{"_index":277,"title":{"classes/CredentailRegister.html":{}},"body":{"controllers/AuthController.html":{},"classes/CredentailRegister.html":{},"coverage.html":{}}}],["credentailsignup",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentailsignup(@body",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentailsignup(body",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["credential",{"_index":537,"title":{},"body":{"classes/CredentailRegister.html":{}}}],["credentiallogin",{"_index":271,"title":{"classes/CredentialLogin.html":{}},"body":{"controllers/AuthController.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"coverage.html":{}}}],["credentiallogin:21",{"_index":536,"title":{},"body":{"classes/CredentailRegister.html":{}}}],["credentiallogin:8",{"_index":518,"title":{},"body":{"classes/CredentailRegister.html":{}}}],["credentials",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["cron",{"_index":676,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/QuestionsService.html":{}}}],["cron(cronexpression.every_day_at_1am",{"_index":671,"title":{},"body":{"injectables/ExamsService.html":{}}}],["cron(cronexpression.every_day_at_midnight",{"_index":1207,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["cronexpression",{"_index":677,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/QuestionsService.html":{}}}],["ctx",{"_index":1025,"title":{},"body":{"classes/PrismaExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":1028,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":1027,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":101,"title":{},"body":{"injectables/AccessTokenService.html":{},"controllers/AuthController.html":{},"injectables/ExamsService.html":{},"injectables/GoogleService.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"guards/RoleGaurd.html":{},"injectables/UsersService.html":{}}}],["data.email",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["data.id",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["data.password",{"_index":1392,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.role",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"guards/RoleGaurd.html":{}}}],["database_url",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":562,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"injectables/ExamsService.html":{},"injectables/IsGte.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionsService.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{}}}],["date'})@isoptional",{"_index":1088,"title":{},"body":{"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["date'})@isoptional()@validate(isgte",{"_index":1098,"title":{},"body":{"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["date().gettime",{"_index":1220,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["date(date.now",{"_index":908,"title":{},"body":{"injectables/MailService.html":{}}}],["date(new",{"_index":1219,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["days",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["dbml",{"_index":1467,"title":{},"body":{"dependencies.html":{}}}],["decorator/auth.gaurd",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OtpController.html":{}}}],["decorator/is",{"_index":1071,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["decorators",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{},"classes/ParamDto.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"classes/VerifyEmailDto.html":{}}}],["default",{"_index":418,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CredentailRegister.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/PrismaExceptionFilter.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionsService.html":{},"classes/ShortAnswerEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultmessage",{"_index":825,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["defaultmessage(args",{"_index":831,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["defaults",{"_index":895,"title":{},"body":{"modules/MailModule.html":{}}}],["defaultstrategy",{"_index":378,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":63,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{}}}],["delete",{"_index":627,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":649,"title":{},"body":{"controllers/ExamsController.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apicookieauth()@useguards(accesstokenguard",{"_index":619,"title":{},"body":{"controllers/ExamsController.html":{}}}],["deletedat",{"_index":551,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"injectables/ExamsService.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionsService.html":{}}}],["deletedquestions",{"_index":1222,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["deletedquestions.count",{"_index":1225,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["dependencies",{"_index":23,"title":{"dependencies.html":{}},"body":{"modules/AccessTokenModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExamsModule.html":{},"modules/MailModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/QuestionsModule.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"classes/ShortAnswerEntity.html":{},"classes/TrueFalseEntity.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["details')@useguards(accesstokenguard",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["development",{"_index":1498,"title":{},"body":{"index.html":{}}}],["direction",{"_index":1078,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["direction'})@isoptional()@isenum(prisma.sortorder",{"_index":1090,"title":{},"body":{"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["documentation",{"_index":1410,"title":{},"body":{"coverage.html":{}}}],["domain",{"_index":91,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["done",{"_index":810,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":820,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dto/create",{"_index":630,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"injectables/QuestionsService.html":{},"injectables/UsersService.html":{}}}],["dto/credential",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/query",{"_index":634,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{}}}],["dto/query.user.dto",{"_index":1389,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/update",{"_index":632,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":1507,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1486,"title":{},"body":{"index.html":{}}}],["email",{"_index":97,"title":{},"body":{"injectables/AccessTokenService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/MailService.html":{},"classes/Payload.html":{},"classes/QueryUserDto.html":{},"injectables/RefreshTokenService.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["emaill.dto.ts",{"_index":1407,"title":{},"body":{"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["emaill.dto.ts:6",{"_index":1408,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["emailverified",{"_index":498,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleService.html":{},"classes/UserEntity.html":{}}}],["enableimplicitconversion",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["enableshutdownhooks",{"_index":1057,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1059,"title":{},"body":{"injectables/PrismaService.html":{}}}],["entities/auth.entity",{"_index":84,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["entities/exam.entity",{"_index":682,"title":{},"body":{"injectables/ExamsService.html":{}}}],["entities/user.entity",{"_index":1388,"title":{},"body":{"injectables/UsersService.html":{}}}],["entitywithquestions",{"_index":548,"title":{"classes/EntityWithQuestions.html":{}},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"injectables/ExamsService.html":{},"coverage.html":{}}}],["entitywithquestions(exam",{"_index":701,"title":{},"body":{"injectables/ExamsService.html":{}}}],["enum",{"_index":1347,"title":{},"body":{"classes/UserEntity.html":{}}}],["error",{"_index":929,"title":{},"body":{"injectables/MailService.html":{},"classes/ValidationErrorDto.html":{}}}],["error('you",{"_index":720,"title":{},"body":{"injectables/ExamsService.html":{}}}],["error.dto",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["error.dto.ts",{"_index":1401,"title":{},"body":{"classes/ValidationErrorDto.html":{},"coverage.html":{}}}],["error.dto.ts:2",{"_index":1404,"title":{},"body":{"classes/ValidationErrorDto.html":{}}}],["error.dto.ts:3",{"_index":1403,"title":{},"body":{"classes/ValidationErrorDto.html":{}}}],["error.dto.ts:4",{"_index":1402,"title":{},"body":{"classes/ValidationErrorDto.html":{}}}],["exam",{"_index":683,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/QuestionsService.html":{}}}],["exam.dto",{"_index":631,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"classes/UpdateExamDto.html":{}}}],["exam.dto.ts",{"_index":384,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/QueryExamDto.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["exam.dto.ts:11",{"_index":386,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:13",{"_index":1103,"title":{},"body":{"classes/QueryExamDto.html":{}}}],["exam.dto.ts:17",{"_index":1102,"title":{},"body":{"classes/QueryExamDto.html":{}}}],["exam.dto.ts:7",{"_index":388,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:9",{"_index":1105,"title":{},"body":{"classes/QueryExamDto.html":{}}}],["exam.userid",{"_index":719,"title":{},"body":{"injectables/ExamsService.html":{}}}],["examentity",{"_index":589,"title":{"classes/ExamEntity.html":{}},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"injectables/ExamsService.html":{},"coverage.html":{}}}],["examentity(exam",{"_index":686,"title":{},"body":{"injectables/ExamsService.html":{}}}],["examentity(examoutput",{"_index":724,"title":{},"body":{"injectables/ExamsService.html":{}}}],["examentity.multiplechoice",{"_index":710,"title":{},"body":{"injectables/ExamsService.html":{}}}],["examentity.multipleselect",{"_index":713,"title":{},"body":{"injectables/ExamsService.html":{}}}],["examentity.shortanswer",{"_index":715,"title":{},"body":{"injectables/ExamsService.html":{}}}],["examentity.truefalse",{"_index":705,"title":{},"body":{"injectables/ExamsService.html":{}}}],["examid",{"_index":401,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionsService.html":{}}}],["examoutput",{"_index":722,"title":{},"body":{"injectables/ExamsService.html":{}}}],["example",{"_index":521,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["exams",{"_index":601,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{}}}],["exams.controller",{"_index":658,"title":{},"body":{"modules/ExamsModule.html":{}}}],["exams.count",{"_index":729,"title":{},"body":{"injectables/ExamsService.html":{}}}],["exams.map((exam",{"_index":697,"title":{},"body":{"injectables/ExamsService.html":{}}}],["exams.service",{"_index":629,"title":{},"body":{"controllers/ExamsController.html":{},"modules/ExamsModule.html":{}}}],["exams/exams.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["examscontroller",{"_index":599,"title":{"controllers/ExamsController.html":{}},"body":{"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"coverage.html":{}}}],["examsmodule",{"_index":130,"title":{"modules/ExamsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExamsModule.html":{},"modules.html":{},"overview.html":{}}}],["examsservice",{"_index":628,"title":{"injectables/ExamsService.html":{}},"body":{"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"injectables/ExamsService.html":{},"coverage.html":{},"overview.html":{}}}],["exceed",{"_index":855,"title":{},"body":{"injectables/IsValidPos.html":{}}}],["exception",{"_index":1022,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["exception.code",{"_index":1030,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["exception.stack",{"_index":1044,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1017,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["exclude",{"_index":582,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{}}}],["exclude()@apihideproperty",{"_index":564,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{}}}],["exclude()@apihideproperty()@exclude()@apihideproperty",{"_index":577,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["executioncontext",{"_index":1274,"title":{},"body":{"guards/RoleGaurd.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1042,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["exists",{"_index":1037,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["expirationdate",{"_index":907,"title":{},"body":{"injectables/MailService.html":{}}}],["expirationdate.tolocalestring",{"_index":925,"title":{},"body":{"injectables/MailService.html":{}}}],["expirationtime",{"_index":899,"title":{},"body":{"injectables/MailService.html":{}}}],["expire",{"_index":924,"title":{},"body":{"injectables/MailService.html":{}}}],["expiresin",{"_index":50,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/RefreshTokenModule.html":{}}}],["export",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"injectables/QuestionsService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{}}}],["exports",{"_index":34,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":81,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"controllers/GoogleController.html":{},"injectables/LogMiddleware.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/CredentailRegister.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleStrategy.html":{},"injectables/PrismaService.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":113,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":121,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["false",{"_index":493,"title":{},"body":{"classes/CreateTrueFalseDto.html":{},"injectables/ExamsService.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/OtpService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"guards/RoleGaurd.html":{}}}],["false.dto",{"_index":1180,"title":{},"body":{"controllers/QuestionsController.html":{},"classes/UpdateTrueFalseDto.html":{}}}],["false.dto.ts",{"_index":482,"title":{},"body":{"classes/CreateTrueFalseDto.html":{},"classes/UpdateTrueFalseDto.html":{},"coverage.html":{}}}],["false.dto.ts:13",{"_index":487,"title":{},"body":{"classes/CreateTrueFalseDto.html":{}}}],["false.dto.ts:16",{"_index":485,"title":{},"body":{"classes/CreateTrueFalseDto.html":{}}}],["false.dto.ts:19",{"_index":488,"title":{},"body":{"classes/CreateTrueFalseDto.html":{}}}],["false.dto.ts:24",{"_index":490,"title":{},"body":{"classes/CreateTrueFalseDto.html":{}}}],["false.dto.ts:26",{"_index":491,"title":{},"body":{"classes/CreateTrueFalseDto.html":{}}}],["false.dto.ts:9",{"_index":489,"title":{},"body":{"classes/CreateTrueFalseDto.html":{}}}],["false.entity",{"_index":588,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{}}}],["false.entity.ts",{"_index":1297,"title":{},"body":{"classes/TrueFalseEntity.html":{},"coverage.html":{}}}],["false.entity.ts:10",{"_index":1302,"title":{},"body":{"classes/TrueFalseEntity.html":{}}}],["false.entity.ts:5",{"_index":1300,"title":{},"body":{"classes/TrueFalseEntity.html":{}}}],["false.entity.ts:6",{"_index":1303,"title":{},"body":{"classes/TrueFalseEntity.html":{}}}],["false.entity.ts:7",{"_index":1301,"title":{},"body":{"classes/TrueFalseEntity.html":{}}}],["false.entity.ts:8",{"_index":1299,"title":{},"body":{"classes/TrueFalseEntity.html":{}}}],["false.entity.ts:9",{"_index":1298,"title":{},"body":{"classes/TrueFalseEntity.html":{}}}],["false/dto/create",{"_index":481,"title":{},"body":{"classes/CreateTrueFalseDto.html":{},"controllers/QuestionsController.html":{},"coverage.html":{}}}],["false/dto/update",{"_index":1325,"title":{},"body":{"classes/UpdateTrueFalseDto.html":{},"coverage.html":{}}}],["false/entities/true",{"_index":587,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{},"classes/TrueFalseEntity.html":{},"coverage.html":{}}}],["family_name",{"_index":796,"title":{},"body":{"injectables/GoogleService.html":{}}}],["field",{"_index":691,"title":{},"body":{"injectables/ExamsService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"injectables/UsersService.html":{}}}],["field'})@isoptional()@isstring",{"_index":1123,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["field'})@isoptional()@isstring()@isin(['id",{"_index":1094,"title":{},"body":{"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"injectables/QuestionsService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["filter",{"_index":1085,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["findall",{"_index":602,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@query",{"_index":642,"title":{},"body":{"controllers/ExamsController.html":{},"controllers/UsersController.html":{}}}],["findall(query",{"_index":609,"title":{},"body":{"controllers/ExamsController.html":{},"controllers/UsersController.html":{}}}],["findall(undefined",{"_index":667,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":603,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param",{"_index":644,"title":{},"body":{"controllers/ExamsController.html":{},"controllers/QuestionsController.html":{}}}],["findone(@param('id",{"_index":1363,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":669,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/QuestionsService.html":{},"controllers/UsersController.html":{}}}],["findone(undefined",{"_index":613,"title":{},"body":{"controllers/ExamsController.html":{},"controllers/QuestionsController.html":{}}}],["findone(where",{"_index":1380,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":1073,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["firstname",{"_index":499,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleService.html":{},"classes/QueryUserDto.html":{},"classes/UserEntity.html":{}}}],["forbidnonwhitelisted",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["force",{"_index":651,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{}}}],["format",{"_index":1081,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["framework",{"_index":1484,"title":{},"body":{"index.html":{}}}],["frontend_url",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":1425,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1478,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateotp",{"_index":956,"title":{},"body":{"controllers/OtpController.html":{},"injectables/OtpService.html":{}}}],["generateotp(@authuser",{"_index":971,"title":{},"body":{"controllers/OtpController.html":{}}}],["generateotp(id",{"_index":958,"title":{},"body":{"controllers/OtpController.html":{},"injectables/OtpService.html":{}}}],["generator",{"_index":1468,"title":{},"body":{"dependencies.html":{}}}],["get(\"backend",{"_index":754,"title":{},"body":{"controllers/GoogleController.html":{}}}],["get(\"login",{"_index":765,"title":{},"body":{"controllers/GoogleController.html":{}}}],["get(':id",{"_index":615,"title":{},"body":{"controllers/ExamsController.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}}}],["get('backend",{"_index":736,"title":{},"body":{"controllers/GoogleController.html":{}}}],["get('callback",{"_index":758,"title":{},"body":{"controllers/GoogleController.html":{}}}],["get('login",{"_index":741,"title":{},"body":{"controllers/GoogleController.html":{}}}],["get('personal",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh')@apicookieauth()@useguards(refreshtokenguard",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(key",{"_index":1244,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["getting",{"_index":1480,"title":{"index.html":{}},"body":{}}],["getuserdetails",{"_index":772,"title":{},"body":{"injectables/GoogleService.html":{}}}],["getuserdetails(accesstoken",{"_index":775,"title":{},"body":{"injectables/GoogleService.html":{}}}],["getuserdetailsfromidtoken",{"_index":773,"title":{},"body":{"injectables/GoogleService.html":{}}}],["getuserdetailsfromidtoken(idtoken",{"_index":778,"title":{},"body":{"injectables/GoogleService.html":{}}}],["given_name",{"_index":797,"title":{},"body":{"injectables/GoogleService.html":{}}}],["google",{"_index":781,"title":{},"body":{"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["google.auth.oauth2",{"_index":786,"title":{},"body":{"injectables/GoogleService.html":{}}}],["google.gaurd",{"_index":749,"title":{},"body":{"controllers/GoogleController.html":{}}}],["google.oauth2",{"_index":792,"title":{},"body":{"injectables/GoogleService.html":{}}}],["google.service",{"_index":750,"title":{},"body":{"controllers/GoogleController.html":{}}}],["google/google.controller",{"_index":372,"title":{},"body":{"modules/AuthModule.html":{}}}],["google/google.service",{"_index":374,"title":{},"body":{"modules/AuthModule.html":{}}}],["google/google.strategy",{"_index":373,"title":{},"body":{"modules/AuthModule.html":{}}}],["google_provider_callback_url",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["google_provider_client_id",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["google_provider_client_secret",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["google_provider_issuer_url",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["googleapis",{"_index":783,"title":{},"body":{"injectables/GoogleService.html":{},"dependencies.html":{}}}],["googleauth",{"_index":732,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googleauth(@req",{"_index":757,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googleauth(req",{"_index":735,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googleauthfrontend",{"_index":733,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googleauthfrontend(idtoken",{"_index":740,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googleauthservice",{"_index":753,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googlecallback",{"_index":734,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googlecallback(req",{"_index":744,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googlecontroller",{"_index":366,"title":{"controllers/GoogleController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleController.html":{},"coverage.html":{}}}],["googlegaurd",{"_index":748,"title":{"injectables/GoogleGaurd.html":{}},"body":{"controllers/GoogleController.html":{},"injectables/GoogleGaurd.html":{},"coverage.html":{}}}],["googleservice",{"_index":363,"title":{"injectables/GoogleService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"coverage.html":{},"overview.html":{}}}],["googlestrategy",{"_index":364,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["greater",{"_index":848,"title":{},"body":{"injectables/IsGte.html":{}}}],["grow",{"_index":1514,"title":{},"body":{"index.html":{}}}],["gte",{"_index":689,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/UsersService.html":{}}}],["gte.decorator",{"_index":1072,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["gte.decorator.ts",{"_index":822,"title":{},"body":{"injectables/IsGte.html":{},"coverage.html":{}}}],["gte.decorator.ts:22",{"_index":830,"title":{},"body":{"injectables/IsGte.html":{}}}],["gte.decorator.ts:26",{"_index":828,"title":{},"body":{"injectables/IsGte.html":{}}}],["gte.decorator.ts:30",{"_index":833,"title":{},"body":{"injectables/IsGte.html":{}}}],["gte.decorator.ts:8",{"_index":836,"title":{},"body":{"injectables/IsGte.html":{}}}],["guard",{"_index":1265,"title":{"guards/RoleGaurd.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1267,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["handlebars",{"_index":1455,"title":{},"body":{"dependencies.html":{}}}],["handlecron",{"_index":661,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/QuestionsService.html":{}}}],["hash",{"_index":1001,"title":{},"body":{"injectables/OtpService.html":{}}}],["hashotp",{"_index":986,"title":{},"body":{"injectables/OtpService.html":{}}}],["hashotp(otp",{"_index":991,"title":{},"body":{"injectables/OtpService.html":{}}}],["hashpassword",{"_index":1375,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashpassword(password",{"_index":1383,"title":{},"body":{"injectables/UsersService.html":{}}}],["headers",{"_index":747,"title":{},"body":{"controllers/GoogleController.html":{},"injectables/LogMiddleware.html":{},"controllers/OtpController.html":{}}}],["headers('idtoken",{"_index":766,"title":{},"body":{"controllers/GoogleController.html":{}}}],["headers('otp",{"_index":977,"title":{},"body":{"controllers/OtpController.html":{}}}],["here",{"_index":1524,"title":{},"body":{"index.html":{}}}],["host",{"_index":888,"title":{},"body":{"modules/MailModule.html":{},"classes/PrismaExceptionFilter.html":{},"modules/RedisCacheModule.html":{}}}],["host.switchtohttp",{"_index":1026,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["hours",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["html",{"_index":918,"title":{},"body":{"injectables/MailService.html":{}}}],["httpexception",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleService.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{}}}],["httpexception(\"invalid",{"_index":804,"title":{},"body":{"injectables/GoogleService.html":{}}}],["httpexception(\"unable",{"_index":930,"title":{},"body":{"injectables/MailService.html":{}}}],["httpexception('invalid",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OtpController.html":{}}}],["httponly",{"_index":89,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["https://nestjs.com",{"_index":1531,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleService.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"classes/PrismaExceptionFilter.html":{}}}],["httpstatus.conflict",{"_index":1034,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":932,"title":{},"body":{"injectables/MailService.html":{},"classes/PrismaExceptionFilter.html":{}}}],["httpstatus.not_found",{"_index":1040,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["httpstatus.unauthorized",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleService.html":{},"controllers/OtpController.html":{}}}],["id",{"_index":98,"title":{},"body":{"injectables/AccessTokenService.html":{},"controllers/AuthController.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/RefreshTokenService.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1411,"title":{},"body":{"coverage.html":{}}}],["idtoken",{"_index":743,"title":{},"body":{"controllers/GoogleController.html":{},"injectables/GoogleService.html":{}}}],["ignore",{"_index":927,"title":{},"body":{"injectables/MailService.html":{}}}],["image",{"_index":500,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleService.html":{},"classes/UserEntity.html":{}}}],["implements",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QuestionEntity.html":{},"guards/RoleGaurd.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{}}}],["import",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"injectables/QuestionsService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["imports",{"_index":43,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExamsModule.html":{},"modules/MailModule.html":{},"modules/OtpModule.html":{},"modules/QuestionsModule.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":700,"title":{},"body":{"injectables/ExamsService.html":{}}}],["index",{"_index":53,"title":{"index.html":{}},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1060,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"injectables/QuestionsService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{}}}],["inherited",{"_index":517,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["inject",{"_index":45,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/AppModule.html":{},"modules/MailModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"modules/RefreshTokenModule.html":{}}}],["inject(cache_manager",{"_index":1252,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/ExamsService.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"injectables/MailService.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/ExamsService.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"injectables/MailService.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/ExamsService.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"injectables/MailService.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":1495,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1497,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":846,"title":{},"body":{"injectables/IsGte.html":{}}}],["isarray",{"_index":414,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{}}}],["isboolean",{"_index":484,"title":{},"body":{"classes/CreateTrueFalseDto.html":{},"classes/QueryExamDto.html":{}}}],["isdeleted",{"_index":552,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"injectables/ExamsService.html":{},"classes/QueryExamDto.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionsService.html":{}}}],["isemail",{"_index":541,"title":{},"body":{"classes/CredentialLogin.html":{},"classes/VerifyEmailDto.html":{}}}],["isemail()@transform",{"_index":516,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["isenum",{"_index":452,"title":{},"body":{"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CredentailRegister.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["isenum(prisma.sortorder",{"_index":1079,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["isenum(questiontype",{"_index":461,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["isenum(role",{"_index":514,"title":{},"body":{"classes/CredentailRegister.html":{}}}],["isgreaterthanequal",{"_index":839,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["isgte",{"_index":821,"title":{"injectables/IsGte.html":{}},"body":{"injectables/IsGte.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"coverage.html":{}}}],["isin",{"_index":1069,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["isin(['id",{"_index":1076,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["isint",{"_index":1070,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["isnumber",{"_index":411,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/ParamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/VerifyEmailDto.html":{}}}],["isnumber()@validate(isvalidpos",{"_index":407,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{}}}],["isoptional",{"_index":390,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryUserDto.html":{}}}],["isoptional()@apiproperty({type",{"_index":419,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{}}}],["isoptional()@isstring",{"_index":385,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isrole",{"_index":1357,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isrole(role.admin",{"_index":1361,"title":{},"body":{"controllers/UsersController.html":{}}}],["isstring",{"_index":391,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CredentialLogin.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/VerifyEmailDto.html":{}}}],["isstring()@transform",{"_index":387,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isvalidpos",{"_index":429,"title":{"injectables/IsValidPos.html":{}},"body":{"classes/CreateMultipleChoiceDto.html":{},"injectables/IsValidPos.html":{},"coverage.html":{}}}],["joi",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.boolean().default(true",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(10",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(100",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(15",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(3000",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(60",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(6379",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(7",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"apikey",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"smtp.sendgrid.net",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('access_token",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('http://localhost:3000",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('http://localhost:3000/auth/google/callback",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('http://localhost:3000/auth/verify",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('http://localhost:4200",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('https://accounts.google.com",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('localhost",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('refresh_token",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(24",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(7",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":1521,"title":{},"body":{"index.html":{}}}],["json.stringify(req.body",{"_index":871,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["json.stringify(req.cookies",{"_index":868,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["json.stringify(req.headers",{"_index":869,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["json.stringify(res.getheaders",{"_index":876,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["jwt",{"_index":116,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":120,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":38,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/RefreshTokenModule.html":{}}}],["jwtmodule.registerasync",{"_index":44,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/RefreshTokenModule.html":{}}}],["jwtservice",{"_index":62,"title":{},"body":{"injectables/AccessTokenService.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenService.html":{}}}],["kamil",{"_index":1528,"title":{},"body":{"index.html":{}}}],["key",{"_index":1246,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["lastname",{"_index":501,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleService.html":{},"classes/QueryUserDto.html":{},"classes/UserEntity.html":{}}}],["library",{"_index":782,"title":{},"body":{"injectables/GoogleService.html":{}}}],["license",{"_index":1534,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1511,"title":{},"body":{"index.html":{}}}],["limit",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["literal",{"_index":1381,"title":{},"body":{"injectables/UsersService.html":{}}}],["local",{"_index":1465,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":675,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/GoogleService.html":{},"injectables/LogMiddleware.html":{},"classes/PrismaExceptionFilter.html":{}}}],["logger.error(exception.message",{"_index":1043,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["logger.log(`[request",{"_index":870,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["logger.log(`deleted",{"_index":728,"title":{},"body":{"injectables/ExamsService.html":{}}}],["logger.log(`request",{"_index":863,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["logger.log(`response",{"_index":873,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["login",{"_index":755,"title":{},"body":{"controllers/GoogleController.html":{}}}],["login')@useguards(googlegaurd",{"_index":737,"title":{},"body":{"controllers/GoogleController.html":{}}}],["login.dto",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentailRegister.html":{}}}],["login.dto.ts",{"_index":538,"title":{},"body":{"classes/CredentialLogin.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["login.dto.ts:21",{"_index":540,"title":{},"body":{"classes/CredentialLogin.html":{}}}],["login.dto.ts:8",{"_index":539,"title":{},"body":{"classes/CredentialLogin.html":{}}}],["logmiddleware",{"_index":163,"title":{"injectables/LogMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogMiddleware.html":{},"coverage.html":{}}}],["logout",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@res",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(response",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["lower",{"_index":533,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["lte",{"_index":690,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/QuestionsService.html":{},"injectables/UsersService.html":{}}}],["mail.service",{"_index":885,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule",{"_index":882,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":886,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":902,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":360,"title":{"modules/MailModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":880,"title":{"injectables/MailService.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"coverage.html":{},"overview.html":{}}}],["manager",{"_index":1251,"title":{},"body":{"injectables/RedisCacheService.html":{},"dependencies.html":{}}}],["matches",{"_index":542,"title":{},"body":{"classes/CredentialLogin.html":{}}}],["matches(/[0",{"_index":547,"title":{},"body":{"classes/CredentialLogin.html":{}}}],["matches(/[a",{"_index":546,"title":{},"body":{"classes/CredentialLogin.html":{}}}],["matching",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"injectables/QuestionsService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(100000",{"_index":998,"title":{},"body":{"injectables/OtpService.html":{}}}],["math.random",{"_index":999,"title":{},"body":{"injectables/OtpService.html":{}}}],["maxage",{"_index":93,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["me(@authuser",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["me(id",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["message",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"controllers/OtpController.html":{},"classes/PrismaExceptionFilter.html":{},"classes/ValidationErrorDto.html":{}}}],["metadata",{"_index":1471,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":57,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["min",{"_index":1010,"title":{},"body":{"classes/ParamDto.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["min(0",{"_index":1075,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["min(1",{"_index":1011,"title":{},"body":{"classes/ParamDto.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["minlength",{"_index":543,"title":{},"body":{"classes/CredentialLogin.html":{}}}],["minlength(8",{"_index":545,"title":{},"body":{"classes/CredentialLogin.html":{}}}],["minutes",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":1477,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1510,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1502,"title":{},"body":{"index.html":{}}}],["module",{"_index":20,"title":{"modules/AccessTokenModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExamsModule.html":{},"modules/MailModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/QuestionsModule.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AccessTokenModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExamsModule.html":{},"modules/MailModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/QuestionsModule.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":22,"title":{"modules.html":{}},"body":{"modules/AccessTokenModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExamsModule.html":{},"modules/MailModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/QuestionsModule.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":884,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["more",{"_index":1523,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":398,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"coverage.html":{}}}],["multiplechoice",{"_index":553,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{}}}],["multiplechoiceentity",{"_index":569,"title":{"classes/MultipleChoiceEntity.html":{}},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/MultipleChoiceEntity.html":{},"classes/QuestionEntity.html":{},"coverage.html":{}}}],["multipleselect",{"_index":554,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{}}}],["multipleselectentity",{"_index":944,"title":{"classes/MultipleSelectEntity.html":{}},"body":{"classes/MultipleSelectEntity.html":{},"classes/QuestionEntity.html":{},"coverage.html":{}}}],["myśliwiec",{"_index":1529,"title":{},"body":{"index.html":{}}}],["n",{"_index":1074,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["name",{"_index":66,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateExamDto.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryExamDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":1491,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1533,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":883,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/PrismaExceptionFilter.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"injectables/QuestionsService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":37,"title":{},"body":{"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExamsModule.html":{},"injectables/ExamsService.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"modules/QuestionsModule.html":{},"injectables/QuestionsService.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCacheModule.html":{},"guards/RoleGaurd.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":39,"title":{},"body":{"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"controllers/AuthController.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1439,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"injectables/ExamsService.html":{},"injectables/QuestionsService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":1441,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{},"classes/ParamDto.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":252,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ExamsService.html":{},"injectables/GoogleService.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"injectables/QuestionsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["next",{"_index":860,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["nextfunction",{"_index":861,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["node.js",{"_index":1483,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["nodemailer",{"_index":1458,"title":{},"body":{"dependencies.html":{}}}],["npm",{"_index":1496,"title":{},"body":{"index.html":{}}}],["null",{"_index":123,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/QuestionEntity.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/ShortAnswerEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UserEntity.html":{}}}],["number",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{}}}],["number'})@isstring()@minlength(8)@matches",{"_index":529,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["oauth2",{"_index":791,"title":{},"body":{"injectables/GoogleService.html":{}}}],["oauth2.userinfo.get",{"_index":795,"title":{},"body":{"injectables/GoogleService.html":{}}}],["oauth20",{"_index":812,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["oauth2client",{"_index":780,"title":{},"body":{"injectables/GoogleService.html":{}}}],["object.assign(this",{"_index":590,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{}}}],["onmoduleinit",{"_index":1058,"title":{},"body":{"injectables/PrismaService.html":{}}}],["oops",{"_index":1046,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["open",{"_index":1512,"title":{},"body":{"index.html":{}}}],["openid",{"_index":1460,"title":{},"body":{"dependencies.html":{}}}],["optional",{"_index":68,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":402,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/QuestionEntity.html":{}}}],["order",{"_index":694,"title":{},"body":{"injectables/ExamsService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"injectables/UsersService.html":{}}}],["orderby",{"_index":695,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/UsersService.html":{}}}],["otp",{"_index":905,"title":{},"body":{"injectables/MailService.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/VerifyEmailDto.html":{}}}],["otp')@apicookieauth()@useguards(accesstokenguard",{"_index":963,"title":{},"body":{"controllers/OtpController.html":{}}}],["otp.service",{"_index":967,"title":{},"body":{"controllers/OtpController.html":{},"modules/OtpModule.html":{}}}],["otp/otp.controller",{"_index":376,"title":{},"body":{"modules/AuthModule.html":{}}}],["otp/otp.module",{"_index":375,"title":{},"body":{"modules/AuthModule.html":{}}}],["otp_expiration_time",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["otp_resend_time",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["otpcontroller",{"_index":367,"title":{"controllers/OtpController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/OtpController.html":{},"coverage.html":{}}}],["otpmodule",{"_index":361,"title":{"modules/OtpModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules.html":{},"overview.html":{}}}],["otpservice",{"_index":966,"title":{"injectables/OtpService.html":{}},"body":{"controllers/OtpController.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"coverage.html":{},"overview.html":{}}}],["out",{"_index":31,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExamsModule.html":{},"modules/MailModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/QuestionsModule.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1538,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":1031,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["p2025",{"_index":1038,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["package",{"_index":1434,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":626,"title":{},"body":{"controllers/ExamsController.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}}}],["paramdto",{"_index":614,"title":{"classes/ParamDto.html":{}},"body":{"controllers/ExamsController.html":{},"classes/ParamDto.html":{},"controllers/QuestionsController.html":{},"coverage.html":{}}}],["parameters",{"_index":65,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":1452,"title":{},"body":{"dependencies.html":{}}}],["partial",{"_index":560,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{}}}],["partialtype",{"_index":580,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createexamdto",{"_index":1307,"title":{},"body":{"classes/UpdateExamDto.html":{}}}],["partialtype(createmultiplechoicedto",{"_index":1310,"title":{},"body":{"classes/UpdateMultipleChoiceDto.html":{}}}],["partialtype(createmultipleselectdto",{"_index":1314,"title":{},"body":{"classes/UpdateMultipleSelectDto.html":{}}}],["partialtype(createquestiondto",{"_index":1316,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["partialtype(createshortanswerdto",{"_index":1319,"title":{},"body":{"classes/UpdateShortAnswerDto.html":{}}}],["partialtype(createtagdto",{"_index":1323,"title":{},"body":{"classes/UpdateTagDto.html":{}}}],["partialtype(createtruefalsedto",{"_index":1326,"title":{},"body":{"classes/UpdateTrueFalseDto.html":{}}}],["partialtype(createuserdto",{"_index":1329,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":893,"title":{},"body":{"modules/MailModule.html":{}}}],["passport",{"_index":115,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":369,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":377,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":112,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":118,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passthrough",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleController.html":{}}}],["password",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"modules/RedisCacheModule.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["password@123",{"_index":522,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["paste",{"_index":920,"title":{},"body":{"injectables/MailService.html":{}}}],["patch",{"_index":625,"title":{},"body":{"controllers/ExamsController.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":646,"title":{},"body":{"controllers/ExamsController.html":{},"controllers/QuestionsController.html":{}}}],["patch(':id')@apicookieauth()@useguards(accesstokenguard",{"_index":623,"title":{},"body":{"controllers/ExamsController.html":{}}}],["path",{"_index":95,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["payload",{"_index":83,"title":{"classes/Payload.html":{}},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/GoogleService.html":{},"classes/Payload.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["permanetly_delete_after",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["picture",{"_index":798,"title":{},"body":{"injectables/GoogleService.html":{}}}],["please",{"_index":913,"title":{},"body":{"injectables/MailService.html":{},"index.html":{}}}],["port",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules/RedisCacheModule.html":{}}}],["pos.decorator",{"_index":432,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{}}}],["pos.decorator.ts",{"_index":850,"title":{},"body":{"injectables/IsValidPos.html":{},"coverage.html":{}}}],["pos.decorator.ts:18",{"_index":851,"title":{},"body":{"injectables/IsValidPos.html":{}}}],["pos.decorator.ts:8",{"_index":852,"title":{},"body":{"injectables/IsValidPos.html":{}}}],["post",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"controllers/OtpController.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}}}],["post(\"generate",{"_index":970,"title":{},"body":{"controllers/OtpController.html":{}}}],["post(\"login",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"logout",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"multiple",{"_index":1184,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["post(\"short",{"_index":1189,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["post(\"signup",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"true",{"_index":1187,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["post(\"verify",{"_index":975,"title":{},"body":{"controllers/OtpController.html":{}}}],["post('login",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('multiple",{"_index":1159,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["post('short",{"_index":1166,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["post('signup')@apiconflictresponse({description",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('true",{"_index":1169,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["post('verify",{"_index":962,"title":{},"body":{"controllers/OtpController.html":{}}}],["post()@apicookieauth()@useguards(accesstokenguard",{"_index":607,"title":{},"body":{"controllers/ExamsController.html":{}}}],["prefix",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":509,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/ExamsService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"injectables/QuestionsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma.service",{"_index":1054,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.sortorder",{"_index":1080,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["prisma.sortorder.asc",{"_index":1077,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["prisma.usercreateinput",{"_index":510,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["prisma/client",{"_index":426,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"injectables/ExamsService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/Payload.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QuestionEntity.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":1023,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["prismaclient",{"_index":1056,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":1019,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["prismaexceptionfilter",{"_index":151,"title":{"classes/PrismaExceptionFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/PrismaExceptionFilter.html":{},"coverage.html":{}}}],["prismamodule",{"_index":656,"title":{"modules/PrismaModule.html":{}},"body":{"modules/ExamsModule.html":{},"modules/PrismaModule.html":{},"modules/QuestionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":663,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/ExamsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/QuestionsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":85,"title":{},"body":{"injectables/AccessTokenService.html":{},"controllers/AuthController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/IsGte.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"guards/RoleGaurd.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["profile",{"_index":809,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["progressive",{"_index":1482,"title":{},"body":{"index.html":{}}}],["project",{"_index":1513,"title":{},"body":{"index.html":{}}}],["properties",{"_index":54,"title":{"properties.html":{}},"body":{"injectables/AccessTokenService.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"injectables/GoogleService.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"injectables/RefreshTokenService.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UserEntity.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{},"properties.html":{}}}],["property",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{}}}],["provide",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCacheModule.html":{},"modules/UsersModule.html":{}}}],["providers",{"_index":33,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExamsModule.html":{},"modules/MailModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/QuestionsModule.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UsersModule.html":{}}}],["provision",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["public",{"_index":405,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{}}}],["query",{"_index":612,"title":{},"body":{"controllers/ExamsController.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}}}],["querydeletedto",{"_index":618,"title":{"classes/QueryDeleteDto.html":{}},"body":{"controllers/ExamsController.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"controllers/QuestionsController.html":{},"coverage.html":{}}}],["querydto",{"_index":680,"title":{"classes/QueryDto.html":{}},"body":{"injectables/ExamsService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["querydto:11",{"_index":1108,"title":{},"body":{"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["querydto:17",{"_index":1110,"title":{},"body":{"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["querydto:23",{"_index":1109,"title":{},"body":{"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["querydto:28",{"_index":1107,"title":{},"body":{"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["querydto:32",{"_index":1106,"title":{},"body":{"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["querydto:37",{"_index":1111,"title":{},"body":{"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["queryexamdto",{"_index":610,"title":{"classes/QueryExamDto.html":{}},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"classes/QueryExamDto.html":{},"coverage.html":{}}}],["queryquestiondto",{"_index":1113,"title":{"classes/QueryQuestionDto.html":{}},"body":{"classes/QueryQuestionDto.html":{},"coverage.html":{}}}],["queryuserdto",{"_index":1118,"title":{"classes/QueryUserDto.html":{}},"body":{"classes/QueryUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["question",{"_index":403,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"classes/ShortAnswerEntity.html":{},"classes/TrueFalseEntity.html":{}}}],["question.dto",{"_index":428,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"classes/UpdateQuestionDto.html":{}}}],["question.dto.ts",{"_index":454,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/QueryQuestionDto.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:11",{"_index":1117,"title":{},"body":{"classes/QueryQuestionDto.html":{}}}],["question.dto.ts:13",{"_index":456,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:15",{"_index":1115,"title":{},"body":{"classes/QueryQuestionDto.html":{}}}],["question.dto.ts:16",{"_index":462,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:21",{"_index":455,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:27",{"_index":458,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:30",{"_index":457,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:37",{"_index":460,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:7",{"_index":1116,"title":{},"body":{"classes/QueryQuestionDto.html":{}}}],["question.dto.ts:8",{"_index":459,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.tomultiplechoice",{"_index":712,"title":{},"body":{"injectables/ExamsService.html":{}}}],["question.toshortanswer",{"_index":717,"title":{},"body":{"injectables/ExamsService.html":{}}}],["question.totruefalse",{"_index":709,"title":{},"body":{"injectables/ExamsService.html":{}}}],["question.type",{"_index":707,"title":{},"body":{"injectables/ExamsService.html":{}}}],["questionentity",{"_index":678,"title":{"classes/QuestionEntity.html":{}},"body":{"injectables/ExamsService.html":{},"classes/QuestionEntity.html":{},"coverage.html":{}}}],["questionentity(question",{"_index":704,"title":{},"body":{"injectables/ExamsService.html":{}}}],["questions",{"_index":698,"title":{},"body":{"injectables/ExamsService.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{}}}],["questions.controller",{"_index":1201,"title":{},"body":{"modules/QuestionsModule.html":{}}}],["questions.map(question",{"_index":703,"title":{},"body":{"injectables/ExamsService.html":{}}}],["questions.service",{"_index":1178,"title":{},"body":{"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{}}}],["questions/questions.module",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["questionscontroller",{"_index":1152,"title":{"controllers/QuestionsController.html":{}},"body":{"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"coverage.html":{}}}],["questionsentity",{"_index":702,"title":{},"body":{"injectables/ExamsService.html":{}}}],["questionsentity.filter(question",{"_index":706,"title":{},"body":{"injectables/ExamsService.html":{}}}],["questionsmodule",{"_index":131,"title":{"modules/QuestionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QuestionsModule.html":{},"modules.html":{},"overview.html":{}}}],["questionsservice",{"_index":1177,"title":{"injectables/QuestionsService.html":{}},"body":{"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"injectables/QuestionsService.html":{},"coverage.html":{},"overview.html":{}}}],["questiontype",{"_index":425,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"injectables/ExamsService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/QuestionEntity.html":{},"classes/ShortAnswerEntity.html":{},"classes/TrueFalseEntity.html":{}}}],["questiontype.multiple_choice",{"_index":941,"title":{},"body":{"classes/MultipleChoiceEntity.html":{},"classes/QuestionEntity.html":{}}}],["questiontype.multiple_choice).map(question",{"_index":711,"title":{},"body":{"injectables/ExamsService.html":{}}}],["questiontype.multiple_select",{"_index":438,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/MultipleSelectEntity.html":{},"classes/QuestionEntity.html":{}}}],["questiontype.multiple_select).map(question",{"_index":714,"title":{},"body":{"injectables/ExamsService.html":{}}}],["questiontype.short_answer",{"_index":474,"title":{},"body":{"classes/CreateShortAnswerDto.html":{},"classes/QuestionEntity.html":{},"classes/ShortAnswerEntity.html":{}}}],["questiontype.short_answer).map(question",{"_index":716,"title":{},"body":{"injectables/ExamsService.html":{}}}],["questiontype.true_false",{"_index":492,"title":{},"body":{"classes/CreateTrueFalseDto.html":{},"classes/QuestionEntity.html":{},"classes/TrueFalseEntity.html":{}}}],["questiontype.true_false).map(question",{"_index":708,"title":{},"body":{"injectables/ExamsService.html":{}}}],["read",{"_index":1522,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleStrategy.html":{},"controllers/OtpController.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["redis",{"_index":1233,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["redis_host",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_password",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_ttl",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["rediscachemodule",{"_index":132,"title":{"modules/RedisCacheModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OtpModule.html":{},"modules/RedisCacheModule.html":{},"modules.html":{},"overview.html":{}}}],["rediscacheservice",{"_index":988,"title":{"injectables/RedisCacheService.html":{}},"body":{"injectables/OtpService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"coverage.html":{},"overview.html":{}}}],["redisservice",{"_index":987,"title":{},"body":{"injectables/OtpService.html":{}}}],["reflect",{"_index":1470,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1271,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["refresh",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GoogleController.html":{},"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refresh(@authuser",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(id",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh_token_cookie_name",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["refresh_token_expiration_time",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["refresh_token_secret",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["refreshtoken",{"_index":808,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["refreshtokenguard",{"_index":315,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokenmodule",{"_index":362,"title":{"modules/RefreshTokenModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/RefreshTokenModule.html":{},"modules.html":{},"overview.html":{}}}],["refreshtokenservice",{"_index":311,"title":{"injectables/RefreshTokenService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/GoogleController.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtokenstrategy",{"_index":1259,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["register.dto",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["register.dto.ts",{"_index":512,"title":{},"body":{"classes/CredentailRegister.html":{},"coverage.html":{}}}],["register.dto.ts:7",{"_index":515,"title":{},"body":{"classes/CredentailRegister.html":{}}}],["relatedpropertyname",{"_index":840,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["relatedvalue",{"_index":827,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["relatedvalue.length",{"_index":854,"title":{},"body":{"injectables/IsValidPos.html":{}}}],["remove",{"_index":604,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@authuser",{"_index":650,"title":{},"body":{"controllers/ExamsController.html":{}}}],["remove(@param",{"_index":1195,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["remove(@param('id",{"_index":1365,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":1209,"title":{},"body":{"injectables/QuestionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(undefined",{"_index":1172,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["remove(userid",{"_index":617,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{}}}],["reply",{"_index":896,"title":{},"body":{"modules/MailModule.html":{}}}],["repository",{"_index":1494,"title":{},"body":{"index.html":{}}}],["req",{"_index":739,"title":{},"body":{"controllers/GoogleController.html":{},"injectables/LogMiddleware.html":{}}}],["req.ip",{"_index":864,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["req.method",{"_index":865,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["req.url",{"_index":866,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["request",{"_index":117,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"controllers/GoogleController.html":{},"injectables/LogMiddleware.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/RefreshTokenStrategy.html":{},"miscellaneous/variables.html":{}}}],["request.method.tolowercase",{"_index":1041,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["request.user.sub",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request?.cookies?.[cookiename",{"_index":122,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["requests",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["requiredrole",{"_index":1278,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["res",{"_index":72,"title":{},"body":{"injectables/AccessTokenService.html":{},"controllers/AuthController.html":{},"controllers/GoogleController.html":{},"injectables/LogMiddleware.html":{},"injectables/RefreshTokenService.html":{}}}],["res.clearcookie(this.cookiename",{"_index":105,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["res.cookie",{"_index":104,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["res.on('close",{"_index":872,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["res.statuscode",{"_index":875,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["reset",{"_index":30,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExamsModule.html":{},"modules/MailModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/QuestionsModule.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":70,"title":{},"body":{"injectables/AccessTokenService.html":{},"controllers/AuthController.html":{},"controllers/GoogleController.html":{},"injectables/LogMiddleware.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/RefreshTokenService.html":{}}}],["response.status(httpstatus.conflict).json",{"_index":1032,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["response.status(httpstatus.internal_server_error).json",{"_index":1045,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["response.status(httpstatus.not_found).json",{"_index":1039,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["results",{"_index":18,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"injectables/QuestionsService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["results'})@isoptional()@isint()@min(0",{"_index":1092,"title":{},"body":{"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["results'})@isoptional()@isint()@min(1",{"_index":1096,"title":{},"body":{"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{}}}],["return",{"_index":125,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/PrismaExceptionFilter.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":73,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":1473,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":100,"title":{},"body":{"injectables/AccessTokenService.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/Payload.html":{},"injectables/RefreshTokenService.html":{},"guards/RoleGaurd.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["role.user",{"_index":513,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/UserEntity.html":{}}}],["rolegaurd",{"_index":1266,"title":{"guards/RoleGaurd.html":{}},"body":{"guards/RoleGaurd.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["run",{"_index":1499,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1475,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["scalable",{"_index":1487,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["scope",{"_index":819,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["seconds",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["secret",{"_index":47,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/RefreshTokenModule.html":{}}}],["secretorkey",{"_index":119,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["secure",{"_index":891,"title":{},"body":{"modules/MailModule.html":{}}}],["select",{"_index":1163,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["select.dto",{"_index":1313,"title":{},"body":{"classes/UpdateMultipleSelectDto.html":{}}}],["select.dto.ts",{"_index":444,"title":{},"body":{"classes/CreateMultipleSelectDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"coverage.html":{}}}],["select.dto.ts:14",{"_index":446,"title":{},"body":{"classes/CreateMultipleSelectDto.html":{}}}],["select.dto.ts:19",{"_index":445,"title":{},"body":{"classes/CreateMultipleSelectDto.html":{}}}],["select.dto.ts:25",{"_index":448,"title":{},"body":{"classes/CreateMultipleSelectDto.html":{}}}],["select.dto.ts:29",{"_index":447,"title":{},"body":{"classes/CreateMultipleSelectDto.html":{}}}],["select.dto.ts:35",{"_index":450,"title":{},"body":{"classes/CreateMultipleSelectDto.html":{}}}],["select.dto.ts:37",{"_index":451,"title":{},"body":{"classes/CreateMultipleSelectDto.html":{}}}],["select.dto.ts:9",{"_index":449,"title":{},"body":{"classes/CreateMultipleSelectDto.html":{}}}],["select.entity",{"_index":1148,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["select.entity.ts",{"_index":946,"title":{},"body":{"classes/MultipleSelectEntity.html":{},"coverage.html":{}}}],["select.entity.ts:10",{"_index":947,"title":{},"body":{"classes/MultipleSelectEntity.html":{}}}],["select.entity.ts:11",{"_index":952,"title":{},"body":{"classes/MultipleSelectEntity.html":{}}}],["select.entity.ts:5",{"_index":949,"title":{},"body":{"classes/MultipleSelectEntity.html":{}}}],["select.entity.ts:6",{"_index":951,"title":{},"body":{"classes/MultipleSelectEntity.html":{}}}],["select.entity.ts:7",{"_index":953,"title":{},"body":{"classes/MultipleSelectEntity.html":{}}}],["select.entity.ts:8",{"_index":948,"title":{},"body":{"classes/MultipleSelectEntity.html":{}}}],["select.entity.ts:9",{"_index":950,"title":{},"body":{"classes/MultipleSelectEntity.html":{}}}],["select/dto/create",{"_index":443,"title":{},"body":{"classes/CreateMultipleSelectDto.html":{},"coverage.html":{}}}],["select/dto/update",{"_index":1312,"title":{},"body":{"classes/UpdateMultipleSelectDto.html":{},"coverage.html":{}}}],["select/entities/multiple",{"_index":945,"title":{},"body":{"classes/MultipleSelectEntity.html":{},"classes/QuestionEntity.html":{},"coverage.html":{}}}],["send",{"_index":931,"title":{},"body":{"injectables/MailService.html":{}}}],["sendcookie",{"_index":59,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["sendcookie(res",{"_index":75,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["sendverificationmail",{"_index":900,"title":{},"body":{"injectables/MailService.html":{}}}],["sendverificationmail(to",{"_index":904,"title":{},"body":{"injectables/MailService.html":{}}}],["sent",{"_index":974,"title":{},"body":{"controllers/OtpController.html":{}}}],["server",{"_index":1488,"title":{},"body":{"index.html":{}}}],["session",{"_index":380,"title":{},"body":{"modules/AuthModule.html":{}}}],["set",{"_index":1240,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["set(key",{"_index":1247,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["setmetadata('role",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared/dto/query.dto",{"_index":1112,"title":{},"body":{"classes/QueryExamDto.html":{}}}],["shared/filter/prisma.filter",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/middleware/log.middleware",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/prisma/prisma.service",{"_index":1387,"title":{},"body":{"injectables/UsersService.html":{}}}],["shared/redis",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{}}}],["shared/role/role.decorator",{"_index":1358,"title":{},"body":{"controllers/UsersController.html":{}}}],["shared/role/role.gaurd",{"_index":1373,"title":{},"body":{"modules/UsersModule.html":{}}}],["short",{"_index":466,"title":{},"body":{"classes/CreateShortAnswerDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"classes/UpdateShortAnswerDto.html":{},"coverage.html":{}}}],["shortanswer",{"_index":555,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{}}}],["shortanswerentity",{"_index":572,"title":{"classes/ShortAnswerEntity.html":{}},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{},"classes/ShortAnswerEntity.html":{},"coverage.html":{}}}],["side",{"_index":1489,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":49,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/RefreshTokenModule.html":{}}}],["size",{"_index":856,"title":{},"body":{"injectables/IsValidPos.html":{}}}],["skip",{"_index":687,"title":{},"body":{"injectables/ExamsService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"injectables/UsersService.html":{}}}],["smtp_api_host",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["smtp_api_key",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["smtp_api_user",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["smtp_mail_from",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["something",{"_index":1047,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["sort",{"_index":693,"title":{},"body":{"injectables/ExamsService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"injectables/UsersService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"modules/ExamsModule.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleGaurd.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"modules/QuestionsModule.html":{},"injectables/QuestionsService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateShortAnswerDto.html":{},"classes/UpdateTagDto.html":{},"classes/UpdateTrueFalseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{},"index.html":{}}}],["special",{"_index":525,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["sponsors",{"_index":1516,"title":{},"body":{"index.html":{}}}],["src/.../auth.gaurd.ts",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1479,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.decorator.ts",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:109",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/access",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/ExamsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:50",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:59",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":365,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/decorator/auth.gaurd",{"_index":633,"title":{},"body":{"controllers/ExamsController.html":{}}}],["src/auth/decorator/auth.gaurd.ts",{"_index":1416,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/credential",{"_index":511,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"coverage.html":{}}}],["src/auth/dto/oauth",{"_index":1305,"title":{},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/verify",{"_index":1406,"title":{},"body":{"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":1012,"title":{},"body":{"classes/Payload.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts:4",{"_index":1015,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/entities/auth.entity.ts:5",{"_index":1013,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/entities/auth.entity.ts:6",{"_index":1014,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/google/google.controller.ts",{"_index":730,"title":{},"body":{"controllers/GoogleController.html":{},"coverage.html":{}}}],["src/auth/google/google.controller.ts:21",{"_index":738,"title":{},"body":{"controllers/GoogleController.html":{}}}],["src/auth/google/google.controller.ts:26",{"_index":746,"title":{},"body":{"controllers/GoogleController.html":{}}}],["src/auth/google/google.controller.ts:40",{"_index":742,"title":{},"body":{"controllers/GoogleController.html":{}}}],["src/auth/google/google.gaurd.ts",{"_index":768,"title":{},"body":{"injectables/GoogleGaurd.html":{},"coverage.html":{}}}],["src/auth/google/google.service.ts",{"_index":770,"title":{},"body":{"injectables/GoogleService.html":{},"coverage.html":{}}}],["src/auth/google/google.service.ts:10",{"_index":774,"title":{},"body":{"injectables/GoogleService.html":{}}}],["src/auth/google/google.service.ts:25",{"_index":776,"title":{},"body":{"injectables/GoogleService.html":{}}}],["src/auth/google/google.service.ts:46",{"_index":779,"title":{},"body":{"injectables/GoogleService.html":{}}}],["src/auth/google/google.strategy.ts",{"_index":805,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/google/google.strategy.ts:19",{"_index":811,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/google/google.strategy.ts:8",{"_index":806,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/otp/otp.controller.ts",{"_index":954,"title":{},"body":{"controllers/OtpController.html":{},"coverage.html":{}}}],["src/auth/otp/otp.controller.ts:22",{"_index":960,"title":{},"body":{"controllers/OtpController.html":{}}}],["src/auth/otp/otp.controller.ts:32",{"_index":964,"title":{},"body":{"controllers/OtpController.html":{}}}],["src/auth/otp/otp.module.ts",{"_index":984,"title":{},"body":{"modules/OtpModule.html":{}}}],["src/auth/otp/otp.service.ts",{"_index":985,"title":{},"body":{"injectables/OtpService.html":{},"coverage.html":{}}}],["src/auth/otp/otp.service.ts:13",{"_index":992,"title":{},"body":{"injectables/OtpService.html":{}}}],["src/auth/otp/otp.service.ts:16",{"_index":990,"title":{},"body":{"injectables/OtpService.html":{}}}],["src/auth/otp/otp.service.ts:23",{"_index":993,"title":{},"body":{"injectables/OtpService.html":{}}}],["src/auth/otp/otp.service.ts:7",{"_index":989,"title":{},"body":{"injectables/OtpService.html":{}}}],["src/auth/refresh",{"_index":1255,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/exams/dto/create",{"_index":383,"title":{},"body":{"classes/CreateExamDto.html":{},"coverage.html":{}}}],["src/exams/dto/query",{"_index":1100,"title":{},"body":{"classes/QueryExamDto.html":{},"coverage.html":{}}}],["src/exams/dto/update",{"_index":1306,"title":{},"body":{"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["src/exams/entities/exam.entity.ts",{"_index":549,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"coverage.html":{}}}],["src/exams/entities/exam.entity.ts:10",{"_index":595,"title":{},"body":{"classes/ExamEntity.html":{}}}],["src/exams/entities/exam.entity.ts:11",{"_index":597,"title":{},"body":{"classes/ExamEntity.html":{}}}],["src/exams/entities/exam.entity.ts:12",{"_index":594,"title":{},"body":{"classes/ExamEntity.html":{}}}],["src/exams/entities/exam.entity.ts:13",{"_index":592,"title":{},"body":{"classes/ExamEntity.html":{}}}],["src/exams/entities/exam.entity.ts:14",{"_index":598,"title":{},"body":{"classes/ExamEntity.html":{}}}],["src/exams/entities/exam.entity.ts:18",{"_index":593,"title":{},"body":{"classes/ExamEntity.html":{}}}],["src/exams/entities/exam.entity.ts:22",{"_index":596,"title":{},"body":{"classes/ExamEntity.html":{}}}],["src/exams/entities/exam.entity.ts:26",{"_index":591,"title":{},"body":{"classes/ExamEntity.html":{}}}],["src/exams/entities/exam.entity.ts:34",{"_index":567,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["src/exams/entities/exam.entity.ts:35",{"_index":571,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["src/exams/entities/exam.entity.ts:36",{"_index":566,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["src/exams/entities/exam.entity.ts:37",{"_index":563,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["src/exams/entities/exam.entity.ts:38",{"_index":576,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["src/exams/entities/exam.entity.ts:42",{"_index":565,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["src/exams/entities/exam.entity.ts:46",{"_index":568,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["src/exams/entities/exam.entity.ts:53",{"_index":578,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["src/exams/entities/exam.entity.ts:55",{"_index":575,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["src/exams/entities/exam.entity.ts:56",{"_index":570,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["src/exams/entities/exam.entity.ts:57",{"_index":573,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["src/exams/entities/exam.entity.ts:58",{"_index":561,"title":{},"body":{"classes/EntityWithQuestions.html":{}}}],["src/exams/exams.controller.ts",{"_index":600,"title":{},"body":{"controllers/ExamsController.html":{},"coverage.html":{}}}],["src/exams/exams.controller.ts:20",{"_index":608,"title":{},"body":{"controllers/ExamsController.html":{}}}],["src/exams/exams.controller.ts:25",{"_index":611,"title":{},"body":{"controllers/ExamsController.html":{}}}],["src/exams/exams.controller.ts:30",{"_index":616,"title":{},"body":{"controllers/ExamsController.html":{}}}],["src/exams/exams.controller.ts:37",{"_index":624,"title":{},"body":{"controllers/ExamsController.html":{}}}],["src/exams/exams.controller.ts:44",{"_index":620,"title":{},"body":{"controllers/ExamsController.html":{}}}],["src/exams/exams.module.ts",{"_index":657,"title":{},"body":{"modules/ExamsModule.html":{}}}],["src/exams/exams.service.ts",{"_index":660,"title":{},"body":{"injectables/ExamsService.html":{},"coverage.html":{}}}],["src/exams/exams.service.ts:111",{"_index":672,"title":{},"body":{"injectables/ExamsService.html":{}}}],["src/exams/exams.service.ts:14",{"_index":665,"title":{},"body":{"injectables/ExamsService.html":{}}}],["src/exams/exams.service.ts:20",{"_index":666,"title":{},"body":{"injectables/ExamsService.html":{}}}],["src/exams/exams.service.ts:32",{"_index":668,"title":{},"body":{"injectables/ExamsService.html":{}}}],["src/exams/exams.service.ts:67",{"_index":670,"title":{},"body":{"injectables/ExamsService.html":{}}}],["src/exams/exams.service.ts:89",{"_index":674,"title":{},"body":{"injectables/ExamsService.html":{}}}],["src/exams/exams.service.ts:97",{"_index":673,"title":{},"body":{"injectables/ExamsService.html":{}}}],["src/main.ts",{"_index":1424,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/questions/dto/create",{"_index":427,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"coverage.html":{}}}],["src/questions/dto/query",{"_index":1114,"title":{},"body":{"classes/QueryQuestionDto.html":{},"coverage.html":{}}}],["src/questions/dto/update",{"_index":1315,"title":{},"body":{"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["src/questions/entities/question.entity",{"_index":679,"title":{},"body":{"injectables/ExamsService.html":{}}}],["src/questions/entities/question.entity.ts",{"_index":1125,"title":{},"body":{"classes/QuestionEntity.html":{},"coverage.html":{}}}],["src/questions/entities/question.entity.ts:11",{"_index":1136,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:15",{"_index":1135,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:16",{"_index":1139,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:17",{"_index":1134,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:20",{"_index":1141,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:22",{"_index":1138,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:23",{"_index":1131,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:25",{"_index":1132,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:26",{"_index":1142,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:30",{"_index":1133,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:33",{"_index":1137,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:37",{"_index":1130,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:44",{"_index":1145,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:55",{"_index":1143,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:68",{"_index":1144,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/entities/question.entity.ts:80",{"_index":1146,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/questions/multiple",{"_index":396,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/UpdateMultipleChoiceDto.html":{},"classes/UpdateMultipleSelectDto.html":{},"coverage.html":{}}}],["src/questions/questions.controller.ts",{"_index":1153,"title":{},"body":{"controllers/QuestionsController.html":{},"coverage.html":{}}}],["src/questions/questions.controller.ts:17",{"_index":1161,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["src/questions/questions.controller.ts:22",{"_index":1170,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["src/questions/questions.controller.ts:28",{"_index":1167,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["src/questions/questions.controller.ts:33",{"_index":1164,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["src/questions/questions.controller.ts:39",{"_index":1171,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["src/questions/questions.controller.ts:44",{"_index":1176,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["src/questions/questions.controller.ts:49",{"_index":1173,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["src/questions/questions.module.ts",{"_index":1200,"title":{},"body":{"modules/QuestionsModule.html":{}}}],["src/questions/questions.service.ts",{"_index":1202,"title":{},"body":{"injectables/QuestionsService.html":{},"coverage.html":{}}}],["src/questions/questions.service.ts:15",{"_index":1205,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["src/questions/questions.service.ts:36",{"_index":1206,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["src/questions/questions.service.ts:44",{"_index":1212,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["src/questions/questions.service.ts:63",{"_index":1210,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["src/questions/questions.service.ts:84",{"_index":1208,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["src/questions/questions.service.ts:9",{"_index":1203,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["src/questions/short",{"_index":464,"title":{},"body":{"classes/CreateShortAnswerDto.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/ShortAnswerEntity.html":{},"classes/UpdateShortAnswerDto.html":{},"coverage.html":{}}}],["src/questions/tags/dto/create",{"_index":477,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/questions/tags/dto/update",{"_index":1321,"title":{},"body":{"classes/UpdateTagDto.html":{},"coverage.html":{}}}],["src/questions/tags/entities/tag.entity",{"_index":943,"title":{},"body":{"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/ShortAnswerEntity.html":{},"classes/TrueFalseEntity.html":{}}}],["src/questions/tags/entities/tag.entity.ts",{"_index":1292,"title":{},"body":{"classes/TagEntity.html":{},"coverage.html":{}}}],["src/questions/tags/entities/tag.entity.ts:5",{"_index":1295,"title":{},"body":{"classes/TagEntity.html":{}}}],["src/questions/tags/entities/tag.entity.ts:6",{"_index":1296,"title":{},"body":{"classes/TagEntity.html":{}}}],["src/questions/tags/entities/tag.entity.ts:7",{"_index":1294,"title":{},"body":{"classes/TagEntity.html":{}}}],["src/questions/tags/entities/tag.entity.ts:8",{"_index":1293,"title":{},"body":{"classes/TagEntity.html":{}}}],["src/questions/true",{"_index":480,"title":{},"body":{"classes/CreateTrueFalseDto.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UpdateTrueFalseDto.html":{},"coverage.html":{}}}],["src/shared/decorator/is",{"_index":430,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"coverage.html":{}}}],["src/shared/dto/param.dto",{"_index":636,"title":{},"body":{"controllers/ExamsController.html":{},"controllers/QuestionsController.html":{}}}],["src/shared/dto/param.dto.ts",{"_index":1007,"title":{},"body":{"classes/ParamDto.html":{},"coverage.html":{}}}],["src/shared/dto/param.dto.ts:8",{"_index":1009,"title":{},"body":{"classes/ParamDto.html":{}}}],["src/shared/dto/query.dto",{"_index":635,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"controllers/QuestionsController.html":{},"controllers/UsersController.html":{}}}],["src/shared/dto/query.dto.ts",{"_index":1066,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"coverage.html":{}}}],["src/shared/dto/query.dto.ts:11",{"_index":1093,"title":{},"body":{"classes/QueryDto.html":{}}}],["src/shared/dto/query.dto.ts:17",{"_index":1097,"title":{},"body":{"classes/QueryDto.html":{}}}],["src/shared/dto/query.dto.ts:23",{"_index":1095,"title":{},"body":{"classes/QueryDto.html":{}}}],["src/shared/dto/query.dto.ts:28",{"_index":1091,"title":{},"body":{"classes/QueryDto.html":{}}}],["src/shared/dto/query.dto.ts:32",{"_index":1089,"title":{},"body":{"classes/QueryDto.html":{}}}],["src/shared/dto/query.dto.ts:37",{"_index":1099,"title":{},"body":{"classes/QueryDto.html":{}}}],["src/shared/dto/query.dto.ts:43",{"_index":1068,"title":{},"body":{"classes/QueryDeleteDto.html":{}}}],["src/shared/dto/validation",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"classes/ValidationErrorDto.html":{},"coverage.html":{}}}],["src/shared/filter/prisma.filter.ts",{"_index":1016,"title":{},"body":{"classes/PrismaExceptionFilter.html":{},"coverage.html":{}}}],["src/shared/filter/prisma.filter.ts:9",{"_index":1021,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["src/shared/mail/mail.module",{"_index":370,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/shared/mail/mail.module.ts",{"_index":881,"title":{},"body":{"modules/MailModule.html":{}}}],["src/shared/mail/mail.service",{"_index":965,"title":{},"body":{"controllers/OtpController.html":{}}}],["src/shared/mail/mail.service.ts",{"_index":898,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/shared/mail/mail.service.ts:13",{"_index":906,"title":{},"body":{"injectables/MailService.html":{}}}],["src/shared/mail/mail.service.ts:7",{"_index":903,"title":{},"body":{"injectables/MailService.html":{}}}],["src/shared/middleware/log.middleware.ts",{"_index":857,"title":{},"body":{"injectables/LogMiddleware.html":{},"coverage.html":{}}}],["src/shared/middleware/log.middleware.ts:6",{"_index":862,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["src/shared/prisma/prisma.module",{"_index":659,"title":{},"body":{"modules/ExamsModule.html":{},"modules/QuestionsModule.html":{},"modules/UsersModule.html":{}}}],["src/shared/prisma/prisma.module.ts",{"_index":1053,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/shared/prisma/prisma.service",{"_index":681,"title":{},"body":{"injectables/ExamsService.html":{},"injectables/QuestionsService.html":{}}}],["src/shared/prisma/prisma.service.ts",{"_index":1055,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/shared/prisma/prisma.service.ts:10",{"_index":1061,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/shared/prisma/prisma.service.ts:6",{"_index":1062,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/shared/redis",{"_index":1229,"title":{},"body":{"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"coverage.html":{}}}],["src/shared/role/role.decorator.ts",{"_index":1429,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/role/role.gaurd.ts",{"_index":1268,"title":{},"body":{"guards/RoleGaurd.html":{},"coverage.html":{}}}],["src/shared/role/role.gaurd.ts:13",{"_index":1275,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["src/shared/role/role.gaurd.ts:7",{"_index":1272,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["src/users/dto/create",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/users/dto/query.user.dto.ts",{"_index":1119,"title":{},"body":{"classes/QueryUserDto.html":{},"coverage.html":{}}}],["src/users/dto/query.user.dto.ts:14",{"_index":1122,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["src/users/dto/query.user.dto.ts:9",{"_index":1124,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["src/users/dto/update",{"_index":1328,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":82,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/GoogleService.html":{},"injectables/RefreshTokenService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1330,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:10",{"_index":1337,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:11",{"_index":1340,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:12",{"_index":1339,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:14",{"_index":1336,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:18",{"_index":1341,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:21",{"_index":1343,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":1334,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":1332,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:36",{"_index":1345,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:7",{"_index":1338,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:8",{"_index":1335,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.controller.ts",{"_index":1351,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:18",{"_index":1353,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:23",{"_index":1354,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:28",{"_index":1355,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1371,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{}}}],["src/users/users.service.ts",{"_index":1374,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":1376,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1384,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":1378,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:30",{"_index":1382,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":1379,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":1386,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:70",{"_index":1385,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1500,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1503,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1504,"title":{},"body":{"index.html":{}}}],["started",{"_index":1481,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1493,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1412,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1442,"title":{},"body":{"dependencies.html":{}}}],["status",{"_index":874,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["statuscode",{"_index":1033,"title":{},"body":{"classes/PrismaExceptionFilter.html":{},"classes/ValidationErrorDto.html":{}}}],["stay",{"_index":1525,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":114,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["string",{"_index":79,"title":{},"body":{"injectables/AccessTokenService.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/Payload.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{}}}],["sub",{"_index":99,"title":{},"body":{"injectables/AccessTokenService.html":{},"controllers/AuthController.html":{},"classes/Payload.html":{},"injectables/RefreshTokenService.html":{}}}],["subject",{"_index":912,"title":{},"body":{"injectables/MailService.html":{}}}],["successfully",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OtpController.html":{}}}],["super",{"_index":124,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["support",{"_index":1517,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1536,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1029,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["t",{"_index":853,"title":{},"body":{"injectables/IsValidPos.html":{}}}],["table",{"_index":1433,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1432,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":581,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QueryQuestionDto.html":{},"injectables/QuestionsService.html":{},"classes/TagEntity.html":{}}}],["tag.dto",{"_index":1322,"title":{},"body":{"classes/UpdateTagDto.html":{}}}],["tag.dto.ts",{"_index":478,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/UpdateTagDto.html":{},"coverage.html":{}}}],["tagentity",{"_index":939,"title":{"classes/TagEntity.html":{}},"body":{"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/QuestionEntity.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"coverage.html":{}}}],["tags",{"_index":404,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"injectables/ExamsService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionsService.html":{},"classes/ShortAnswerEntity.html":{},"classes/TrueFalseEntity.html":{}}}],["tags.map(tag",{"_index":1215,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["tags/entities/tag.entity",{"_index":1147,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["take",{"_index":688,"title":{},"body":{"injectables/ExamsService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"injectables/UsersService.html":{}}}],["test",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["test:covsupport",{"_index":1509,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1508,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1506,"title":{},"body":{"index.html":{}}}],["text",{"_index":915,"title":{},"body":{"injectables/MailService.html":{}}}],["thanks",{"_index":1515,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":1063,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1064,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._date(value",{"_index":847,"title":{},"body":{"injectables/IsGte.html":{}}}],["this._number(value",{"_index":845,"title":{},"body":{"injectables/IsGte.html":{}}}],["this.accesstokenservice.clearcookie(response",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accesstokenservice.sendcookie(res",{"_index":763,"title":{},"body":{"controllers/GoogleController.html":{}}}],["this.accesstokenservice.sendcookie(response",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.answer",{"_index":440,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{}}}],["this.answers",{"_index":453,"title":{},"body":{"classes/CreateMultipleSelectDto.html":{},"classes/QuestionEntity.html":{}}}],["this.answers[0",{"_index":1151,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["this.cache.get(key",{"_index":1253,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["this.cache.set(key",{"_index":1254,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["this.client",{"_index":785,"title":{},"body":{"injectables/GoogleService.html":{}}}],["this.client.setcredentials",{"_index":789,"title":{},"body":{"injectables/GoogleService.html":{}}}],["this.client.verifyidtoken",{"_index":800,"title":{},"body":{"injectables/GoogleService.html":{}}}],["this.config.getorthrow('salt",{"_index":1391,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.configserivce.getorthrow('prisma_delete_after",{"_index":726,"title":{},"body":{"injectables/ExamsService.html":{}}}],["this.configservice.get(\"google_client_id",{"_index":802,"title":{},"body":{"injectables/GoogleService.html":{}}}],["this.configservice.getorthrow('google_provider_client_id",{"_index":787,"title":{},"body":{"injectables/GoogleService.html":{}}}],["this.configservice.getorthrow('google_provider_client_secret",{"_index":788,"title":{},"body":{"injectables/GoogleService.html":{}}}],["this.configservice.getorthrow('otp_expiration_time",{"_index":909,"title":{},"body":{"injectables/MailService.html":{},"injectables/OtpService.html":{}}}],["this.configservice.getorthrow('permanetly_delete_after",{"_index":1221,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["this.configservice.getorthrow('salt",{"_index":997,"title":{},"body":{"injectables/OtpService.html":{}}}],["this.cookiename",{"_index":86,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["this.cookieoptions",{"_index":94,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["this.description",{"_index":435,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/QuestionEntity.html":{}}}],["this.examid",{"_index":441,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{}}}],["this.examsservice.create(userid",{"_index":641,"title":{},"body":{"controllers/ExamsController.html":{}}}],["this.examsservice.findall(query",{"_index":643,"title":{},"body":{"controllers/ExamsController.html":{}}}],["this.examsservice.findone(+id",{"_index":645,"title":{},"body":{"controllers/ExamsController.html":{}}}],["this.examsservice.remove(userid",{"_index":652,"title":{},"body":{"controllers/ExamsController.html":{}}}],["this.examsservice.update(userid",{"_index":648,"title":{},"body":{"controllers/ExamsController.html":{}}}],["this.googleauthservice.getuserdetails(req.user.accesstoken",{"_index":760,"title":{},"body":{"controllers/GoogleController.html":{}}}],["this.googleauthservice.getuserdetailsfromidtoken(idtoken",{"_index":767,"title":{},"body":{"controllers/GoogleController.html":{}}}],["this.hashotp(otp",{"_index":1002,"title":{},"body":{"injectables/OtpService.html":{}}}],["this.hashpassword(data.password",{"_index":1393,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.id",{"_index":1149,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["this.jwtservice.sign",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.sign(data",{"_index":103,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["this.mailservice.sendmail",{"_index":911,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendverificationmail(user.email",{"_index":973,"title":{},"body":{"controllers/OtpController.html":{}}}],["this.options",{"_index":436,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/QuestionEntity.html":{}}}],["this.options[this.answers[0",{"_index":1150,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["this.otpservice.generateotp(user.id",{"_index":972,"title":{},"body":{"controllers/OtpController.html":{}}}],["this.otpservice.verifyotp(id",{"_index":978,"title":{},"body":{"controllers/OtpController.html":{}}}],["this.password",{"_index":1349,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.prisma.exam.create",{"_index":684,"title":{},"body":{"injectables/ExamsService.html":{}}}],["this.prisma.exam.delete",{"_index":725,"title":{},"body":{"injectables/ExamsService.html":{}}}],["this.prisma.exam.deletemany",{"_index":727,"title":{},"body":{"injectables/ExamsService.html":{}}}],["this.prisma.exam.findmany",{"_index":696,"title":{},"body":{"injectables/ExamsService.html":{}}}],["this.prisma.exam.findunique",{"_index":718,"title":{},"body":{"injectables/ExamsService.html":{}}}],["this.prisma.exam.finduniqueorthrow",{"_index":699,"title":{},"body":{"injectables/ExamsService.html":{}}}],["this.prisma.exam.update",{"_index":723,"title":{},"body":{"injectables/ExamsService.html":{}}}],["this.prisma.question.create",{"_index":1213,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["this.prisma.question.delete",{"_index":1218,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["this.prisma.question.deletemany",{"_index":1223,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["this.prisma.question.findfirstorthrow",{"_index":1216,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["this.prisma.question.update",{"_index":1217,"title":{},"body":{"injectables/QuestionsService.html":{}}}],["this.prisma.user.create",{"_index":1394,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.delete",{"_index":1400,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findmany",{"_index":1397,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":1396,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":1399,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.question",{"_index":434,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/QuestionEntity.html":{}}}],["this.questionsservice.create(createquestiondto.toquestion",{"_index":1186,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["this.questionsservice.findone(id",{"_index":1192,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["this.questionsservice.remove(id",{"_index":1196,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["this.questionsservice.update(id",{"_index":1194,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["this.redisservice.get(`otp:${id",{"_index":1004,"title":{},"body":{"injectables/OtpService.html":{}}}],["this.redisservice.set(`otp:${id",{"_index":1003,"title":{},"body":{"injectables/OtpService.html":{}}}],["this.reflector.getallandoverride('role",{"_index":1279,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["this.refreshtokenservice.clearcookie(response",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.refreshtokenservice.sendcookie(res",{"_index":764,"title":{},"body":{"controllers/GoogleController.html":{}}}],["this.refreshtokenservice.sendcookie(response",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.tags",{"_index":437,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/QuestionEntity.html":{}}}],["this.userservice.create(body",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.create(userdata",{"_index":762,"title":{},"body":{"controllers/GoogleController.html":{}}}],["this.userservice.findone",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{}}}],["this.userservice.findone(user.id",{"_index":1283,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["this.usersservice.findall(query",{"_index":1362,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone",{"_index":1364,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":1366,"title":{},"body":{"controllers/UsersController.html":{}}}],["throttle_limit",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["throttle_ttl",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlerguard",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ExamsService.html":{},"injectables/GoogleService.html":{},"injectables/MailService.html":{},"controllers/OtpController.html":{}}}],["ticket",{"_index":799,"title":{},"body":{"injectables/GoogleService.html":{}}}],["ticket.getpayload",{"_index":803,"title":{},"body":{"injectables/GoogleService.html":{}}}],["token",{"_index":102,"title":{},"body":{"injectables/AccessTokenService.html":{},"controllers/AuthController.html":{},"injectables/GoogleService.html":{},"injectables/RefreshTokenService.html":{}}}],["token.gaurd",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"controllers/OtpController.html":{},"controllers/UsersController.html":{}}}],["token.gaurd.ts",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["token.module",{"_index":371,"title":{},"body":{"modules/AuthModule.html":{}}}],["token.module.ts",{"_index":32,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/RefreshTokenModule.html":{}}}],["token.service",{"_index":41,"title":{},"body":{"modules/AccessTokenModule.html":{},"controllers/AuthController.html":{},"controllers/GoogleController.html":{},"modules/RefreshTokenModule.html":{}}}],["token.service.ts",{"_index":52,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["token.service.ts:10",{"_index":80,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["token.service.ts:11",{"_index":64,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["token.service.ts:30",{"_index":78,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["token.service.ts:40",{"_index":71,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/RefreshTokenService.html":{}}}],["token.strategy",{"_index":42,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/RefreshTokenModule.html":{}}}],["token.strategy.ts",{"_index":106,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:20",{"_index":1264,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["token.strategy.ts:21",{"_index":111,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:9",{"_index":109,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AccessTokenModule.html":{},"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExamsController.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["token/refresh",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GoogleController.html":{},"injectables/RefreshTokenGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["tomultiplechoice",{"_index":1126,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["tomultipleselect",{"_index":1127,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["toquestion",{"_index":406,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{}}}],["toshortanswer",{"_index":1128,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["totruefalse",{"_index":1129,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["touch",{"_index":1526,"title":{},"body":{"index.html":{}}}],["transform",{"_index":253,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateExamDto.html":{},"classes/CredentialLogin.html":{},"classes/VerifyEmailDto.html":{}}}],["transformer",{"_index":389,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{},"classes/VerifyEmailDto.html":{},"dependencies.html":{}}}],["transformoptions",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["transport",{"_index":887,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"modules/MailModule.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"guards/RoleGaurd.html":{},"classes/UpdateTrueFalseDto.html":{},"coverage.html":{}}}],["truefalse",{"_index":556,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{}}}],["truefalseentity",{"_index":574,"title":{"classes/TrueFalseEntity.html":{}},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QuestionEntity.html":{},"classes/TrueFalseEntity.html":{},"coverage.html":{}}}],["true})@isarray()@type(undefined",{"_index":415,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{}}}],["try",{"_index":910,"title":{},"body":{"injectables/MailService.html":{}}}],["trying",{"_index":1035,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["ttl",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{}}}],["twitter",{"_index":1532,"title":{},"body":{"index.html":{}}}],["type",{"_index":67,"title":{},"body":{"injectables/AccessTokenService.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"injectables/LogMiddleware.html":{},"injectables/MailService.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"classes/ParamDto.html":{},"classes/Payload.html":{},"classes/PrismaExceptionFilter.html":{},"injectables/PrismaService.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RoleGaurd.html":{},"classes/ShortAnswerEntity.html":{},"classes/TagEntity.html":{},"classes/TrueFalseEntity.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationErrorDto.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["type(undefined",{"_index":1140,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["typeof",{"_index":844,"title":{},"body":{"injectables/IsGte.html":{}}}],["typescript",{"_index":1492,"title":{},"body":{"index.html":{}}}],["unable",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":76,"title":{},"body":{"injectables/AccessTokenService.html":{},"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/RefreshTokenService.html":{},"classes/UserEntity.html":{}}}],["unit",{"_index":1505,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"controllers/OtpController.html":{},"injectables/OtpService.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"guards/RoleGaurd.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1544,"title":{},"body":{"properties.html":{}}}],["update",{"_index":605,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"injectables/UsersService.html":{}}}],["update(@authuser",{"_index":647,"title":{},"body":{"controllers/ExamsController.html":{}}}],["update(@param",{"_index":1193,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["update(id",{"_index":1211,"title":{},"body":{"injectables/QuestionsService.html":{},"injectables/UsersService.html":{}}}],["update(undefined",{"_index":1174,"title":{},"body":{"controllers/QuestionsController.html":{}}}],["update(userid",{"_index":621,"title":{},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{}}}],["updateauthdto",{"_index":1304,"title":{"classes/UpdateAuthDto.html":{}},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":557,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"classes/TagEntity.html":{},"classes/UserEntity.html":{}}}],["updateexamdto",{"_index":622,"title":{"classes/UpdateExamDto.html":{}},"body":{"controllers/ExamsController.html":{},"injectables/ExamsService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["updatemultiplechoicedto",{"_index":1308,"title":{"classes/UpdateMultipleChoiceDto.html":{}},"body":{"classes/UpdateMultipleChoiceDto.html":{},"coverage.html":{}}}],["updatemultipleselectdto",{"_index":1311,"title":{"classes/UpdateMultipleSelectDto.html":{}},"body":{"classes/UpdateMultipleSelectDto.html":{},"coverage.html":{}}}],["updatequestiondto",{"_index":1175,"title":{"classes/UpdateQuestionDto.html":{}},"body":{"controllers/QuestionsController.html":{},"injectables/QuestionsService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["updateshortanswerdto",{"_index":1317,"title":{"classes/UpdateShortAnswerDto.html":{}},"body":{"classes/UpdateShortAnswerDto.html":{},"coverage.html":{}}}],["updatetagdto",{"_index":1320,"title":{"classes/UpdateTagDto.html":{}},"body":{"classes/UpdateTagDto.html":{},"coverage.html":{}}}],["updatetruefalsedto",{"_index":1324,"title":{"classes/UpdateTrueFalseDto.html":{}},"body":{"classes/UpdateTrueFalseDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1327,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["upper",{"_index":527,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["use",{"_index":858,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["use(req",{"_index":859,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["useclass",{"_index":250,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCacheModule.html":{},"modules/UsersModule.html":{}}}],["usefactory",{"_index":46,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/AppModule.html":{},"modules/MailModule.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{}}}],["useguards",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamsController.html":{},"controllers/OtpController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@apicookieauth()@post('generate",{"_index":959,"title":{},"body":{"controllers/OtpController.html":{}}}],["useguards(googlegaurd",{"_index":756,"title":{},"body":{"controllers/GoogleController.html":{}}}],["useguards(googlegaurd)@get('callback",{"_index":745,"title":{},"body":{"controllers/GoogleController.html":{}}}],["useguards(refreshtokenguard",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/ExamsService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleService.html":{},"modules/MailModule.html":{},"controllers/OtpController.html":{},"guards/RoleGaurd.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["user.comparepassword(password",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto",{"_index":784,"title":{},"body":{"injectables/GoogleService.html":{},"injectables/GoogleStrategy.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":497,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":508,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":502,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:5",{"_index":507,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":504,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":506,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":505,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":503,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["user?.role",{"_index":1284,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["userdata",{"_index":759,"title":{},"body":{"controllers/GoogleController.html":{}}}],["userdata.email",{"_index":761,"title":{},"body":{"controllers/GoogleController.html":{}}}],["userentity",{"_index":77,"title":{"classes/UserEntity.html":{}},"body":{"injectables/AccessTokenService.html":{},"injectables/GoogleService.html":{},"injectables/RefreshTokenService.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userentity(user",{"_index":1395,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":558,"title":{},"body":{"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"controllers/ExamsController.html":{},"injectables/ExamsService.html":{}}}],["users",{"_index":1352,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1372,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map(user",{"_index":1398,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":1356,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":1277,"title":{},"body":{"guards/RoleGaurd.html":{}}}],["userscontroller",{"_index":1350,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{},"guards/RoleGaurd.html":{}}}],["usersmodule",{"_index":133,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":307,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/GoogleController.html":{},"controllers/OtpController.html":{},"guards/RoleGaurd.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["v2",{"_index":794,"title":{},"body":{"injectables/GoogleService.html":{}}}],["valid",{"_index":431,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{},"injectables/IsValidPos.html":{},"coverage.html":{}}}],["valid('development",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":107,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/CreateMultipleChoiceDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(accesstoken",{"_index":807,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["validate(isgte",{"_index":1086,"title":{},"body":{"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{}}}],["validate(isvalidpos",{"_index":433,"title":{},"body":{"classes/CreateMultipleChoiceDto.html":{}}}],["validate(payload",{"_index":110,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(value",{"_index":835,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["validationarguments",{"_index":832,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["validationerrordto",{"_index":304,"title":{"classes/ValidationErrorDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ValidationErrorDto.html":{},"coverage.html":{}}}],["validationoptions",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["validationpipe",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["validationschema",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":392,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"classes/ParamDto.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/VerifyEmailDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":837,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["validatorconstraintinterface",{"_index":838,"title":{},"body":{"injectables/IsGte.html":{},"injectables/IsValidPos.html":{}}}],["value",{"_index":393,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateMultipleChoiceDto.html":{},"classes/CreateMultipleSelectDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateShortAnswerDto.html":{},"classes/CreateTrueFalseDto.html":{},"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{},"classes/EntityWithQuestions.html":{},"classes/ExamEntity.html":{},"injectables/IsGte.html":{},"injectables/IsValidPos.html":{},"classes/MultipleChoiceEntity.html":{},"classes/MultipleSelectEntity.html":{},"classes/QueryDeleteDto.html":{},"classes/QueryDto.html":{},"classes/QueryExamDto.html":{},"classes/QueryQuestionDto.html":{},"classes/QueryUserDto.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionsService.html":{},"injectables/RedisCacheService.html":{},"classes/ShortAnswerEntity.html":{},"classes/TrueFalseEntity.html":{},"miscellaneous/variables.html":{}}}],["value'})@isoptional()@isstring",{"_index":1121,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["value.tolowercase",{"_index":544,"title":{},"body":{"classes/CredentialLogin.html":{}}}],["value.touppercase",{"_index":394,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["variable",{"_index":1417,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1545,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verified",{"_index":979,"title":{},"body":{"controllers/OtpController.html":{}}}],["verify",{"_index":923,"title":{},"body":{"injectables/MailService.html":{}}}],["verify_email_url",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["verifyemaildto",{"_index":1405,"title":{"classes/VerifyEmailDto.html":{}},"body":{"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["verifyotp",{"_index":957,"title":{},"body":{"controllers/OtpController.html":{},"injectables/OtpService.html":{}}}],["verifyotp(@authuser",{"_index":976,"title":{},"body":{"controllers/OtpController.html":{}}}],["verifyotp(id",{"_index":961,"title":{},"body":{"controllers/OtpController.html":{},"injectables/OtpService.html":{}}}],["version",{"_index":793,"title":{},"body":{"injectables/GoogleService.html":{},"properties.html":{}}}],["void",{"_index":74,"title":{},"body":{"injectables/AccessTokenService.html":{},"modules/AppModule.html":{},"injectables/LogMiddleware.html":{},"injectables/RefreshTokenService.html":{}}}],["watch",{"_index":1501,"title":{},"body":{"index.html":{}}}],["website",{"_index":1530,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":916,"title":{},"body":{"injectables/MailService.html":{}}}],["went",{"_index":1048,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["whitelist",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["wrong",{"_index":1049,"title":{},"body":{"classes/PrismaExceptionFilter.html":{}}}],["yes",{"_index":1249,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["you'd",{"_index":1520,"title":{},"body":{"index.html":{}}}],["z",{"_index":531,"title":{},"body":{"classes/CredentailRegister.html":{},"classes/CredentialLogin.html":{}}}],["zoom",{"_index":29,"title":{},"body":{"modules/AccessTokenModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExamsModule.html":{},"modules/MailModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/QuestionsModule.html":{},"modules/RedisCacheModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-token/access-token.gaurd.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') { }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccessTokenModule.html":{"url":"modules/AccessTokenModule.html","title":"module - AccessTokenModule","body":"\n                   \n\n\n\n\n    Modules\n    AccessTokenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccessTokenModule\n\n\n\ncluster_AccessTokenModule_exports\n\n\n\ncluster_AccessTokenModule_providers\n\n\n\n\nAccessTokenService \n\nAccessTokenService \n\n\n\nAccessTokenModule\n\nAccessTokenModule\n\nAccessTokenService  -->\n\nAccessTokenModule->AccessTokenService \n\n\n\n\n\nAccessTokenService\n\nAccessTokenService\n\nAccessTokenModule -->\n\nAccessTokenService->AccessTokenModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAccessTokenModule -->\n\nAccessTokenStrategy->AccessTokenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/access-token/access-token.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenService\n                        \n                        \n                            AccessTokenStrategy\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccessTokenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AccessTokenService } from './access-token.service';\nimport { AccessTokenStrategy } from './access-token.strategy';\n\n@Module({\n  providers: [\n    AccessTokenStrategy,\n    AccessTokenService\n  ],\n  imports: [\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (ConfigService: ConfigService) => ({\n        secret: ConfigService.getOrThrow('ACCESS_TOKEN_SECRET'),\n        signOptions: { \n          expiresIn: ConfigService.getOrThrow('ACCESS_TOKEN_EXPIRATION_TIME') \n        },\n      }),\n    }),\n  ],\n  exports: [\n    JwtModule,\n    AccessTokenService\n  ]\n})\nexport class AccessTokenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenService.html":{"url":"injectables/AccessTokenService.html","title":"injectable - AccessTokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-token/access-token.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cookieName\n                            \n                            \n                                cookieOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearCookie\n                            \n                            \n                                sendCookie\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-token/access-token.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearCookie\n                        \n                    \n                \n            \n            \n                \nclearCookie(res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-token/access-token.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendCookie\n                        \n                    \n                \n            \n            \n                \nsendCookie(res: Response, undefined: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-token/access-token.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cookieName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/access-token/access-token.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cookieOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CookieOptions\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/access-token/access-token.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { CookieOptions, Response } from 'express';\nimport { UserEntity } from 'src/users/entities/user.entity';\nimport { Payload } from '../entities/auth.entity';\n\n@Injectable()\nexport class AccessTokenService {\n    cookieName: string;\n    cookieOptions: CookieOptions;\n\n    constructor(\n        private jwtService: JwtService,\n        configService: ConfigService) {\n\n        this.cookieName = configService.getOrThrow('ACCESS_TOKEN_COOKIE_NAME')\n        const httpOnly = configService.getOrThrow('COOKIE_HTTP_ONLY');\n        const domain = configService.getOrThrow('COOKIE_DOMAIN');\n        const maxAge = configService.getOrThrow('ACCESS_TOKEN_EXPIRATION_TIME');\n        this.cookieOptions = {\n            httpOnly,\n            path: \"/\",\n            maxAge,\n            domain,\n        }\n        console.log( this.cookieOptions);\n    }\n\n    sendCookie(res: Response, { email, id: sub, role }: UserEntity) {\n        const data: Payload = { email, sub, role };\n        const token = this.jwtService.sign(data);\n        console.log( this.cookieName);\n        res.cookie(\n            this.cookieName,\n            token,\n            this.cookieOptions)\n    }\n\n    clearCookie(res: Response) {\n        res.clearCookie(this.cookieName, this.cookieOptions);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-token/access-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-token/access-token.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-token/access-token.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Payload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Payload } from '../entities/auth.entity';\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n   \n    constructor(configService: ConfigService) {\n        const cookieName = configService.getOrThrow('ACCESS_TOKEN_COOKIE_NAME');\n        const secretOrKey = configService.getOrThrow('ACCESS_TOKEN_SECRET');\n        const jwtFromRequest = ExtractJwt.fromExtractors([\n            (request: Request) => request?.cookies?.[cookieName] || null\n        ]);\n\n        super({ jwtFromRequest, secretOrKey });\n    }\n\n    validate(payload: Payload) {\n        return payload;\n    }\n\n  \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExamsModule\n\nExamsModule\n\nAppModule -->\n\nExamsModule->AppModule\n\n\n\n\n\nQuestionsModule\n\nQuestionsModule\n\nAppModule -->\n\nQuestionsModule->AppModule\n\n\n\n\n\nRedisCacheModule\n\nRedisCacheModule\n\nAppModule -->\n\nRedisCacheModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ExamsModule\n                        \n                        \n                            QuestionsModule\n                        \n                        \n                            RedisCacheModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ClassSerializerInterceptor, MiddlewareConsumer, Module, NestModule, ValidationPipe } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport * as Joi from 'joi';\nimport { APP_FILTER, APP_GUARD, APP_INTERCEPTOR, APP_PIPE } from '@nestjs/core';\nimport { PrismaExceptionFilter } from './shared/filter/prisma.filter';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { ExamsModule } from './exams/exams.module';\nimport { QuestionsModule } from './questions/questions.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { RedisCacheModule } from './shared/redis-cache/redis-cache.module';\nimport { LogMiddleware } from './shared/middleware/log.middleware';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        NODE_ENV: Joi.string()\n          .valid('development', 'production', 'test', 'provision')\n          .default('development'),\n        PORT: Joi.number().default(3000),\n        DATABASE_URL: Joi.string().required(),\n        COOKIE_DOMAIN: Joi.string().default('localhost'),\n        COOKIE_HTTP_ONLY : Joi.boolean().default(true),\n\n        FRONTEND_URL: Joi.string().default('http://localhost:4200'),\n        BACKEND_URL: Joi.string().default('http://localhost:3000'),\n\n        SALT: Joi.number().default(10),\n\n        ACCESS_TOKEN_SECRET: Joi.string().required(),\n        ACCESS_TOKEN_EXPIRATION_TIME: Joi.string().default(24 * 60 * 60), // 24 hours\n        REFRESH_TOKEN_SECRET: Joi.string().required(),\n        REFRESH_TOKEN_EXPIRATION_TIME: Joi.string().default(7 * 24 * 60 * 60), // 7 days\n        ACCESS_TOKEN_COOKIE_NAME: Joi.string().default('access_token'),\n        REFRESH_TOKEN_COOKIE_NAME: Joi.string().default('refresh_token'),\n\n        GOOGLE_PROVIDER_ISSUER_URL: Joi.string().default('https://accounts.google.com'),\n        GOOGLE_PROVIDER_CLIENT_SECRET: Joi.string().required(),\n        GOOGLE_PROVIDER_CLIENT_ID: Joi.string().required(),\n        GOOGLE_PROVIDER_CALLBACK_URL: Joi.string().default('http://localhost:3000/auth/google/callback'),\n\n        SMTP_API_KEY: Joi.string().required(),\n        SMTP_API_HOST: Joi.string().default(\"smtp.sendgrid.net\"),\n        SMTP_API_USER: Joi.string().default(\"apikey\"),\n        SMTP_MAIL_FROM: Joi.string().required(),\n        THROTTLE_TTL: Joi.number().default(60), // 60 seconds \n        THROTTLE_LIMIT: Joi.number().default(100), // 100 requests\n\n        VERIFY_EMAIL_URL: Joi.string().default('http://localhost:3000/auth/verify-email'),\n\n        REDIS_HOST: Joi.string().default('localhost'),\n        REDIS_PORT: Joi.number().default(6379),\n        REDIS_PASSWORD: Joi.string().required(),\n        REDIS_TTL: Joi.number().default(60), // 60 seconds\n\n        OTP_EXPIRATION_TIME: Joi.number().default(15 * 60 * 60), // 15 minutes\n        OTP_RESEND_TIME: Joi.number().default(60), // 60 seconds\n        PERMANETLY_DELETE_AFTER: Joi.number().default(7 * 24 * 60 * 60), // 7 days\n      }),\n      validationOptions: {\n        allowUnknown: true,\n        abortEarly: true,\n      },\n    }),\n\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        ttl: config.getOrThrow('THROTTLE_TTL'),\n        limit: config.getOrThrow('THROTTLE_LIMIT'),\n      }),\n    }),\n    RedisCacheModule,\n    ScheduleModule.forRoot(),\n\n    UsersModule,\n    AuthModule,\n    ExamsModule,\n    QuestionsModule,\n  ],\n  controllers: [],\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: ClassSerializerInterceptor,\n    }, {\n      provide: APP_FILTER,\n      useClass: PrismaExceptionFilter,\n    }, {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard\n    }, {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe({\n        transform: true,\n        whitelist: true,\n        forbidNonWhitelisted: true,\n        transformOptions: {\n          enableImplicitConversion: true,\n        },\n      }),\n    },\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LogMiddleware).forRoutes('*');\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                credentailLogin\n                            \n                            \n                                    Async\n                                credentailSignUp\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                me\n                            \n                            \n                                    Async\n                                refresh\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        credentailLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    credentailLogin(response: Response, undefined: CredentialLogin)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                CredentialLogin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        credentailSignUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    credentailSignUp(body: CredentailRegister)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@ApiConflictResponse({description: 'Unable to create user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CredentailRegister\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        me\n                        \n                    \n                \n            \n            \n                \nme(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personal-details')@UseGuards(AccessTokenGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(id: number, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('refresh')@ApiCookieAuth()@UseGuards(RefreshTokenGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Res, UseGuards,  HttpException, HttpStatus } from '@nestjs/common';\nimport { ApiBadRequestResponse, ApiConflictResponse, ApiCookieAuth, ApiTags } from '@nestjs/swagger';\nimport { ValidationErrorDto } from 'src/shared/dto/validation-error.dto';\nimport { UsersService } from 'src/users/users.service';\nimport { CredentialLogin } from './dto/credential-login.dto';\nimport { Response } from 'express';\nimport { AccessTokenService } from './access-token/access-token.service';\nimport { RefreshTokenService } from './refresh-token/refresh-token.service';\nimport { AuthUser } from './decorator/auth.gaurd';\nimport { RefreshTokenGuard } from './refresh-token/refresh-token.gaurd';\nimport { AccessTokenGuard } from './access-token/access-token.gaurd';\nimport { JwtService } from '@nestjs/jwt';\nimport { CredentailRegister } from './dto/credential-register.dto';\n\n\n@Controller('auth')\n@ApiTags('auth')\n@ApiBadRequestResponse({ description: 'Bad request', type: ValidationErrorDto })\nexport class AuthController {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userService: UsersService,\n    private readonly accessTokenService: AccessTokenService,\n    private readonly refreshTokenService: RefreshTokenService) { }\n\n  @Post(\"login\")\n  async credentailLogin(\n    @Res({ passthrough: true }) response: Response,\n    @Body() { email, password }: CredentialLogin) {\n    const user = await this.userService.findOne({ email });\n    if (user.email === email && await user.comparePassword(password)) {\n      this.refreshTokenService.sendCookie(response, user);\n      this.accessTokenService.sendCookie(response, user);\n      return user;\n    }\n    throw new HttpException('Invalid credentials', HttpStatus.UNAUTHORIZED);\n  }\n\n  @Post(\"signup\")\n  @ApiConflictResponse({ description: 'Unable to create user' })\n  async credentailSignUp(@Body() body: CredentailRegister) {\n    const data = await this.userService.create(body);\n    const token = this.jwtService.sign({ sub: data.id, email: data.email, role: data.role });\n    return { message: \"User created successfully\" };\n  }\n\n\n\n  @Post(\"logout\")\n  async logout(@Res({ passthrough: true }) response: Response) {\n    this.refreshTokenService.clearCookie(response)\n    this.accessTokenService.clearCookie(response);\n    return { message: \"Logout successfully\" };\n  }\n\n  @Get('refresh')\n  @ApiCookieAuth()\n  @UseGuards(RefreshTokenGuard)\n  async refresh(@AuthUser() id: number, @Res({ passthrough: true }) response: Response) {\n    const user = await this.userService.findOne({ id });\n    this.accessTokenService.sendCookie(response, user);\n    return user;\n  }\n\n\n  @Get('personal-details')\n  @UseGuards(AccessTokenGuard)\n  me(@AuthUser() id: number) {\n    return this.userService.findOne({ id });\n  }\n\n\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nAccessTokenModule\n\nAccessTokenModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccessTokenModule->AuthModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nOtpModule\n\nOtpModule\n\nAuthModule -->\n\nOtpModule->AuthModule\n\n\n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\nAuthModule -->\n\nRefreshTokenModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nGoogleService\n\nGoogleService\n\nAuthModule -->\n\nGoogleService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleService\n                        \n                        \n                            GoogleStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleController\n                        \n                        \n                            OtpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AccessTokenModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            OtpModule\n                        \n                        \n                            RefreshTokenModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { PassportModule } from '@nestjs/passport';\nimport { MailModule } from 'src/shared/mail/mail.module';\nimport { RefreshTokenModule } from './refresh-token/refresh-token.module';\nimport { AccessTokenModule } from './access-token/access-token.module';\nimport { GoogleController } from './google/google.controller';\nimport { GoogleStrategy } from './google/google.strategy';\nimport { GoogleService } from './google/google.service';\nimport { OtpModule } from './otp/otp.module';\nimport { OtpController } from './otp/otp.controller';\n\n@Module({\n  controllers: [\n    AuthController,\n    GoogleController,\n    OtpController\n  ],\n  providers: [\n    GoogleStrategy,\n    GoogleService\n  ],\n  imports: [\n    UsersModule,\n    MailModule,\n    AccessTokenModule,\n    RefreshTokenModule,\n    ConfigModule,\n    OtpModule,\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n      property: 'user',\n      session: true\n    }),\n  ],\n  exports: [\n    PassportModule,\n  ]\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamDto.html":{"url":"classes/CreateExamDto.html","title":"class - CreateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exams/dto/create-exam.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exams/dto/create-exam.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exams/dto/create-exam.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform } from \"class-transformer\";\nimport { IsOptional, IsString } from \"class-validator\";\n\nexport class CreateExamDto {\n    @IsString()\n    @Transform(({ value }) => value.toUpperCase())\n    name: string;\n    \n    @IsOptional()\n    @IsString()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMultipleChoiceDto.html":{"url":"classes/CreateMultipleChoiceDto.html","title":"class - CreateMultipleChoiceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMultipleChoiceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/multiple-choice/dto/create-multiple-choice.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answer\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                examId\n                            \n                            \n                                options\n                            \n                            \n                                question\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toQuestion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Validate(IsValidPos, ['options'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/dto/create-multiple-choice.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/dto/create-multiple-choice.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/dto/create-multiple-choice.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, isArray: true})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/dto/create-multiple-choice.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/dto/create-multiple-choice.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty({type: String, isArray: true})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/dto/create-multiple-choice.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toQuestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    toQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/questions/multiple-choice/dto/create-multiple-choice.dto.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         CreateQuestionDto\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { QuestionType } from \"@prisma/client\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsNumber, IsOptional, IsString, Validate } from \"class-validator\";\nimport { CreateQuestionDto } from \"src/questions/dto/create-question.dto\";\nimport { IsValidPos } from \"src/shared/decorator/is-valid-pos.decorator\";\n\nexport class CreateMultipleChoiceDto {\n    @IsString()\n    question: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    @IsNumber()\n    @Validate(IsValidPos, ['options'])\n    answer: number;\n\n    @ApiProperty({ type: String, isArray: true })\n    @IsArray()\n    @Type(() => String)\n    options: string[];\n\n    @IsOptional()\n    @ApiProperty({type: String, isArray: true})\n    @IsArray()\n    @Type(() => String)\n    tags: string[] = [];\n\n    @IsNumber()\n    examId: number;\n\n    public toQuestion(): CreateQuestionDto {\n        return {\n            question: this.question,\n            description: this.description,\n            options: this.options,\n            tags: this.tags,\n            type: QuestionType.MULTIPLE_SELECT,\n            answers: [this.answer],\n            examId: this.examId\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMultipleSelectDto.html":{"url":"classes/CreateMultipleSelectDto.html","title":"class - CreateMultipleSelectDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMultipleSelectDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/multiple-select/dto/create-multiple-select.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                examId\n                            \n                            \n                                options\n                            \n                            \n                                question\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toQuestion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, isArray: true})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/dto/create-multiple-select.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/dto/create-multiple-select.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/dto/create-multiple-select.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, isArray: true})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/dto/create-multiple-select.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/dto/create-multiple-select.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty({type: String, isArray: true})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/dto/create-multiple-select.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toQuestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    toQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/questions/multiple-select/dto/create-multiple-select.dto.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         CreateQuestionDto\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { QuestionType } from \"@prisma/client\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsEnum, IsNumber, IsOptional, IsString } from \"class-validator\";\nimport { CreateQuestionDto } from \"src/questions/dto/create-question.dto\";\n\nexport class CreateMultipleSelectDto {\n    @IsString()\n    question: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    @ApiProperty({ type: Number, isArray: true})\n    @IsArray()\n    @Type(() => Number)\n    answers: number[];\n\n\n    @ApiProperty({ type: String, isArray: true})\n    @IsArray()\n    @Type(() => String)\n    options: string[];\n    \n\n    @IsNumber()\n    examId: number;\n\n    @IsOptional()\n    @ApiProperty({type: String, isArray: true})\n    @IsArray()\n    @Type(() => String)\n    tags: string[] = [];\n    \n    public toQuestion(): CreateQuestionDto {\n        return {\n            question: this.question,\n            description: this.description,\n            options: this.options,\n            answers: this.answers,\n            type: QuestionType.MULTIPLE_SELECT,\n            tags: this.tags,\n            examId: this.examId\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionDto.html":{"url":"classes/CreateQuestionDto.html","title":"class - CreateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/dto/create-question.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                examId\n                            \n                            \n                                options\n                            \n                            \n                                question\n                            \n                            \n                                tags\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, isArray: true})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/dto/create-question.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/dto/create-question.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/dto/create-question.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, isArray: true})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/dto/create-question.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/dto/create-question.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty({type: String, isArray: true})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/dto/create-question.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QuestionType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QuestionType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/dto/create-question.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { QuestionType } from \"@prisma/client\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsEnum, IsNumber, IsOptional, IsString } from \"class-validator\";\n\nexport class CreateQuestionDto {\n    @IsString()\n    question: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    @IsEnum(QuestionType)\n    type: QuestionType;\n\n    @ApiProperty({ type: Number, isArray: true})\n    @IsArray()\n    @Type(() => Number)\n    answers: number[];\n\n    \n    @ApiProperty({ type: String, isArray: true})\n    @IsArray()\n    @Type(() => String)\n    options: string[];\n\n    @IsNumber()\n    examId: number;\n\n\n    @IsOptional()\n    @ApiProperty({type: String, isArray: true})\n    @IsArray()\n    @Type(() => String)\n    tags: string[] = [];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateShortAnswerDto.html":{"url":"classes/CreateShortAnswerDto.html","title":"class - CreateShortAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateShortAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/short-answer/dto/create-short-answer.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answer\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                examId\n                            \n                            \n                                question\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toQuestion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/short-answer/dto/create-short-answer.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/short-answer/dto/create-short-answer.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/short-answer/dto/create-short-answer.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/short-answer/dto/create-short-answer.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty({type: String, isArray: true})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/short-answer/dto/create-short-answer.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toQuestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    toQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/questions/short-answer/dto/create-short-answer.dto.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         CreateQuestionDto\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { QuestionType } from \"@prisma/client\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsNumber, IsOptional, IsString } from \"class-validator\";\nimport { CreateQuestionDto } from \"src/questions/dto/create-question.dto\";\n\nexport class CreateShortAnswerDto {\n    @IsString()\n    question: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    @IsString()\n    answer: string;\n\n    @IsNumber()\n    examId: number;\n\n    @IsOptional()\n    @ApiProperty({ type: String, isArray: true })\n    @IsArray()\n    @Type(() => String)\n    tags: string[] = [];\n\n    public toQuestion(): CreateQuestionDto {\n        return {\n            type: QuestionType.SHORT_ANSWER,\n            options: [this.answer],\n            answers: [0],\n            question: this.question,\n            description: this.description,\n            tags: this.tags,\n            examId: this.examId\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/tags/dto/create-tag.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateTagDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTrueFalseDto.html":{"url":"classes/CreateTrueFalseDto.html","title":"class - CreateTrueFalseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTrueFalseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/true-false/dto/create-true-false.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answer\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                examId\n                            \n                            \n                                question\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toQuestion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/true-false/dto/create-true-false.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/true-false/dto/create-true-false.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/true-false/dto/create-true-false.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/true-false/dto/create-true-false.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, isArray: true})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/true-false/dto/create-true-false.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toQuestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    toQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/questions/true-false/dto/create-true-false.dto.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         CreateQuestionDto\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { QuestionType } from \"@prisma/client\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsNumber, IsOptional, IsString } from \"class-validator\";\nimport { CreateQuestionDto } from \"src/questions/dto/create-question.dto\";\n\nexport class CreateTrueFalseDto {\n    @IsString()\n    question: string;\n\n    @ApiPropertyOptional()\n    @IsString()\n    description?: string;\n\n    @IsBoolean()\n    answer: boolean;\n\n    @IsNumber()\n    examId: number;\n\n    @ApiProperty({type: String, isArray: true})\n    @IsArray()\n    @Type(() => String)\n    tags: string[] = [];\n\n    public toQuestion(): CreateQuestionDto {\n        return {\n            question: this.question,\n            description: this.description,\n            type: QuestionType.TRUE_FALSE,\n            options: [\"False\", \"True\"],\n            answers: [this.answer ? 1 : 0],\n            tags: this.tags,\n            examId: this.examId\n        }\n    }\n}\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                emailVerified\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                    Optional\n                                image\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, Role } from \"@prisma/client\";\n\nexport class CreateUserDto implements Prisma.UserCreateInput {\n    email: string;\n    password?: string;\n    firstName?: string;\n    lastName?: string;\n    image?: string;\n    emailVerified?: boolean;\n    role?: Role;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentailRegister.html":{"url":"classes/CredentailRegister.html","title":"class - CredentailRegister","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentailRegister\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/credential-register.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CredentialLogin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                role\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Default value : Role.USER\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/credential-register.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Transform( => )\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CredentialLogin\n\n                            \n                        \n                    \n                        \n                                Defined in         CredentialLogin:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({minLength: 8, example: 'Password@123', description: 'password must contain atleast 1 special character, 1 upper case and 1 number'})@IsString()@MinLength(8)@Matches(/[@$!%*#?&]/, {message: 'password contain atleast 1 special character'})@Matches(/[A-Z]/, {message: 'password must contain atleast 1 upper case'})@Matches(/[a-z]/, {message: 'password must contain atleast 1 lower case'})@Matches(/[0-9]/, {message: 'password must contain atleast 1 number'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CredentialLogin\n\n                            \n                        \n                    \n                        \n                                Defined in         CredentialLogin:21\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from \"@prisma/client\";\nimport { IsEnum } from \"class-validator\";\nimport { CredentialLogin } from \"./credential-login.dto\";\n\nexport class CredentailRegister extends CredentialLogin {\n    @IsEnum(Role)\n    role: Role = Role.USER;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialLogin.html":{"url":"classes/CredentialLogin.html","title":"class - CredentialLogin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialLogin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/credential-login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/credential-login.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({minLength: 8, example: 'Password@123', description: 'password must contain atleast 1 special character, 1 upper case and 1 number'})@IsString()@MinLength(8)@Matches(/[@$!%*#?&]/, {message: 'password contain atleast 1 special character'})@Matches(/[A-Z]/, {message: 'password must contain atleast 1 upper case'})@Matches(/[a-z]/, {message: 'password must contain atleast 1 lower case'})@Matches(/[0-9]/, {message: 'password must contain atleast 1 number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/credential-login.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Transform } from \"class-transformer\";\nimport { IsEmail, IsString, Matches, MinLength } from \"class-validator\";\n\nexport class CredentialLogin {\n    @IsEmail()\n    @Transform(({ value }) => value.toLowerCase())\n    email: string;\n\n    @ApiProperty({\n        minLength: 8,\n        example: 'Password@123',\n        description: 'password must contain atleast 1 special character, 1 upper case and 1 number',\n    })\n    @IsString()\n    @MinLength(8)\n    @Matches(/[@$!%*#?&]/,{ message: 'password contain atleast 1 special character' })\n    @Matches(/[A-Z]/, { message: 'password must contain atleast 1 upper case' })\n    @Matches(/[a-z]/, { message: 'password must contain atleast 1 lower case' })\n    @Matches(/[0-9]/, { message: 'password must contain atleast 1 number' })\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EntityWithQuestions.html":{"url":"classes/EntityWithQuestions.html","title":"class - EntityWithQuestions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EntityWithQuestions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exams/entities/exam.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                id\n                            \n                            \n                                isDeleted\n                            \n                            \n                                multipleChoice\n                            \n                            \n                                multipleSelect\n                            \n                            \n                                name\n                            \n                            \n                                shortAnswer\n                            \n                            \n                                trueFalse\n                            \n                            \n                                updatedAt\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/exams/entities/exam.entity.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiHideProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiHideProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        multipleChoice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MultipleChoiceEntity[]\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        multipleSelect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MultipleChoiceEntity[]\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shortAnswer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ShortAnswerEntity[]\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trueFalse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TrueFalseEntity[]\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiHideProperty()@Exclude()@ApiHideProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, PartialType } from \"@nestjs/swagger\";\nimport { Question, Tag } from \"@prisma/client\";\nimport { Exclude } from \"class-transformer\";\nimport { MultipleChoiceEntity } from \"src/questions/multiple-choice/entities/multiple-choice.entity\";\nimport { ShortAnswerEntity } from \"src/questions/short-answer/entities/short-answer.entity\";\nimport { TrueFalseEntity } from \"src/questions/true-false/entities/true-false.entity\";\n\n\nexport class ExamEntity {\n    id: number;\n    name: string;\n    description?: string;\n    createdAt: Date;\n    updatedAt: Date;\n\n    @Exclude()\n    @ApiHideProperty()\n    deletedAt: Date | null = null;\n\n    @Exclude()\n    @ApiHideProperty()\n    isDeleted: boolean;\n\n    @Exclude()\n    @ApiHideProperty()\n    userId: number;\n\n    constructor(partial: Partial) {\n        Object.assign(this, partial);\n    }\n}\n\nexport class EntityWithQuestions {\n    id: number;\n    name: string;\n    description?: string;\n    createdAt: Date;\n    updatedAt: Date;\n\n    @Exclude()\n    @ApiHideProperty()\n    deletedAt: Date | null = null;\n\n    @Exclude()\n    @ApiHideProperty()\n    isDeleted: boolean;\n\n    @Exclude()\n    @ApiHideProperty()\n\n    @Exclude()\n    @ApiHideProperty()\n    userId: number;\n\n    trueFalse: TrueFalseEntity[]\n    multipleChoice: MultipleChoiceEntity[]\n    shortAnswer: ShortAnswerEntity[]\n    multipleSelect: MultipleChoiceEntity[]\n\n    constructor(partial: Partial) {\n        Object.assign(this, partial);\n    }\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamEntity.html":{"url":"classes/ExamEntity.html","title":"class - ExamEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exams/entities/exam.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                id\n                            \n                            \n                                isDeleted\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/exams/entities/exam.entity.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiHideProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiHideProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiHideProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exams/entities/exam.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, PartialType } from \"@nestjs/swagger\";\nimport { Question, Tag } from \"@prisma/client\";\nimport { Exclude } from \"class-transformer\";\nimport { MultipleChoiceEntity } from \"src/questions/multiple-choice/entities/multiple-choice.entity\";\nimport { ShortAnswerEntity } from \"src/questions/short-answer/entities/short-answer.entity\";\nimport { TrueFalseEntity } from \"src/questions/true-false/entities/true-false.entity\";\n\n\nexport class ExamEntity {\n    id: number;\n    name: string;\n    description?: string;\n    createdAt: Date;\n    updatedAt: Date;\n\n    @Exclude()\n    @ApiHideProperty()\n    deletedAt: Date | null = null;\n\n    @Exclude()\n    @ApiHideProperty()\n    isDeleted: boolean;\n\n    @Exclude()\n    @ApiHideProperty()\n    userId: number;\n\n    constructor(partial: Partial) {\n        Object.assign(this, partial);\n    }\n}\n\nexport class EntityWithQuestions {\n    id: number;\n    name: string;\n    description?: string;\n    createdAt: Date;\n    updatedAt: Date;\n\n    @Exclude()\n    @ApiHideProperty()\n    deletedAt: Date | null = null;\n\n    @Exclude()\n    @ApiHideProperty()\n    isDeleted: boolean;\n\n    @Exclude()\n    @ApiHideProperty()\n\n    @Exclude()\n    @ApiHideProperty()\n    userId: number;\n\n    trueFalse: TrueFalseEntity[]\n    multipleChoice: MultipleChoiceEntity[]\n    shortAnswer: ShortAnswerEntity[]\n    multipleSelect: MultipleChoiceEntity[]\n\n    constructor(partial: Partial) {\n        Object.assign(this, partial);\n    }\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamsController.html":{"url":"controllers/ExamsController.html","title":"controller - ExamsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exams/exams.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exams\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(userId: number, createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiCookieAuth()@UseGuards(AccessTokenGuard)\n                \n            \n\n            \n                \n                    Defined in src/exams/exams.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(query: QueryExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/exams/exams.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(undefined: ParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/exams/exams.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ParamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(userId: number, undefined: ParamDto, undefined: QueryDeleteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiCookieAuth()@UseGuards(AccessTokenGuard)\n                \n            \n\n            \n                \n                    Defined in src/exams/exams.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                ParamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                QueryDeleteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(userId: number, undefined: ParamDto, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiCookieAuth()@UseGuards(AccessTokenGuard)\n                \n            \n\n            \n                \n                    Defined in src/exams/exams.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                ParamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards, Query } from '@nestjs/common';\nimport { ExamsService } from './exams.service';\nimport { CreateExamDto } from './dto/create-exam.dto';\nimport { UpdateExamDto } from './dto/update-exam.dto';\nimport { ApiCookieAuth, ApiTags } from '@nestjs/swagger';\nimport { AuthUser } from 'src/auth/decorator/auth.gaurd';\nimport { AccessTokenGuard } from 'src/auth/access-token/access-token.gaurd';\nimport { QueryExamDto } from './dto/query-exam.dto';\nimport { QueryDeleteDto } from 'src/shared/dto/query.dto';\nimport { ParamDto } from 'src/shared/dto/param.dto';\n\n@Controller('exams')\n@ApiTags('exams')\nexport class ExamsController {\n  constructor(private readonly examsService: ExamsService) {}\n\n  @Post()\n  @ApiCookieAuth()\n  @UseGuards(AccessTokenGuard)\n  create(@AuthUser() userId: number, @Body() createExamDto: CreateExamDto) {\n    return this.examsService.create(userId, createExamDto);\n  }\n\n  @Get()\n  findAll(@Query() query: QueryExamDto) {\n    return this.examsService.findAll(query);\n  }\n\n  @Get(':id')\n  findOne(@Param() { id }: ParamDto) {\n    return this.examsService.findOne(+id);\n  }\n\n  @Patch(':id')\n  @ApiCookieAuth()\n  @UseGuards(AccessTokenGuard)\n  update(@AuthUser() userId: number, @Param() { id }: ParamDto, @Body() updateExamDto: UpdateExamDto) {\n    return this.examsService.update(userId, id, updateExamDto);\n  }\n\n  @Delete(':id')\n  @ApiCookieAuth()\n  @UseGuards(AccessTokenGuard)\n  remove(@AuthUser() userId: number, @Param() { id }: ParamDto, @Query() { force }: QueryDeleteDto) {\n    return this.examsService.remove(userId, id, force);\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExamsModule.html":{"url":"modules/ExamsModule.html","title":"module - ExamsModule","body":"\n                   \n\n\n\n\n    Modules\n    ExamsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ExamsModule\n\n\n\ncluster_ExamsModule_providers\n\n\n\ncluster_ExamsModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nExamsModule\n\nExamsModule\n\nExamsModule -->\n\nPrismaModule->ExamsModule\n\n\n\n\n\nExamsService\n\nExamsService\n\nExamsModule -->\n\nExamsService->ExamsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exams/exams.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExamsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExamsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ExamsService } from './exams.service';\nimport { ExamsController } from './exams.controller';\nimport { PrismaModule } from 'src/shared/prisma/prisma.module';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  controllers: [ExamsController],\n  providers: [ExamsService],\n  imports: [\n    PrismaModule, \n    ConfigModule,\n  ]\n})\nexport class ExamsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamsService.html":{"url":"injectables/ExamsService.html","title":"injectable - ExamsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExamsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exams/exams.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                handleCron\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, configSerivce: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/exams/exams.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configSerivce\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: number, createExamDto: CreateExamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exams/exams.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: QueryExamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exams/exams.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                QueryExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exams/exams.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleCron\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_1AM)\n                \n            \n\n            \n                \n                    Defined in src/exams/exams.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(userId: number, id: number, force: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/exams/exams.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    force\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: number, id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exams/exams.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { QuestionType } from '@prisma/client';\nimport { QuestionEntity } from 'src/questions/entities/question.entity';\nimport { QueryDto } from 'src/shared/dto/query.dto';\nimport { PrismaService } from 'src/shared/prisma/prisma.service';\nimport { CreateExamDto } from './dto/create-exam.dto';\nimport { QueryExamDto } from './dto/query-exam.dto';\nimport { UpdateExamDto } from './dto/update-exam.dto';\nimport { EntityWithQuestions, ExamEntity } from './entities/exam.entity';\n\n@Injectable()\nexport class ExamsService {\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private configSerivce: ConfigService) { }\n\n  async create(userId: number, createExamDto: CreateExamDto) {\n    const exam = await this.prisma.exam.create({\n      data: {\n        ...createExamDto,\n        user: {\n          connect: { id: userId }\n        }\n      }\n    });\n    return new ExamEntity(exam);\n  }\n\n  async findAll({\n    skip,\n    take,\n    from: gte,\n    to: lte,\n    field,\n    contains,\n    sort,\n    order,\n    isDeleted\n  }: QueryExamDto) {\n    const where = {\n      isDeleted: isDeleted ? true : false,\n      [field]: { contains },\n      createdAt: {\n        gte,\n        lte\n      }\n    };\n\n    const orderBy = {\n      [sort]: order\n    };\n\n    const exams = await this.prisma.exam.findMany({\n      where,\n      orderBy,\n      skip,\n      take,\n    });\n\n    return exams.map((exam) => new ExamEntity(exam))\n\n  }\n\n  async findOne(id: number) {\n    const { questions, ...exam } = await this.prisma.exam.findUniqueOrThrow({\n      where: { id },\n      include: {\n        questions: {\n          where: { isDeleted: false },\n          include: {\n            tags: true\n          }\n        }\n      }\n    });\n    const examEntity = new EntityWithQuestions(exam);\n    const questionsEntity = questions.map(question => new QuestionEntity(question));\n    examEntity.trueFalse = questionsEntity.filter(question => question.type === QuestionType.TRUE_FALSE).map(question => question.toTrueFalse());\n    examEntity.multipleChoice = questionsEntity.filter(question => question.type === QuestionType.MULTIPLE_CHOICE).map(question => question.toMultipleChoice());\n    examEntity.multipleSelect = questionsEntity.filter(question => question.type === QuestionType.MULTIPLE_SELECT).map(question => question.toMultipleChoice());\n    examEntity.shortAnswer = questionsEntity.filter(question => question.type === QuestionType.SHORT_ANSWER).map(question => question.toShortAnswer());\n\n    return examEntity;\n  }\n\n  async update(userId: number, id: number, updateExamDto: UpdateExamDto) {\n    const exam = await this.prisma.exam.findUnique({ where: { id } });\n    if (exam.userId !== userId)\n      throw new Error('You are not authorized to delete this exam',);\n    const examOutput = await this.prisma.exam.update({ where: { id }, data: updateExamDto });\n    return new ExamEntity(examOutput);\n  }\n\n  async remove(userId: number, id: number, force: boolean) {\n    const exam = await this.prisma.exam.findUnique({ where: { id } });\n    if (exam.userId !== userId)\n      throw new Error('You are not authorized to delete this exam',);\n    if (force) {\n      const examOutput = await this.prisma.exam.delete({ where: { id } });\n      return new ExamEntity(examOutput);\n    }\n    const examOutput = await this.prisma.exam.update({ where: { id }, data: { isDeleted: true, deletedAt: new Date() } });\n    return new ExamEntity(examOutput);\n  }\n\n\n  @Cron(CronExpression.EVERY_DAY_AT_1AM)\n  async handleCron() {\n    const lte = this.configSerivce.getOrThrow('PRISMA_DELETE_AFTER');\n    const exams = await this.prisma.exam.deleteMany({\n      where: {\n        isDeleted: true,\n        deletedAt: {\n          lte\n        }\n      }\n    });\n    Logger.log(`Deleted ${exams.count} exams`);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleController.html":{"url":"controllers/GoogleController.html","title":"controller - GoogleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/google/google.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                    Async\n                                googleAuthFrontend\n                            \n                            \n                                    Async\n                                googleCallback\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('backend-login')@UseGuards(GoogleGaurd)\n                \n            \n\n            \n                \n                    Defined in src/auth/google/google.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuthFrontend\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuthFrontend(idToken: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/google/google.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    idToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleCallback\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleCallback(req: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GoogleGaurd)@Get('callback')\n                \n            \n\n            \n                \n                    Defined in src/auth/google/google.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Headers, Req, Res, UseGuards } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { UsersService } from 'src/users/users.service';\nimport { AccessTokenService } from '../access-token/access-token.service';\nimport { RefreshTokenService } from '../refresh-token/refresh-token.service';\nimport { GoogleGaurd } from './google.gaurd';\nimport { Request, Response } from 'express';\nimport { GoogleService } from './google.service';\n\n@Controller('auth/google')\n@ApiTags('google')\nexport class GoogleController {\n  constructor(\n    private readonly userService: UsersService,\n    private readonly googleAuthService: GoogleService,\n    private readonly accessTokenService: AccessTokenService,\n    private readonly refreshTokenService: RefreshTokenService) { }\n\n  @Get(\"backend-login\")\n  @UseGuards(GoogleGaurd)\n  async googleAuth(@Req() req: any) { }\n\n\n  @UseGuards(GoogleGaurd)\n  @Get('callback')\n  async googleCallback(\n    @Req() req: any,\n    @Res({ passthrough: true }) res: Response) {\n    const userData = await this.googleAuthService.getUserDetails(req.user.accessToken);\n    let user = await this.userService.findOne({ email: userData.email });\n    if (!user)\n      user = await this.userService.create(userData);\n\n    this.accessTokenService.sendCookie(res, user);\n    this.refreshTokenService.sendCookie(res, user);\n    return user;\n  }\n\n  @Get(\"login\")\n  async googleAuthFrontend(\n    @Headers('idToken') idToken: string,\n    @Res({ passthrough: true }) res: Response\n  ) {\n    const userData = await this.googleAuthService.getUserDetailsFromIdToken(idToken);\n    let user = await this.userService.findOne({ email: userData.email });\n    if (!user)\n      user = await this.userService.create(userData);\n    this.accessTokenService.sendCookie(res, user);\n    this.refreshTokenService.sendCookie(res, user);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleGaurd.html":{"url":"injectables/GoogleGaurd.html","title":"injectable - GoogleGaurd","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleGaurd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/google/google.gaurd.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class GoogleGaurd extends AuthGuard(\"google\") {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleService.html":{"url":"injectables/GoogleService.html","title":"injectable - GoogleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/google/google.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserDetails\n                            \n                            \n                                    Async\n                                getUserDetailsFromIdToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/google/google.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserDetails\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserDetails(accessToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/google/google.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserDetailsFromIdToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserDetailsFromIdToken(idToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/google/google.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    idToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/google/google.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport { google } from 'googleapis';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { UserEntity } from 'src/users/entities/user.entity';\n\n@Injectable()\nexport class GoogleService {\n    client: OAuth2Client;\n\n    constructor(\n        private configService: ConfigService,\n    ) {\n        this.client = new google.auth.OAuth2(\n            this.configService.getOrThrow('GOOGLE_PROVIDER_CLIENT_ID'),\n            this.configService.getOrThrow('GOOGLE_PROVIDER_CLIENT_SECRET'),\n        );\n\n    }\n\n\n\n\n    async getUserDetails(accessToken: string) {\n\n        this.client.setCredentials({ access_token: accessToken });\n\n        const oauth2 = google.oauth2({\n            auth: this.client,\n            version: 'v2',\n        });\n\n        const { data } = await oauth2.userinfo.get();\n        const { email, family_name: lastName, given_name: firstName, picture: image } = data;\n        const user: CreateUserDto = {\n            email,\n            firstName,\n            lastName,\n            image,\n            emailVerified: true,\n        };\n        return user;\n    }\n\n    async getUserDetailsFromIdToken(idToken: string) {\n        const ticket = await this.client.verifyIdToken({\n            idToken,\n            audience: this.configService.get(\"GOOGLE_CLIENT_ID\"),\n        });\n        const payload = ticket.getPayload();\n        if (!payload) {\n            throw new HttpException(\"Invalid token\", HttpStatus.UNAUTHORIZED);\n        }\n        const { email, family_name: lastName, given_name: firstName, picture: image } = payload;\n        const user: CreateUserDto = {\n            email,\n            firstName,\n            lastName,\n            image,\n            emailVerified: true,\n        };\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/google/google.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/google/google.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/google/google.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { CreateUserDto } from \"src/users/dto/create-user.dto\";\nimport { Strategy } from 'passport-google-oauth20';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, \"google\") {\n\n    constructor(private readonly configService: ConfigService) {\n        super({\n            clientID: configService.getOrThrow('GOOGLE_PROVIDER_CLIENT_ID'),\n            clientSecret: configService.getOrThrow('GOOGLE_PROVIDER_CLIENT_SECRET'),\n            callbackURL: configService.getOrThrow('GOOGLE_PROVIDER_CALLBACK_URL'),\n            scope: [\"email\", \"profile\"],\n        });\n    }\n\n    async validate(accessToken: string, refreshToken: string, profile: any, done: any) {\n        done(null, {\n            accessToken,\n        });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsGte.html":{"url":"injectables/IsGte.html","title":"injectable - IsGte","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsGte\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/decorator/is-gte.decorator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _date\n                            \n                            \n                                    Private\n                                _number\n                            \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _date\n                        \n                    \n                \n            \n            \n                \n                    \n                    _date(value: Date, relatedValue: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/decorator/is-gte.decorator.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    relatedValue\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _number\n                        \n                    \n                \n            \n            \n                \n                    \n                    _number(value: number, relatedValue: number)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/decorator/is-gte.decorator.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    relatedValue\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/decorator/is-gte.decorator.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(value: any, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/decorator/is-gte.decorator.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface } from \"class-validator\";\n\n@Injectable()\n@ValidatorConstraint({ name: 'IsGreaterThanEqual', async: false})\nexport class IsGte implements ValidatorConstraintInterface {\n \n    async validate(value: any, args: ValidationArguments) {\n        const [relatedPropertyName] = args.constraints;\n        const relatedValue = (args.object as any)[relatedPropertyName];\n        if (typeof value === 'number' && typeof relatedValue === 'number') {\n            return this._number(value, relatedValue);\n        }\n        else if (value instanceof Date && relatedValue instanceof Date) {\n            return this._date(value, relatedValue);\n        } else {\n            return true;\n        }\n    }\n\n\n    private _number(value: number, relatedValue: number) {\n        return value >= relatedValue;\n    }\n\n    private _date(value: Date, relatedValue: Date) {\n        return value >= relatedValue;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const [relatedPropertyName] = args.constraints;\n        return `${relatedPropertyName} must be greater than ${args.property}`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsValidPos.html":{"url":"injectables/IsValidPos.html","title":"injectable - IsValidPos","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsValidPos\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/decorator/is-valid-pos.decorator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/decorator/is-valid-pos.decorator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(value: number, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/decorator/is-valid-pos.decorator.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface } from \"class-validator\";\n\n@Injectable()\n@ValidatorConstraint({ name: 'IsGreaterThanEqual', async: false})\nexport class IsValidPos implements ValidatorConstraintInterface {\n \n    async validate(value: number, args: ValidationArguments) {\n        const [relatedPropertyName] = args.constraints;\n        const relatedValue = (args.object as any)[relatedPropertyName] as T[];\n        if (value >= relatedValue.length) {\n            return false;\n        }\n        return true;\n    }\n\n\n    defaultMessage(args: ValidationArguments) {\n        const [relatedPropertyName] = args.constraints;\n        return `${args.property} must not exceed size of ${relatedPropertyName}`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogMiddleware.html":{"url":"injectables/LogMiddleware.html","title":"injectable - LogMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/middleware/log.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/middleware/log.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { NextFunction, Response, Request } from \"express\";\n\n@Injectable()\nexport class LogMiddleware {\n    use(req: Request, res: Response, next: NextFunction): void {\n        Logger.log(`Request ${req.ip} ${req.method} ${req.url}`);\n        Logger.log(`Request Cookies ${JSON.stringify(req.cookies)}]`);\n        Logger.log(`Request Headers ${JSON.stringify(req.headers)}]`);\n        Logger.log(`[Request Body ${JSON.stringify(req.body)}]`);\n        res.on('close', () => {\n            Logger.log(`Response Status ${res.statusCode}`);\n            Logger.log(`Response Cookies ${JSON.stringify(res.getHeaders())}`);\n        });\n\n        next();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MailerModule } from '@nestjs-modules/mailer';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MailService } from './mail.service';\n\n@Module({\n  providers: [MailService],\n  imports:[\n    ConfigModule,\n    MailerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        transport:{\n          host: config.getOrThrow('SMTP_API_HOST'),\n          port: 465,\n          secure: true,\n          auth: {\n            user: config.getOrThrow('SMTP_API_USER'),\n            pass: config.getOrThrow('SMTP_API_KEY'),\n          },\n        },\n        defaults: {\n          from: `\"No Reply\" ${config.getOrThrow('SMTP_MAIL_FROM')}>`,\n        },\n      })\n    })\n  ],\n  exports: [\n    MailService\n  ]\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expirationTime\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendVerificationMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailService: MailerService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/mail/mail.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendVerificationMail\n                        \n                    \n                \n            \n            \n                \nsendVerificationMail(to: string, otp: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/mail/mail.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    to\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expirationTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/mail/mail.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class MailService {\n    expirationTime: number;\n\n    constructor(\n        private mailService: MailerService,\n        private configService: ConfigService) {}\n\n    sendVerificationMail(to: string, otp: string) {\n        const expirationDate = new Date(Date.now() + this.configService.getOrThrow('OTP_EXPIRATION_TIME') );\n        try {\n            return this.mailService.sendMail({\n                to,\n                subject: 'Please confirm your email',\n                text: \"Welcome to my app\",\n                html: `\n                Welcome to my app\n                Copy and paste the code below to verify your email\n                \n                    ${otp}\n                \n                This OTP will expire at ${expirationDate.toLocaleString()}\n                \n                    \n                        If you did not create an account, please ignore this email.\n                    \n                \n                `,\n            })\n        } catch (error) {\n            throw new HttpException(\"Unable to send email\", HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MultipleChoiceEntity.html":{"url":"classes/MultipleChoiceEntity.html","title":"class - MultipleChoiceEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MultipleChoiceEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/multiple-choice/entities/multiple-choice.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answer\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                options\n                            \n                            \n                                question\n                            \n                            \n                                tags\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/entities/multiple-choice.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/entities/multiple-choice.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/entities/multiple-choice.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/entities/multiple-choice.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/entities/multiple-choice.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TagEntity[]\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/entities/multiple-choice.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QuestionType\n\n                    \n                \n                \n                    \n                        Default value : QuestionType.MULTIPLE_CHOICE\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-choice/entities/multiple-choice.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { QuestionType } from \"@prisma/client\";\nimport { TagEntity } from \"src/questions/tags/entities/tag.entity\";\n\nexport class MultipleChoiceEntity {\n    id: number;\n    question: string;\n    type: QuestionType = QuestionType.MULTIPLE_CHOICE;\n    description: string | null;\n    options: string[];\n    answer: number;\n\n    tags: TagEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MultipleSelectEntity.html":{"url":"classes/MultipleSelectEntity.html","title":"class - MultipleSelectEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MultipleSelectEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/multiple-select/entities/multiple-select.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                options\n                            \n                            \n                                question\n                            \n                            \n                                tags\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/entities/multiple-select.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/entities/multiple-select.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/entities/multiple-select.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/entities/multiple-select.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/entities/multiple-select.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TagEntity[]\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/entities/multiple-select.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QuestionType\n\n                    \n                \n                \n                    \n                        Default value : QuestionType.MULTIPLE_SELECT\n                    \n                \n                    \n                        \n                                Defined in src/questions/multiple-select/entities/multiple-select.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { QuestionType } from \"@prisma/client\";\nimport { TagEntity } from \"src/questions/tags/entities/tag.entity\";\n\nexport class MultipleSelectEntity {\n    id: number;\n    question: string;\n    type: QuestionType = QuestionType.MULTIPLE_SELECT;\n    description: string | null;\n    options: string[];\n    answers: number[];\n    tags: TagEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OtpController.html":{"url":"controllers/OtpController.html","title":"controller - OtpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OtpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/otp/otp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/otp\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateOtp\n                            \n                            \n                                    Async\n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateOtp\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateOtp(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@ApiCookieAuth()@Post('generate-otp')\n                \n            \n\n            \n                \n                    Defined in src/auth/otp/otp.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyOtp(id: number, otp: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('verify-otp')@ApiCookieAuth()@UseGuards(AccessTokenGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/otp/otp.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, HttpException, HttpStatus, Post, Headers, UseGuards } from \"@nestjs/common\";\nimport { ApiCookieAuth, ApiTags } from \"@nestjs/swagger\";\nimport { MailService } from \"src/shared/mail/mail.service\";\nimport { UsersService } from \"src/users/users.service\";\nimport { AccessTokenGuard } from \"../access-token/access-token.gaurd\";\nimport { AuthUser } from \"../decorator/auth.gaurd\";\nimport { OtpService } from \"./otp.service\";\n\n@Controller('auth/otp')\n@ApiTags('otp')\nexport class OtpController {\n\n    constructor(\n        private readonly userService: UsersService,\n        private readonly mailService: MailService,\n        private readonly otpService: OtpService) { }\n\n\n    @UseGuards(AccessTokenGuard)\n    @ApiCookieAuth()\n    @Post(\"generate-otp\")\n    async generateOtp(@AuthUser() id: number) {\n        const user = await this.userService.findOne({ id });\n        const otp = await this.otpService.generateOtp(user.id);\n        await this.mailService.sendVerificationMail(user.email, otp);\n        return { message: \"Otp sent successfully\" };\n    }\n\n    @Post(\"verify-otp\")\n    @ApiCookieAuth()\n    @UseGuards(AccessTokenGuard)\n    async verifyOtp(@AuthUser() id: number, @Headers('otp') otp: string) {\n        if (await this.otpService.verifyOtp(id, otp)) {\n            return { message: \"Otp verified successfully\" };\n        }\n        throw new HttpException('Invalid otp', HttpStatus.UNAUTHORIZED);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OtpModule.html":{"url":"modules/OtpModule.html","title":"module - OtpModule","body":"\n                   \n\n\n\n\n    Modules\n    OtpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OtpModule\n\n\n\ncluster_OtpModule_exports\n\n\n\ncluster_OtpModule_providers\n\n\n\ncluster_OtpModule_imports\n\n\n\n\nRedisCacheModule\n\nRedisCacheModule\n\n\n\nOtpModule\n\nOtpModule\n\nOtpModule -->\n\nRedisCacheModule->OtpModule\n\n\n\n\n\nOtpService \n\nOtpService \n\nOtpService  -->\n\nOtpModule->OtpService \n\n\n\n\n\nOtpService\n\nOtpService\n\nOtpModule -->\n\nOtpService->OtpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/otp/otp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OtpService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisCacheModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OtpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { RedisCacheModule } from '../../shared/redis-cache/redis-cache.module';\nimport { OtpService } from './otp.service';\n\n@Module({\n  providers: [OtpService],\n  imports: [\n    ConfigModule,\n    RedisCacheModule\n  ],\n  exports: [OtpService],\n})\nexport class OtpModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OtpService.html":{"url":"injectables/OtpService.html","title":"injectable - OtpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OtpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/otp/otp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateOtp\n                            \n                            \n                                    Private\n                                hashOtp\n                            \n                            \n                                    Async\n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, redisService: RedisCacheService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/otp/otp.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisCacheService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateOtp\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateOtp(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/otp/otp.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        hashOtp\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashOtp(otp: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/otp/otp.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    otp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyOtp(id: number, otp: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/otp/otp.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport { RedisCacheService } from '../../shared/redis-cache/redis-cache.service';\n\n@Injectable()\nexport class OtpService {\n\n    constructor(\n        private configService: ConfigService,\n        private redisService: RedisCacheService) { }\n\n    private hashOtp(otp: string) {\n        return bcrypt.hash(otp, this.configService.getOrThrow('SALT'));\n    }\n    async generateOtp(id: number) {\n        const otp = Math.floor(100000 + Math.random() * 900000).toString();\n        const hash = await this.hashOtp(otp);\n        await this.redisService.set(`otp:${id}`, hash, this.configService.getOrThrow('OTP_EXPIRATION_TIME'));\n        return otp;\n    }\n\n    async verifyOtp(id: number, otp: string) {\n        const hash = await this.redisService.get(`otp:${id}`);\n        console.log(hash);\n        if (!hash) {\n            return false;\n        }\n        return bcrypt.compare(otp, hash);\n    }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamDto.html":{"url":"classes/ParamDto.html","title":"class - ParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/dto/param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/param.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, Min } from \"class-validator\";\n\nexport class ParamDto {\n    @ApiProperty()\n    @IsNumber()\n    @Min(1)\n    id: number;\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Payload.html":{"url":"classes/Payload.html","title":"class - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                role\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/auth.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/auth.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/auth.entity.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from \"@prisma/client\";\n\nexport class Payload {\n    sub: number;\n    email: string;\n    role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaExceptionFilter.html":{"url":"classes/PrismaExceptionFilter.html","title":"class - PrismaExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/filter/prisma.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: PrismaClientKnownRequestError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/filter/prisma.filter.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpStatus, Logger } from \"@nestjs/common\";\nimport { PrismaClientKnownRequestError } from \"@prisma/client/runtime\";\nimport { Request, Response } from \"express\";\n\n\n@Catch(PrismaClientKnownRequestError)\nexport class PrismaExceptionFilter implements ExceptionFilter {\n\n    catch(exception: PrismaClientKnownRequestError, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        switch (exception.code) {\n            case 'P2002':\n                return response.status(HttpStatus.CONFLICT).json({\n                    statusCode: HttpStatus.CONFLICT,\n                    message: \"The data you are trying to create already exists\",\n                })\n            case 'P2025':\n                return response.status(HttpStatus.NOT_FOUND).json({\n                    statusCode: HttpStatus.NOT_FOUND,\n                    message: `The data you are trying to ${request.method.toLowerCase()} does not exist`,\n                })\n            default:\n                Logger.error(exception.message, exception.stack, 'PrismaExceptionFilter');\n                return response.status(HttpStatus.INTERNAL_SERVER_ERROR).json({\n                    statusCode: HttpStatus.INTERNAL_SERVER_ERROR,\n                    message: \"Oops! Something went wrong\",\n                })\n            }\n        }\n    }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n    providers: [PrismaService],\n    exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/prisma/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/shared/prisma/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryDeleteDto.html":{"url":"classes/QueryDeleteDto.html","title":"class - QueryDeleteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryDeleteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/dto/query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                force\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        force\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/query.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Prisma } from \"@prisma/client\";\nimport { IsEnum, IsIn, IsInt, IsOptional, IsString, Min, Validate } from \"class-validator\";\nimport { IsGte } from \"../decorator/is-gte.decorator\";\n\nexport class QueryDto {\n    @ApiPropertyOptional({ default: 0, description: 'Skip the first n results' })\n    @IsOptional()\n    @IsInt()\n    @Min(0)\n    skip: number = 0;\n\n    @ApiPropertyOptional({ default: 100, description: 'Limit the number of results' })\n    @IsOptional()\n    @IsInt()\n    @Min(1)\n    take: number = 100;\n\n    @ApiPropertyOptional({ default: 'id', description: 'Sort by this field' })\n    @IsOptional()\n    @IsString()\n    @IsIn(['id', 'question', 'createdAt', 'updatedAt'])\n    sort: string = 'id';\n\n    @ApiPropertyOptional({ default: Prisma.SortOrder.asc, description: 'Sort direction' })\n    @IsOptional()\n    @IsEnum(Prisma.SortOrder)\n    order: Prisma.SortOrder = Prisma.SortOrder.asc;\n\n    @ApiPropertyOptional({ format: '2021-01-01T11:59:59.999Z', description: 'Filter by this date' })\n    @IsOptional()\n    from: Date;\n\n    @ApiPropertyOptional({ format: '2021-01-01T11:59:59.999Z', description: 'Filter by this date' })\n    @IsOptional()\n    @Validate(IsGte, ['from'])\n    to: Date;\n}\n\n\nexport class QueryDeleteDto {\n    @ApiPropertyOptional({default: false})\n    force: boolean = false;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryDto.html":{"url":"classes/QueryDto.html","title":"class - QueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/dto/query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                order\n                            \n                            \n                                skip\n                            \n                            \n                                sort\n                            \n                            \n                                take\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({format: '2021-01-01T11:59:59.999Z', description: 'Filter by this date'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/query.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.SortOrder\n\n                    \n                \n                \n                    \n                        Default value : Prisma.SortOrder.asc\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: undefined, description: 'Sort direction'})@IsOptional()@IsEnum(Prisma.SortOrder)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/query.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 0, description: 'Skip the first n results'})@IsOptional()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/query.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'id'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 'id', description: 'Sort by this field'})@IsOptional()@IsString()@IsIn(['id', 'question', 'createdAt', 'updatedAt'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/query.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 100, description: 'Limit the number of results'})@IsOptional()@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/query.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({format: '2021-01-01T11:59:59.999Z', description: 'Filter by this date'})@IsOptional()@Validate(IsGte, ['from'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/query.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Prisma } from \"@prisma/client\";\nimport { IsEnum, IsIn, IsInt, IsOptional, IsString, Min, Validate } from \"class-validator\";\nimport { IsGte } from \"../decorator/is-gte.decorator\";\n\nexport class QueryDto {\n    @ApiPropertyOptional({ default: 0, description: 'Skip the first n results' })\n    @IsOptional()\n    @IsInt()\n    @Min(0)\n    skip: number = 0;\n\n    @ApiPropertyOptional({ default: 100, description: 'Limit the number of results' })\n    @IsOptional()\n    @IsInt()\n    @Min(1)\n    take: number = 100;\n\n    @ApiPropertyOptional({ default: 'id', description: 'Sort by this field' })\n    @IsOptional()\n    @IsString()\n    @IsIn(['id', 'question', 'createdAt', 'updatedAt'])\n    sort: string = 'id';\n\n    @ApiPropertyOptional({ default: Prisma.SortOrder.asc, description: 'Sort direction' })\n    @IsOptional()\n    @IsEnum(Prisma.SortOrder)\n    order: Prisma.SortOrder = Prisma.SortOrder.asc;\n\n    @ApiPropertyOptional({ format: '2021-01-01T11:59:59.999Z', description: 'Filter by this date' })\n    @IsOptional()\n    from: Date;\n\n    @ApiPropertyOptional({ format: '2021-01-01T11:59:59.999Z', description: 'Filter by this date' })\n    @IsOptional()\n    @Validate(IsGte, ['from'])\n    to: Date;\n}\n\n\nexport class QueryDeleteDto {\n    @ApiPropertyOptional({default: false})\n    force: boolean = false;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryExamDto.html":{"url":"classes/QueryExamDto.html","title":"class - QueryExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exams/dto/query-exam.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        QueryDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contains\n                            \n                            \n                                    Optional\n                                field\n                            \n                            \n                                    Optional\n                                isDeleted\n                            \n                            \n                                from\n                            \n                            \n                                order\n                            \n                            \n                                skip\n                            \n                            \n                                sort\n                            \n                            \n                                take\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contains\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exams/dto/query-exam.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"name\" | \"description\"\n\n                    \n                \n                \n                    \n                        Default value : 'name'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exams/dto/query-exam.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exams/dto/query-exam.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({format: '2021-01-01T11:59:59.999Z', description: 'Filter by this date'})@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:32\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.SortOrder\n\n                    \n                \n                \n                    \n                        Default value : Prisma.SortOrder.asc\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: undefined, description: 'Sort direction'})@IsOptional()@IsEnum(Prisma.SortOrder)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 0, description: 'Skip the first n results'})@IsOptional()@IsInt()@Min(0)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'id'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 'id', description: 'Sort by this field'})@IsOptional()@IsString()@IsIn(['id', 'question', 'createdAt', 'updatedAt'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 100, description: 'Limit the number of results'})@IsOptional()@IsInt()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({format: '2021-01-01T11:59:59.999Z', description: 'Filter by this date'})@IsOptional()@Validate(IsGte, ['from'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:37\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsBoolean, IsOptional } from \"class-validator\";\nimport { QueryDto } from \"../../shared/dto/query.dto\";\n\nexport class QueryExamDto extends QueryDto {\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsBoolean()\n    isDeleted?: boolean; \n\n    @ApiPropertyOptional()\n    @IsOptional()\n    field?: 'name' | 'description' = 'name';\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    contains?: string;\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryQuestionDto.html":{"url":"classes/QueryQuestionDto.html","title":"class - QueryQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/dto/query-question.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        QueryDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contains\n                            \n                            \n                                examId\n                            \n                            \n                                    Optional\n                                field\n                            \n                            \n                                from\n                            \n                            \n                                order\n                            \n                            \n                                skip\n                            \n                            \n                                sort\n                            \n                            \n                                take\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contains\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/dto/query-question.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/dto/query-question.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"question\" | \"description\" | \"tag\"\n\n                    \n                \n                \n                    \n                        Default value : 'question'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/dto/query-question.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({format: '2021-01-01T11:59:59.999Z', description: 'Filter by this date'})@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:32\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.SortOrder\n\n                    \n                \n                \n                    \n                        Default value : Prisma.SortOrder.asc\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: undefined, description: 'Sort direction'})@IsOptional()@IsEnum(Prisma.SortOrder)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 0, description: 'Skip the first n results'})@IsOptional()@IsInt()@Min(0)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'id'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 'id', description: 'Sort by this field'})@IsOptional()@IsString()@IsIn(['id', 'question', 'createdAt', 'updatedAt'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 100, description: 'Limit the number of results'})@IsOptional()@IsInt()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({format: '2021-01-01T11:59:59.999Z', description: 'Filter by this date'})@IsOptional()@Validate(IsGte, ['from'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:37\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsNumber, IsString } from \"class-validator\";\nimport { QueryDto } from \"src/shared/dto/query.dto\";\n\nexport class QueryQuestionDto extends QueryDto {\n    @IsNumber()\n    examId: number;\n\n    @ApiPropertyOptional()\n    @IsString()\n    field?: 'question' | 'description'| 'tag' = 'question';\n\n    @ApiPropertyOptional()\n    @IsString()\n    contains?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryUserDto.html":{"url":"classes/QueryUserDto.html","title":"class - QueryUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/query.user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        QueryDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contains\n                            \n                            \n                                    Optional\n                                field\n                            \n                            \n                                from\n                            \n                            \n                                order\n                            \n                            \n                                skip\n                            \n                            \n                                sort\n                            \n                            \n                                take\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contains\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by this value'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/query.user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"firstName\" | \"lastName\" | \"email\"\n\n                    \n                \n                \n                    \n                        Default value : 'firstName'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 'id', description: 'Filter by this field'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/query.user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({format: '2021-01-01T11:59:59.999Z', description: 'Filter by this date'})@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:32\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.SortOrder\n\n                    \n                \n                \n                    \n                        Default value : Prisma.SortOrder.asc\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: undefined, description: 'Sort direction'})@IsOptional()@IsEnum(Prisma.SortOrder)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 0, description: 'Skip the first n results'})@IsOptional()@IsInt()@Min(0)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'id'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 'id', description: 'Sort by this field'})@IsOptional()@IsString()@IsIn(['id', 'question', 'createdAt', 'updatedAt'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 100, description: 'Limit the number of results'})@IsOptional()@IsInt()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({format: '2021-01-01T11:59:59.999Z', description: 'Filter by this date'})@IsOptional()@Validate(IsGte, ['from'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         QueryDto\n\n                            \n                        \n                    \n                        \n                                Defined in         QueryDto:37\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { QueryDto } from \"src/shared/dto/query.dto\"\n\nexport class QueryUserDto extends QueryDto {\n    @ApiPropertyOptional({ default: 'id', description: 'Filter by this field' })\n    @IsOptional()\n    @IsString()\n    field?: 'firstName'| 'lastName'| 'email' = 'firstName';\n\n    @ApiPropertyOptional({ description: 'Filter by this value' })\n    @IsOptional()\n    @IsString()\n    contains?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionEntity.html":{"url":"classes/QuestionEntity.html","title":"class - QuestionEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/entities/question.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Question\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                description\n                            \n                            \n                                examId\n                            \n                            \n                                id\n                            \n                            \n                                isDeleted\n                            \n                            \n                                options\n                            \n                            \n                                question\n                            \n                            \n                                tags\n                            \n                            \n                                type\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toMultipleChoice\n                            \n                            \n                                toMultipleSelect\n                            \n                            \n                                toShortAnswer\n                            \n                            \n                                toTrueFalse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/questions/entities/question.entity.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/entities/question.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/entities/question.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiHideProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/entities/question.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/entities/question.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiHideProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/entities/question.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/entities/question.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiHideProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/entities/question.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/entities/question.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/entities/question.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TagEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/entities/question.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QuestionType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/questions/entities/question.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/entities/question.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toMultipleChoice\n                        \n                    \n                \n            \n            \n                \ntoMultipleChoice()\n                \n            \n\n\n            \n                \n                    Defined in src/questions/entities/question.entity.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         MultipleChoiceEntity\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toMultipleSelect\n                        \n                    \n                \n            \n            \n                \ntoMultipleSelect()\n                \n            \n\n\n            \n                \n                    Defined in src/questions/entities/question.entity.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         MultipleSelectEntity\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toShortAnswer\n                        \n                    \n                \n            \n            \n                \ntoShortAnswer()\n                \n            \n\n\n            \n                \n                    Defined in src/questions/entities/question.entity.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ShortAnswerEntity\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toTrueFalse\n                        \n                    \n                \n            \n            \n                \ntoTrueFalse()\n                \n            \n\n\n            \n                \n                    Defined in src/questions/entities/question.entity.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         TrueFalseEntity\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from '@nestjs/swagger';\nimport { Question, QuestionType } from '@prisma/client';\nimport { Exclude, Type } from 'class-transformer';\nimport { TagEntity } from '../tags/entities/tag.entity';\nimport { MultipleChoiceEntity } from '../multiple-choice/entities/multiple-choice.entity';\nimport { MultipleSelectEntity } from '../multiple-select/entities/multiple-select.entity';\nimport { ShortAnswerEntity } from '../short-answer/entities/short-answer.entity';\nimport { TrueFalseEntity } from '../true-false/entities/true-false.entity';\n\nexport class QuestionEntity implements Question {\n    id: number;\n\n    @Exclude()\n    @ApiHideProperty()\n    examId: number;\n    question: string;\n    description: string | null;\n\n    @Exclude()\n    type: QuestionType;\n\n    options: string[];\n    answers: number[];\n\n    createdAt: Date;\n    updatedAt: Date;\n\n    @Exclude()\n    @ApiHideProperty()\n    deletedAt: Date | null = null;\n    @Exclude()\n    @ApiHideProperty()\n    isDeleted: boolean;\n\n\n    @Type(() => TagEntity)\n    tags: TagEntity[];\n\n\n    constructor(partial: Partial) {\n        Object.assign(this, partial);\n    }\n\n    toShortAnswer(): ShortAnswerEntity {\n        return {\n            id: this.id,\n            question: this.question,\n            type: QuestionType.SHORT_ANSWER,\n            description: this.description,\n            answer: this.options[this.answers[0]],\n            tags: this.tags,\n        }\n    }\n\n    toMultipleChoice(): MultipleChoiceEntity {\n        return {\n            id: this.id,\n            type: QuestionType.MULTIPLE_CHOICE,\n            question: this.question,\n            description: this.description,\n            answer: this.answers[0],\n            options: this.options,\n            tags: this.tags,\n        }\n    }\n\n\n    toMultipleSelect(): MultipleSelectEntity {\n        return {\n            id: this.id,\n            type: QuestionType.MULTIPLE_SELECT,\n            question: this.question,\n            description: this.description,\n            answers: this.answers,\n            options: this.options,\n            tags: this.tags,\n        }\n    }\n\n    toTrueFalse(): TrueFalseEntity {\n        return {\n            id: this.id,\n            type: QuestionType.TRUE_FALSE,\n            question: this.question,\n            description: this.description,\n            answer: this.answers[0] === 1,\n            tags: this.tags,\n        }\n    }\n}\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionsController.html":{"url":"controllers/QuestionsController.html","title":"controller - QuestionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/questions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                questions\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMultipleChoice\n                            \n                            \n                                createMultipleSelect\n                            \n                            \n                                createShortAnswer\n                            \n                            \n                                createTrueFalse\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMultipleChoice\n                        \n                    \n                \n            \n            \n                \ncreateMultipleChoice(createQuestionDto: CreateMultipleChoiceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multiple-choice')\n                \n            \n\n            \n                \n                    Defined in src/questions/questions.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateMultipleChoiceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createMultipleSelect\n                        \n                    \n                \n            \n            \n                \ncreateMultipleSelect(createQuestionDto: CreateMultipleChoiceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multiple-select')\n                \n            \n\n            \n                \n                    Defined in src/questions/questions.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateMultipleChoiceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createShortAnswer\n                        \n                    \n                \n            \n            \n                \ncreateShortAnswer(createQuestionDto: CreateShortAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('short-answer')\n                \n            \n\n            \n                \n                    Defined in src/questions/questions.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateShortAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createTrueFalse\n                        \n                    \n                \n            \n            \n                \ncreateTrueFalse(createQuestionDto: CreateTrueFalseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('true-false')\n                \n            \n\n            \n                \n                    Defined in src/questions/questions.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateTrueFalseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(undefined: ParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/questions/questions.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ParamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(undefined: ParamDto, undefined: QueryDeleteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/questions/questions.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ParamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                QueryDeleteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(undefined: ParamDto, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/questions/questions.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ParamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, Query } from '@nestjs/common';\nimport { QuestionsService } from './questions.service';\nimport { UpdateQuestionDto } from './dto/update-question.dto';\nimport { CreateMultipleChoiceDto } from './multiple-choice/dto/create-multiple-choice.dto';\nimport { CreateTrueFalseDto } from './true-false/dto/create-true-false.dto';\nimport { CreateShortAnswerDto } from './short-answer/dto/create-short-answer.dto';\nimport { QueryDeleteDto } from 'src/shared/dto/query.dto';\nimport { ParamDto } from 'src/shared/dto/param.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@Controller('questions')\n@ApiTags('questions')\nexport class QuestionsController {\n  constructor(private readonly questionsService: QuestionsService) { }\n\n  @Post(\"multiple-choice\")\n  createMultipleChoice(@Body() createQuestionDto: CreateMultipleChoiceDto) {\n    return this.questionsService.create(createQuestionDto.toQuestion());\n  }\n\n  @Post(\"true-false\")\n  createTrueFalse(@Body() createQuestionDto: CreateTrueFalseDto) {\n    return this.questionsService.create(createQuestionDto.toQuestion());\n  }\n\n\n  @Post(\"short-answer\")\n  createShortAnswer(@Body() createQuestionDto: CreateShortAnswerDto) {\n    return this.questionsService.create(createQuestionDto.toQuestion());\n  }\n\n  @Post(\"multiple-select\")\n  createMultipleSelect(@Body() createQuestionDto: CreateMultipleChoiceDto) {\n    return this.questionsService.create(createQuestionDto.toQuestion());\n  }\n\n\n  @Get(':id')\n  findOne(@Param() { id }: ParamDto) {\n    return this.questionsService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param() { id }: ParamDto, @Body() updateQuestionDto: UpdateQuestionDto) {\n    return this.questionsService.update(id, updateQuestionDto);\n  }\n\n  @Delete(':id')\n  remove(@Param() { id }: ParamDto, @Query() { force }: QueryDeleteDto) {\n    return this.questionsService.remove(id, force);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestionsModule.html":{"url":"modules/QuestionsModule.html","title":"module - QuestionsModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_QuestionsModule\n\n\n\ncluster_QuestionsModule_imports\n\n\n\ncluster_QuestionsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nQuestionsModule\n\nQuestionsModule\n\nQuestionsModule -->\n\nPrismaModule->QuestionsModule\n\n\n\n\n\nQuestionsService\n\nQuestionsService\n\nQuestionsModule -->\n\nQuestionsService->QuestionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/questions/questions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuestionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuestionsService } from './questions.service';\nimport { QuestionsController } from './questions.controller';\nimport { PrismaModule } from 'src/shared/prisma/prisma.module';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  controllers: [QuestionsController],\n  providers: [QuestionsService],\n  imports: [PrismaModule, ConfigModule]\n})\nexport class QuestionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionsService.html":{"url":"injectables/QuestionsService.html","title":"injectable - QuestionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QuestionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/questions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                handleCron\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/questions/questions.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(undefined: CreateQuestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/questions/questions.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/questions/questions.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleCron\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n                \n            \n\n            \n                \n                    Defined in src/questions/questions.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number, force: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/questions/questions.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    force\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, undefined: UpdateQuestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/questions/questions.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { PrismaService } from 'src/shared/prisma/prisma.service';\nimport { CreateQuestionDto } from './dto/create-question.dto';\nimport { UpdateQuestionDto } from './dto/update-question.dto';\n\n@Injectable()\nexport class QuestionsService {\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private configService: ConfigService) { }\n\n  create({ examId, tags, ...createQuestionDto }: CreateQuestionDto) {\n    return this.prisma.question.create({\n      data: {\n        ...createQuestionDto,\n        exam: {\n          connect: {\n            id: examId,\n          }\n        },\n        tags: {\n          connectOrCreate: tags.map(tag => ({\n            where: { name: tag },\n            create: { name: tag }\n          })\n          )\n        }\n      }\n    });\n  }\n\n\n  findOne(id: number) {\n    return this.prisma.question.findFirstOrThrow({\n      where: {\n        id\n      }\n    });\n  }\n\n  update(id: number, { tags, ...updateQuestionDto }: UpdateQuestionDto) {\n    return this.prisma.question.update({\n      where: {\n        id,\n      },\n      data: {\n        ...updateQuestionDto,\n        tags: {\n          connectOrCreate: tags.map(tag => ({\n            where: { name: tag },\n            create: { name: tag }\n          }))\n        }\n      },\n\n    });\n\n  }\n\n  async remove(id: number, force: boolean = false) {\n    if (force) {\n      return this.prisma.question.delete({\n        where: {\n          id,\n        }\n      });\n    } else {\n      return this.prisma.question.update({\n        where: {\n          id,\n        },\n        data: {\n          deletedAt: new Date(),\n        }\n      });\n    }\n  }\n\n\n  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n  async handleCron() {\n\n    const lte = new Date(new Date().getTime() - this.configService.getOrThrow('PERMANETLY_DELETE_AFTER'));\n    const deletedQuestions = await this.prisma.question.deleteMany({\n      where: {\n        isDeleted: true,\n        deletedAt: {\n          lte\n        },\n      }\n    });\n    console.log(`Deleted ${deletedQuestions.count} questions`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisCacheModule.html":{"url":"modules/RedisCacheModule.html","title":"module - RedisCacheModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisCacheModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RedisCacheModule\n\n\n\ncluster_RedisCacheModule_exports\n\n\n\ncluster_RedisCacheModule_providers\n\n\n\n\nRedisCacheService \n\nRedisCacheService \n\n\n\nRedisCacheModule\n\nRedisCacheModule\n\nRedisCacheService  -->\n\nRedisCacheModule->RedisCacheService \n\n\n\n\n\nRedisCacheService\n\nRedisCacheService\n\nRedisCacheModule -->\n\nRedisCacheService->RedisCacheModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/redis-cache/redis-cache.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisCacheService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisCacheService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheInterceptor, CacheModule, Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { RedisCacheService } from './redis-cache.service';\n\n@Module({\n    imports: [\n        CacheModule.registerAsync({\n            useFactory: (configService: ConfigService) => ({\n              host: configService.getOrThrow('REDIS_HOST'),\n              port: configService.getOrThrow('REDIS_PORT'),\n              password: configService.getOrThrow('REDIS_PASSWORD'),\n              ttl: configService.getOrThrow('REDIS_TTL'),\n            }),\n            inject: [ConfigService],\n            imports: [ConfigModule],\n          }),\n    ],\n    providers: [\n        RedisCacheService,\n        {\n            provide: APP_INTERCEPTOR,\n            useClass: CacheInterceptor,\n        },\n    ],\n    exports: [RedisCacheService],\n})\nexport class RedisCacheModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisCacheService.html":{"url":"injectables/RedisCacheService.html","title":"injectable - RedisCacheService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisCacheService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/redis-cache/redis-cache.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cache: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/shared/redis-cache/redis-cache.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cache\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/redis-cache/redis-cache.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                    \n                    set(key: string, value: any, ttl?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/redis-cache/redis-cache.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ttl\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, CACHE_MANAGER } from '@nestjs/common';\nimport { Cache } from 'cache-manager';\n\n@Injectable()\nexport class RedisCacheService {\n    constructor(\n        @Inject(CACHE_MANAGER) private cache: Cache) { }\n\n    async get(key: string) {\n        const data =  await this.cache.get(key);\n        return data as string;\n    }\n\n    async set(key: string, value: any, ttl?: number) {\n        return await this.cache.set(key, value, ttl);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refresh-token/refresh-token.gaurd.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') { }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RefreshTokenModule.html":{"url":"modules/RefreshTokenModule.html","title":"module - RefreshTokenModule","body":"\n                   \n\n\n\n\n    Modules\n    RefreshTokenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RefreshTokenModule\n\n\n\ncluster_RefreshTokenModule_exports\n\n\n\ncluster_RefreshTokenModule_providers\n\n\n\n\nRefreshTokenService \n\nRefreshTokenService \n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\nRefreshTokenService  -->\n\nRefreshTokenModule->RefreshTokenService \n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nRefreshTokenModule -->\n\nRefreshTokenService->RefreshTokenModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nRefreshTokenModule -->\n\nRefreshTokenStrategy->RefreshTokenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/refresh-token/refresh-token.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RefreshTokenService\n                        \n                        \n                            RefreshTokenStrategy\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RefreshTokenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RefreshTokenService } from './refresh-token.service';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { RefreshTokenStrategy } from './refresh-token.strategy';\n\n@Module({\n  providers: [\n    RefreshTokenStrategy,\n    RefreshTokenService\n  ],\n  imports: [\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (ConfigService: ConfigService) => ({\n        secret: ConfigService.getOrThrow('REFRESH_TOKEN_SECRET'),\n        signOptions: { \n          expiresIn: ConfigService.getOrThrow('REFRESH_TOKEN_EXPIRATION_TIME') \n        },\n      }),\n    }),\n  ],\n  exports: [\n    RefreshTokenService\n  ]\n})\nexport class RefreshTokenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenService.html":{"url":"injectables/RefreshTokenService.html","title":"injectable - RefreshTokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refresh-token/refresh-token.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cookieName\n                            \n                            \n                                cookieOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearCookie\n                            \n                            \n                                sendCookie\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/refresh-token/refresh-token.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearCookie\n                        \n                    \n                \n            \n            \n                \nclearCookie(res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/refresh-token/refresh-token.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendCookie\n                        \n                    \n                \n            \n            \n                \nsendCookie(res: Response, undefined: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/refresh-token/refresh-token.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cookieName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/refresh-token/refresh-token.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cookieOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CookieOptions\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/refresh-token/refresh-token.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { CookieOptions, Response } from 'express';\nimport { UserEntity } from 'src/users/entities/user.entity';\nimport { Payload } from '../entities/auth.entity';\n\n@Injectable()\nexport class RefreshTokenService {\n    cookieName: string;\n    cookieOptions: CookieOptions;\n\n    constructor(\n        private jwtService: JwtService,\n        configService: ConfigService) {\n\n        this.cookieName = configService.getOrThrow('REFRESH_TOKEN_COOKIE_NAME')\n        const httpOnly = configService.getOrThrow('COOKIE_HTTP_ONLY');\n        const domain = configService.getOrThrow('COOKIE_DOMAIN');\n        const maxAge = configService.getOrThrow('REFRESH_TOKEN_EXPIRATION_TIME');\n        this.cookieOptions = {\n            httpOnly,\n            path: \"/auth/refresh\",\n            maxAge,\n            domain,\n        }\n    }\n\n\n    sendCookie(res: Response, { email, id: sub, role }: UserEntity) {\n        const data: Payload = { email, sub, role };\n        const token = this.jwtService.sign(data);\n        res.cookie(\n            this.cookieName,\n            token,\n            this.cookieOptions)\n    }\n\n\n    clearCookie(res: Response) {\n        res.clearCookie(this.cookieName, this.cookieOptions);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refresh-token/refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/refresh-token/refresh-token.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/refresh-token/refresh-token.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Payload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Payload } from '../entities/auth.entity';\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\n  \n    constructor(configService: ConfigService) {\n        const cookieName = configService.getOrThrow('REFRESH_TOKEN_COOKIE_NAME');\n        const secretOrKey = configService.getOrThrow('REFRESH_TOKEN_SECRET');\n        const jwtFromRequest = ExtractJwt.fromExtractors([\n            (request: Request) => request?.cookies?.[cookieName] || null\n        ]);\n        super({ jwtFromRequest, secretOrKey });\n    }\n\n    validate(payload: Payload) {\n        return payload;\n    }\n}\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGaurd.html":{"url":"guards/RoleGaurd.html","title":"guard - RoleGaurd","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGaurd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/shared/role/role.gaurd.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/role/role.gaurd.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/role/role.gaurd.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '@prisma/client';\nimport { UsersService } from '../../users/users.service';\n\n@Injectable()\nexport class RoleGaurd implements CanActivate {\n    constructor(\n        private reflector: Reflector,\n        private userService: UsersService\n        ) { }\n\n    async canActivate(context: ExecutionContext) {\n        const requiredRole = this.reflector.getAllAndOverride('role', [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n        if (!requiredRole)\n            return true;\n        const { user } = context.switchToHttp().getRequest();\n        if (!user)\n            return false;\n        const data = await this.userService.findOne(user.id);\n        return (data.role === requiredRole ||  user?.role === requiredRole);\n    }\n}\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShortAnswerEntity.html":{"url":"classes/ShortAnswerEntity.html","title":"class - ShortAnswerEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShortAnswerEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/short-answer/entities/short-answer.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answer\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                question\n                            \n                            \n                                tags\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/short-answer/entities/short-answer.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/short-answer/entities/short-answer.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/short-answer/entities/short-answer.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/short-answer/entities/short-answer.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TagEntity[]\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/short-answer/entities/short-answer.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QuestionType\n\n                    \n                \n                \n                    \n                        Default value : QuestionType.SHORT_ANSWER\n                    \n                \n                    \n                        \n                                Defined in src/questions/short-answer/entities/short-answer.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { QuestionType } from \"@prisma/client\";\nimport { TagEntity } from \"src/questions/tags/entities/tag.entity\";\n\nexport class ShortAnswerEntity {\n    id: number;\n    question: string;\n    type: QuestionType = QuestionType.SHORT_ANSWER;\n    description: string | null;\n    answer: string;\n    tags: TagEntity[];}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TagEntity.html":{"url":"classes/TagEntity.html","title":"class - TagEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TagEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/tags/entities/tag.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Tag\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/questions/tags/entities/tag.entity.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/tags/entities/tag.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/tags/entities/tag.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/tags/entities/tag.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/tags/entities/tag.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Tag } from \"@prisma/client\";\nimport { Exclude } from \"class-transformer\";\n\nexport class TagEntity implements Tag {\n    id: number;\n    name: string;\n    createdAt: Date;\n    updatedAt: Date;\n\n    constructor(partial: Partial) {\n        Object.assign(this, partial);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrueFalseEntity.html":{"url":"classes/TrueFalseEntity.html","title":"class - TrueFalseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrueFalseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/true-false/entities/true-false.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answer\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                question\n                            \n                            \n                                tags\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/true-false/entities/true-false.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/true-false/entities/true-false.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/true-false/entities/true-false.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/true-false/entities/true-false.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TagEntity[]\n\n                    \n                \n                    \n                        \n                                Defined in src/questions/true-false/entities/true-false.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QuestionType\n\n                    \n                \n                \n                    \n                        Default value : QuestionType.TRUE_FALSE\n                    \n                \n                    \n                        \n                                Defined in src/questions/true-false/entities/true-false.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { QuestionType } from \"@prisma/client\";\nimport { TagEntity } from \"src/questions/tags/entities/tag.entity\";\n\nexport class TrueFalseEntity {\n    id: number;\n    type: QuestionType = QuestionType.TRUE_FALSE;\n    question: string;\n    description: string | null;\n    answer: boolean;\n    tags: TagEntity[];\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAuthDto.html":{"url":"classes/UpdateAuthDto.html","title":"class - UpdateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/oauth-login.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateAuthDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamDto.html":{"url":"classes/UpdateExamDto.html","title":"class - UpdateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exams/dto/update-exam.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateExamDto } from './create-exam.dto';\n\nexport class UpdateExamDto extends PartialType(CreateExamDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMultipleChoiceDto.html":{"url":"classes/UpdateMultipleChoiceDto.html","title":"class - UpdateMultipleChoiceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMultipleChoiceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/multiple-choice/dto/update-multiple-choice.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateMultipleChoiceDto } from './create-multiple-choice.dto';\n\nexport class UpdateMultipleChoiceDto extends PartialType(CreateMultipleChoiceDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMultipleSelectDto.html":{"url":"classes/UpdateMultipleSelectDto.html","title":"class - UpdateMultipleSelectDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMultipleSelectDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/multiple-select/dto/update-multiple-select.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateMultipleSelectDto } from './create-multiple-select.dto';\n\nexport class UpdateMultipleSelectDto extends PartialType(CreateMultipleSelectDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionDto.html":{"url":"classes/UpdateQuestionDto.html","title":"class - UpdateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/dto/update-question.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateQuestionDto } from './create-question.dto';\n\nexport class UpdateQuestionDto extends PartialType(CreateQuestionDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateShortAnswerDto.html":{"url":"classes/UpdateShortAnswerDto.html","title":"class - UpdateShortAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateShortAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/short-answer/dto/update-short-answer.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateShortAnswerDto } from './create-short-answer.dto';\n\nexport class UpdateShortAnswerDto extends PartialType(CreateShortAnswerDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTagDto.html":{"url":"classes/UpdateTagDto.html","title":"class - UpdateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/tags/dto/update-tag.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateTagDto } from './create-tag.dto';\n\nexport class UpdateTagDto extends PartialType(CreateTagDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTrueFalseDto.html":{"url":"classes/UpdateTrueFalseDto.html","title":"class - UpdateTrueFalseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTrueFalseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/questions/true-false/dto/update-true-false.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateTrueFalseDto } from './create-true-false.dto';\n\nexport class UpdateTrueFalseDto extends PartialType(CreateTrueFalseDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                emailVerified\n                            \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/users/entities/user.entity.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: Role, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/entities/user.entity.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Role, User } from \"@prisma/client\"\nimport { Exclude } from \"class-transformer\";\nimport * as bcript from 'bcrypt';\n\nexport class UserEntity implements User {\n    id: number;\n    email: string;\n\n    firstName: string | null;\n    lastName: string | null;\n    image: string | null;\n\n    emailVerified: boolean;\n\n    @ApiHideProperty()\n    @Exclude()\n    password: string | null;\n\n    @ApiProperty({ enum: Role, default: Role.USER })\n    role: Role;\n\n    @ApiHideProperty()\n    @Exclude()\n    createdAt: Date;\n\n    @ApiHideProperty()\n    @Exclude()\n    updatedAt: Date;\n\n\n    constructor(partial: Partial) {\n        Object.assign(this, partial);\n    }\n\n    async comparePassword(password: string) {\n        return bcript.compare(password, this.password);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(query: QueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, Query, UseGuards } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { ApiCookieAuth, ApiTags } from '@nestjs/swagger';\nimport { QueryDto } from 'src/shared/dto/query.dto';\nimport { IsRole } from '../shared/role/role.decorator';\nimport { Role } from '@prisma/client';\nimport { AccessTokenGuard } from 'src/auth/access-token/access-token.gaurd';\n\n@Controller('users')\n@ApiTags('users')\n@UseGuards(AccessTokenGuard)\n@IsRole(Role.ADMIN)\n@ApiCookieAuth()\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  findAll(@Query() query: QueryDto) {\n    return this.usersService.findAll(query);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: number) {\n    return this.usersService.findOne({ id });\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: number) {\n    return this.usersService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { PrismaModule } from 'src/shared/prisma/prisma.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RoleGaurd } from '../shared/role/role.gaurd';\n\n@Module({\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n  {\n    provide: APP_GUARD,\n    useClass: RoleGaurd,\n  }],\n  imports: [PrismaModule, ConfigModule],\n  exports: [UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                hashPassword\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: QueryUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                QueryUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(where: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from '../shared/prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UserEntity } from './entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { QueryUserDto } from './dto/query.user.dto';\n\n@Injectable()\nexport class UsersService {\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly config: ConfigService) {}\n\n\n  private hashPassword(password: string) {\n    return bcrypt.hash(password, this.config.getOrThrow('SALT'));\n  }\n\n\n  async create(data: CreateUserDto) {\n    data.password = await this.hashPassword(data.password);\n    const user = await this.prisma.user.create({ data });\n    return new UserEntity(user);\n  }\n\n\n  async findOne(where: { id?: number, email?: string }) {\n    const user = await this.prisma.user.findUnique({ where });\n    return new UserEntity(user);\n  }\n\n\n  async findAll({\n    skip,\n    take,\n    from: gte,\n    to: lte,\n    field,\n    contains,\n    sort,\n    order,\n  }: QueryUserDto\n  ) {\n    const where = {\n      [field]: { contains },\n      createdAt: { gte, lte },\n    };\n\n    const orderBy = { [sort]: order };\n\n    const users = await this.prisma.user.findMany({\n      skip,\n      take,\n      where,\n      orderBy,\n    })\n    return users.map(user => new UserEntity(user));\n  }\n\n  async update(id: number, data: UpdateUserDto) {\n    const user = await this.prisma.user.update({\n      where: { id },\n      data,\n    });\n  }\n\n  async remove(id: number) {\n    const user = await this.prisma.user.delete({ where: { id } });\n    return new UserEntity(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationErrorDto.html":{"url":"classes/ValidationErrorDto.html","title":"class - ValidationErrorDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationErrorDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/dto/validation-error.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                message\n                            \n                            \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/validation-error.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/validation-error.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/validation-error.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ValidationErrorDto {\n    statusCode: number;\n    message: string[];\n    error: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyEmailDto.html":{"url":"classes/VerifyEmailDto.html","title":"class - VerifyEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/verify-emaill.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                otp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/verify-emaill.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform } from \"class-transformer\";\nimport { IsEmail, IsNumber, IsString } from \"class-validator\";\n\nexport class VerifyEmailDto {\n    @IsString()\n    otp: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/access-token/access-token.gaurd.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/access-token/access-token.service.ts\n            \n            injectable\n            AccessTokenService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/access-token/access-token.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/decorator/auth.gaurd.ts\n            \n            variable\n            AuthUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/credential-login.dto.ts\n            \n            class\n            CredentialLogin\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/credential-register.dto.ts\n            \n            class\n            CredentailRegister\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/oauth-login.dto.ts\n            \n            class\n            UpdateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/verify-emaill.dto.ts\n            \n            class\n            VerifyEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Payload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/google/google.controller.ts\n            \n            controller\n            GoogleController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/google/google.gaurd.ts\n            \n            injectable\n            GoogleGaurd\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/google/google.service.ts\n            \n            injectable\n            GoogleService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/google/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/otp/otp.controller.ts\n            \n            controller\n            OtpController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/otp/otp.service.ts\n            \n            injectable\n            OtpService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/refresh-token/refresh-token.gaurd.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/refresh-token/refresh-token.service.ts\n            \n            injectable\n            RefreshTokenService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/refresh-token/refresh-token.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exams/dto/create-exam.dto.ts\n            \n            class\n            CreateExamDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exams/dto/query-exam.dto.ts\n            \n            class\n            QueryExamDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/exams/dto/update-exam.dto.ts\n            \n            class\n            UpdateExamDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exams/entities/exam.entity.ts\n            \n            class\n            EntityWithQuestions\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/exams/entities/exam.entity.ts\n            \n            class\n            ExamEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/exams/exams.controller.ts\n            \n            controller\n            ExamsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/exams/exams.service.ts\n            \n            injectable\n            ExamsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/questions/dto/create-question.dto.ts\n            \n            class\n            CreateQuestionDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/questions/dto/query-question.dto.ts\n            \n            class\n            QueryQuestionDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/questions/dto/update-question.dto.ts\n            \n            class\n            UpdateQuestionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/questions/entities/question.entity.ts\n            \n            class\n            QuestionEntity\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/questions/multiple-choice/dto/create-multiple-choice.dto.ts\n            \n            class\n            CreateMultipleChoiceDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/questions/multiple-choice/dto/update-multiple-choice.dto.ts\n            \n            class\n            UpdateMultipleChoiceDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/questions/multiple-choice/entities/multiple-choice.entity.ts\n            \n            class\n            MultipleChoiceEntity\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/questions/multiple-select/dto/create-multiple-select.dto.ts\n            \n            class\n            CreateMultipleSelectDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/questions/multiple-select/dto/update-multiple-select.dto.ts\n            \n            class\n            UpdateMultipleSelectDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/questions/multiple-select/entities/multiple-select.entity.ts\n            \n            class\n            MultipleSelectEntity\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/questions/questions.controller.ts\n            \n            controller\n            QuestionsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/questions/questions.service.ts\n            \n            injectable\n            QuestionsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/questions/short-answer/dto/create-short-answer.dto.ts\n            \n            class\n            CreateShortAnswerDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/questions/short-answer/dto/update-short-answer.dto.ts\n            \n            class\n            UpdateShortAnswerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/questions/short-answer/entities/short-answer.entity.ts\n            \n            class\n            ShortAnswerEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/questions/tags/dto/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/questions/tags/dto/update-tag.dto.ts\n            \n            class\n            UpdateTagDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/questions/tags/entities/tag.entity.ts\n            \n            class\n            TagEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/questions/true-false/dto/create-true-false.dto.ts\n            \n            class\n            CreateTrueFalseDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/questions/true-false/dto/update-true-false.dto.ts\n            \n            class\n            UpdateTrueFalseDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/questions/true-false/entities/true-false.entity.ts\n            \n            class\n            TrueFalseEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shared/decorator/is-gte.decorator.ts\n            \n            injectable\n            IsGte\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/shared/decorator/is-valid-pos.decorator.ts\n            \n            injectable\n            IsValidPos\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/dto/param.dto.ts\n            \n            class\n            ParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/dto/query.dto.ts\n            \n            class\n            QueryDeleteDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/dto/query.dto.ts\n            \n            class\n            QueryDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shared/dto/validation-error.dto.ts\n            \n            class\n            ValidationErrorDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/filter/prisma.filter.ts\n            \n            class\n            PrismaExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/middleware/log.middleware.ts\n            \n            injectable\n            LogMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/redis-cache/redis-cache.service.ts\n            \n            injectable\n            RedisCacheService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/role/role.decorator.ts\n            \n            variable\n            IsRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/role/role.gaurd.ts\n            \n            guard\n            RoleGaurd\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/query.user.dto.ts\n            \n            class\n            QueryUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.8.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/schedule : ^2.1.0\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.1.4\n        \n            @nestjs/throttler : ^3.1.0\n        \n            @prisma/client : ^4.8.1\n        \n            bcrypt : ^5.1.0\n        \n            cache-manager : ^5.1.4\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cookie-parser : ^1.4.6\n        \n            googleapis : ^110.0.0\n        \n            handlebars : ^4.7.7\n        \n            joi : ^17.7.0\n        \n            nodemailer : ^6.9.0\n        \n            openid-client : ^5.3.1\n        \n            passport : ^0.6.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            prisma-dbml-generator : ^0.10.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccessTokenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExamsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OtpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisCacheModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RefreshTokenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccessTokenModule\n\n\n\ncluster_AccessTokenModule_exports\n\n\n\ncluster_AccessTokenModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ExamsModule\n\n\n\ncluster_ExamsModule_imports\n\n\n\ncluster_ExamsModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_OtpModule\n\n\n\ncluster_OtpModule_exports\n\n\n\ncluster_OtpModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_QuestionsModule\n\n\n\ncluster_QuestionsModule_providers\n\n\n\ncluster_RedisCacheModule\n\n\n\ncluster_RedisCacheModule_exports\n\n\n\ncluster_RedisCacheModule_providers\n\n\n\ncluster_RefreshTokenModule\n\n\n\ncluster_RefreshTokenModule_exports\n\n\n\ncluster_RefreshTokenModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAccessTokenService \n\nAccessTokenService \n\n\n\nAccessTokenModule\n\nAccessTokenModule\n\nAccessTokenService  -->\n\nAccessTokenModule->AccessTokenService \n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccessTokenModule->AuthModule\n\n\n\n\n\nAccessTokenService\n\nAccessTokenService\n\nAccessTokenModule -->\n\nAccessTokenService->AccessTokenModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAccessTokenModule -->\n\nAccessTokenStrategy->AccessTokenModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExamsModule\n\nExamsModule\n\nAppModule -->\n\nExamsModule->AppModule\n\n\n\n\n\nQuestionsModule\n\nQuestionsModule\n\nAppModule -->\n\nQuestionsModule->AppModule\n\n\n\n\n\nRedisCacheModule\n\nRedisCacheModule\n\nAppModule -->\n\nRedisCacheModule->AppModule\n\n\n\n\n\nOtpModule\n\nOtpModule\n\nOtpModule -->\n\nRedisCacheModule->OtpModule\n\n\n\n\n\nRedisCacheService \n\nRedisCacheService \n\nRedisCacheService  -->\n\nRedisCacheModule->RedisCacheService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nMailModule\n\nMailModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\nAuthModule -->\n\nOtpModule->AuthModule\n\n\n\n\n\nOtpService \n\nOtpService \n\nOtpService  -->\n\nOtpModule->OtpService \n\n\n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\nAuthModule -->\n\nRefreshTokenModule->AuthModule\n\n\n\n\n\nRefreshTokenService \n\nRefreshTokenService \n\nRefreshTokenService  -->\n\nRefreshTokenModule->RefreshTokenService \n\n\n\n\n\nGoogleService\n\nGoogleService\n\nAuthModule -->\n\nGoogleService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nExamsModule -->\n\nPrismaModule->ExamsModule\n\n\n\nQuestionsModule -->\n\nPrismaModule->QuestionsModule\n\n\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nExamsService\n\nExamsService\n\nExamsModule -->\n\nExamsService->ExamsModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nOtpService\n\nOtpService\n\nOtpModule -->\n\nOtpService->OtpModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nQuestionsService\n\nQuestionsService\n\nQuestionsModule -->\n\nQuestionsService->QuestionsModule\n\n\n\n\n\nRedisCacheService\n\nRedisCacheService\n\nRedisCacheModule -->\n\nRedisCacheService->RedisCacheModule\n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nRefreshTokenModule -->\n\nRefreshTokenService->RefreshTokenModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nRefreshTokenModule -->\n\nRefreshTokenStrategy->RefreshTokenModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    38 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthUser   (src/.../auth.gaurd.ts)\n                        \n                        \n                            IsRole   (src/.../role.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorator/auth.gaurd.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user.sub;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/shared/role/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsRole\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: Role) => SetMetadata('role', role)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
